{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e21fc311-013b-4b9f-9bd3-bfcb6228d59f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "cb58a73f-c039-4f51-be69-efc75af74304",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7feb6d6b-d09f-4333-9bf0-a95fe5fae8ef",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9638a647-a0a2-401b-9c8c-db0d7501573e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5e3a918-a4bd-4da1-be4e-bc7903660e42"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "ebf64b88-2b63-44f0-813a-a7b73ce125a6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "36128bb6-b94d-497c-8d9d-62f407f669d3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d00d0ccc-2942-4a94-806f-7ba5d34b3b44",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a765348e-272e-44d9-9197-cfdd829d928b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf2995f-6f75-4a06-a11c-94c438e766df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8fd09b4-b030-43af-a8ac-910bc88b4315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a29a41-fca0-4f6a-ae73-d844a79c6049",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c70c6f-4c9e-4853-960a-ac0dadf3f4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5de6ec7-328e-4b85-8408-6078fd29015c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbd389d-5f79-4f70-9584-840b37049b83",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d26c346-0bfd-438a-80d4-39524183ffa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9ea39f6-840f-4a62-84a8-415a1fce5340"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "faeec47f-cf19-4f8c-a4f9-9cc89048a72e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "99220afa-2f1b-4ce3-bad4-a3df638c5b28",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569cfb36-769b-441f-b597-a295ffe746bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00ab1dea-1b32-4b99-a21b-b2773e418def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b61b87-e764-48f9-af19-fd055b407903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3a3170b-3289-4f56-afcc-cba90dca526e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4659b96-7bac-4691-a69d-845c4eb7f238",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f2931f-969a-477d-9460-83cd463d256c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bef6760a-8fd4-4183-86bc-de645550ec28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8045e28f-4ad7-4bc5-849d-56865adb0db1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "49f750fd-1f0e-479e-8534-d788cf5ddf55"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cc4f5afe-31e0-4ffe-8379-8bf2c7fa0b5c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4df5cd96-b75a-482d-8863-fa026d180def",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4009f203-c812-46dc-a2fd-9f660d60c284",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "67cddbd6-3d63-4c95-8fb0-ef22a4022c99"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "381bc6b8-039d-452a-889c-d3ba7177fd79",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "f10295a6-a11c-4bde-af1b-ad8e6ec71e29"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84560188-f5fc-468f-93b3-366ad31a593c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01935d9f-9025-4576-bacd-fe49c362d95e"
            }
          }
        ]
      },
      {
        "id": "6ca762dd-b2ea-4ced-9a2b-2e8794187a82",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d5136e00-eb74-42ec-af93-f2f51b51cbea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1fc8254c-bcd9-4d10-a593-c92a86d1e36d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "279e9001-e3ea-46a8-9b65-3b0bbd2405b4",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6a29ea-7d32-41e0-a59f-1c6650616a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c598cb-75ad-4a11-b55a-37e3d42b1e61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e96b32a-9fec-4a79-bbb4-56592535c980",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e81b10e9-b00b-4075-a02e-a0c373600f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c04a1c3-acbd-4aad-ab06-10ed04aafc48",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc9f29f-e220-44a1-b8cb-838cf24d1d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53b8e6db-a991-46ea-929b-8cfecaad5fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b488602-86f7-42f8-a6f5-b823eb339386",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73496e5a-c574-4b59-897f-95718b245115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30062af4-9817-4187-939a-3f5a441886c8",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7074e3af-00f9-4a4d-9c9a-d36222a57cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d0ce4f-28ac-4276-a0ca-a96f2f26efac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c23965-ef4c-47f3-8f67-9e5637edf7ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f037d1b3-6617-4712-83cd-e4baf1ce86b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae0a3a4-3001-47e8-8509-6bf1d7eb959e",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbcd2721-d0ea-45de-8ed4-b1cc6d90d458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1f033c-4d7f-4e3c-bf64-7a1d0e368bb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1130c2cc-828b-4150-b216-f40041e4c344",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4516b3f-24c1-4887-b279-2da84915e312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10fce804-fa54-4dc4-96fc-1cb12f3c2c42",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dafb669-3213-47f0-8751-67f4ffa15851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d9411ed-2d29-4bb8-9dc4-fe934f27e8a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362df23d-ff8a-4690-ad61-131b7f0dd9f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fbd03ca-df62-4515-9938-e8d59a5ea28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0260e9b4-f1a7-46a4-8fe6-8028e7920eea",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb80c8c-c382-4e95-b3e1-51b5439d4a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b2d302-fd01-433a-ab50-ef8b0e89ba83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea37bee-5b1e-4332-bdac-0f77d0366121",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b4717c3-401e-4afc-81cd-3cc3d53f1ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdcaa9f3-f40f-451f-bd67-34d76847f46c",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ba055b-0a3a-42c1-972c-1af93b91356f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6de8a5f5-6a54-475a-a84f-30e8957d60a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25c0ca9-b1ac-4a38-a568-4fb0e789e325",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e113b95-7579-4d74-b604-45f69a862da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8a4660-6c28-4faf-b7e5-306c8d5f0a57",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc489c0-2ae7-426a-88b9-ecdade4eabfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c8be5d9-99a0-42ec-a937-53c5e484827a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2053ee33-ef01-4394-ae33-43aad63fb506",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "127976d8-f6dc-4b11-8757-b6c0e98beef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72576576-ef2f-4355-a508-10d378297a9a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2196b88a-cd10-4d7f-82ff-15fca83da057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a325d678-7384-4d3e-b3b3-ac699865d14c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5207a8bc-f1a9-4aaf-863c-281c493334cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c376242-ff8c-4fbe-8fe7-84fb4bea098f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58dc252b-5553-41bf-a486-d804fa4a2d4a",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7196cb10-8aec-4891-ab73-2bcf607a1ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37423a40-7960-448c-a579-26850b0ffdcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c703e10a-9d18-46f5-8c7b-5cc466d3f1e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce3a9492-70b3-4096-8e1c-d3972ded29ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e310717e-a0f1-43d4-9a10-aa5ed32aa27d",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "200b309c-966d-409a-a0b6-d386aae63609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f59b5ec7-19f2-4d68-b098-da49599d3d35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40db29af-efbf-4ab7-9736-2219b3942ca5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "ac8d1c58-375c-40e5-9ac8-bbbe0699f4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d41168-a959-4e43-8831-3bcf35e4ea8f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6507db2c-95b6-4b59-8648-addf13807084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2b01cc3-2c19-465e-8890-e83553840017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1343e7b4-c6d3-49f1-a8e5-b59db1455192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "db650ed1-a1cd-48cd-a5d9-7d7e9f6cd5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f51f501-ac34-498e-b724-725a507d6256",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5096a127-d5ff-40f0-a3f4-46aa58717b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3fd83a-147e-48b0-ac9d-96ec1896ad38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fd17d5-9eee-4e94-adf7-c81b3726a28f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "700699ca-7a52-475d-8045-077a8d1e7f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cef3195-ddee-446d-8f7b-819b8a27439b",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba3f6bf-0592-4fa8-94bf-25fa48274640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7203a9f1-c2e1-4f7b-bb77-d17518f3e682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8062e20-205c-416e-ade5-34a89d061336",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2263ffe-ff48-4541-ba41-da915c181559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb048ed7-9355-48f5-ad80-9a3bb8f18811",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3a94ff-0020-4015-8f66-0a6c1193d3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2441e1f-a24d-4155-bc4a-dc7aedae6207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2f7c32-65e0-45f2-b380-0576633862ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "495d6a16-fe95-49dc-aaa5-5859fb37cb62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e23f91de-09bd-4ebe-b62d-191d55928388",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6641a3fb-6e99-49f4-8423-a372532650c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a60360d-fe39-44f2-8d01-b8b6b1ca20da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce5cfd2-35bb-41c2-ab5c-3281f5300e68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "90a2b95c-e531-4727-a378-a6405954de22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a66e86-4f7e-4600-9ac5-51ab8baf4919",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d2c807-dc69-4db7-af2a-720131a9ad89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebee77a0-26fa-46cf-844b-c87797569d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30661099-a1ce-4162-b849-18a208665101",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87c482a7-a524-4ff8-81b8-14be68129dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab90df2-b8a5-48e9-8b1b-de45b17e8e04",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3c6796-aa08-4333-b580-67ad1ddf1183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d0d62a1-f482-40b8-83ea-cb3bb5598de0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef1a53a-2489-42a3-b351-b871759de925",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22033384-fbde-4fc7-8923-59c3e6fdcf57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1d1794-da59-49b3-b9fa-d55080e1b122",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66372676-ddf9-4fa5-ad06-da5ab9aa3694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "024bff1f-752a-466c-b02e-975c43016993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c570a296-81bd-4670-bf0d-7c488d5926d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37c47474-bf7f-443d-a144-2171dfac2743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a909d50-0543-497c-b54e-7c9cf98830a3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c8f7a7-147b-47dc-a8aa-fc1243d1a584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920145df-6842-418c-b9bc-3fa1fe6b7397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5bfe80-0563-4dd9-a843-c255da5096fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "787b2ab3-21ff-4ef1-83f6-fe3303b8f5d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f62ffa8-5df0-4f59-8633-c69c3dce7146",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ea1e13-2d75-4ed5-8994-e1d5dceecaef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f7dac7-ccaa-4f5a-8482-c22cdde0d151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c351f76-4c82-4637-8050-0c9d2173f5e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98065bb5-e44e-471a-9691-95d740d19186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74dfa082-eebf-480f-a2a1-8aac0950c7eb",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe0cd8c9-1f7b-4437-be83-ae4514fe9593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d70882ca-052e-4ca9-826e-d7620f311dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52e60f3-4b04-4dcc-88e6-5eaf125f4946",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d469104-ef84-416b-a195-436a0f962846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abfa901a-091e-49e5-8b91-5a9ac934b26b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "801b6582-6da5-4ed2-bb48-60325e2e3f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a838b36f-9a50-4949-b635-efff76dbdca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87bb5aa5-4ce6-4d10-a148-9b649d55220c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a4ec04e-46f8-4639-9805-4005fcb28688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c3103f0-f554-4137-9dd8-9ad63f331025",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ecd7b2-f53c-423f-a8a1-d1034bb9fe1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a783f88f-af0d-45d6-a4ac-96a8edf29b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78364580-546d-4096-9425-44a88a58d250",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3200fd9-71e6-4e2e-8d9c-21a3782daf2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e363f937-e5ff-4ff9-a759-d416745c2843",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba89e1b-4ab7-44c7-8bb3-90a1e9e892de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1469697-9964-4e3e-b711-b094cfb87673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7b8d9c-c861-40bf-9dcc-777f242ef192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97f34211-f573-45b9-8787-2d369a3bad4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeca5143-198a-4820-87f8-e0147387adaf",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4835761f-eb9f-4fee-acbe-5281dc1a3f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "994b9932-d074-4353-93b3-294a6a8a1709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893beec5-9dc2-45f3-af79-cf72477e757f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7742f2b6-ece1-4ab2-ae4d-c49f39ef47c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c5e6374-623c-44c3-a3cc-c3c9793ed2b0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e10520-de0d-489e-ba15-0d20378bc288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40dea5e1-f952-4784-9268-570a8bd67e20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b1a3ad-1c0c-4fe6-825b-9fc9a8b1e8e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "500a27bd-dc93-4a1f-b697-8d887ddd51ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe74998-9789-4922-94b2-6af8c462d835",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68608c06-4a16-4885-8695-0f2e25c8d213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6c02783-46cb-4f1e-9fbd-aad334676186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b757cf-1633-41e2-bf64-dbb730ac8c7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71daad29-68bd-45af-a9d6-d6fa685e230d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9a1949-0f37-4d85-af98-7483c0fbf9cb",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1186abe-e9b0-4f33-abc8-70eb0b53ba58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da12a2b2-d1ea-43a4-9610-aad39e91961c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91fa96f1-0e75-4c19-af22-2d834026bc60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "544d1a5a-5671-41c2-9741-634b26d3fbb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69791aa-04d3-4931-bd83-9b9a6c7edd04",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8efe314b-4f69-4bc0-8e86-799902c020ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54067b75-a95a-4f27-9678-7ed9888ecb4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556ee1c4-040a-4e68-a20c-4043a74f1f4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02f3b820-962e-44a1-bb02-7684baeb4c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f097bf-0c05-4dde-a751-ca750943f5f4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8c1a44-a48b-4b73-b22f-7aa32aae4cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "08c0a20c-8505-4237-a5ca-7a40e2891425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ed8d8f-5acc-44a8-8e8a-736edd5461b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "912a4afe-6989-4a97-91b5-522bb40323e8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "40bb296d-35dc-4360-9779-a4849556f651",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "60b27396-b58a-4c44-aa84-9cb77ecccd53",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "194ceacd-d893-4805-a0d8-e8428aa32612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fefc7b01-86f5-4a1a-aae5-c36f664e3c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db3ff0f-f5e2-4c77-957e-3a8f800733c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "7536f13b-3e3e-463a-a730-f6a445887482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ba6698-b360-40a2-8afa-cc3f861fba63",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "000d11b7-78ee-422b-bfe1-397b8d8394f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e97ecb11-e9ef-4e66-a2b5-86d41852e194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edae428-2c3c-403f-8db2-4946e3e0ae36",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "58a4b67e-33ca-46c5-b87f-7268b0e2435f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2448588f-67a4-409d-a7e6-01dba8c96c2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8aeadbf4-9c19-44eb-a890-a6200dde5034"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "97108608-44d8-4091-b6a3-f46bbac80ffc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a2e0128-f688-44ea-b52d-282bfc3cc284"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "178076bb-d4ac-426f-a3f3-0840490c369a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "27d0a23d-97e0-492a-ad85-5df89fe791ba"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "637664c5-aece-4d0f-b783-4bd60eef9cdd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2bb0b767-6655-4c16-96fb-dc9d5a0f60f6"
                }
              }
            ]
          },
          {
            "id": "e05b27bd-239f-48fa-aa5a-c3385b3b4696",
            "name": "Positive Testing",
            "item": [
              {
                "id": "51578f3d-1888-400b-b4e7-604432774f90",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "638c90b1-d16c-484e-9e50-da3f1e1704c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b4841d7-70c5-4ead-adcf-7d0c030ca475"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36a74ea0-838a-4ba4-aaef-c03e3c54e0a3",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2a63c2cb-cab9-4b06-8419-6d4605d643a8"
                    }
                  }
                ]
              },
              {
                "id": "e4ffa506-e273-4b6a-8493-151c5886d7bc",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e4b6065-e62a-4d29-83fc-13af9e12c46a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "39330f70-0bcb-48c4-b5dd-78fd1ea11bda"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef4717f8-6af5-4322-9d5d-f81ec60c363c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "fca11d0f-b27a-4300-9470-92b2f6a07d88"
                    }
                  }
                ]
              },
              {
                "id": "974e5f46-8678-4925-8bda-2e8c3b5fb1cd",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c71d5ead-b09f-4bd2-999c-e273b3273b20",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e47d0d5c-138e-44a1-bd0d-2eae97d9c035"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0deb0d7e-f17e-434a-9aa9-a6d2c1864a79",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "61eae9f2-e639-4964-bcfd-d6130a3f12d9"
                    }
                  }
                ]
              },
              {
                "id": "94dbedb4-1dcf-4a0e-a74f-ee9ce71847cb",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae02c973-0749-43d7-a4ec-0734316557c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dfe3b12b-5da5-403e-af2e-4b89a45bcc3d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27abb13e-6dbe-42b5-928e-7ae77f7f5ea4",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d3caf1b6-0666-4cdb-a66c-21f685dbf0b5"
                    }
                  }
                ]
              },
              {
                "id": "471845c4-454a-4841-bc95-1dce9941b026",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd256130-d129-4f3a-bbb7-10a5e503fc28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "3f0dfe78-2d46-43c8-b8d8-9b1b4b38b6f7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e97a9b7-5385-4535-811d-bd2077962532",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "54b8a538-664b-4f6d-a234-7ecb73c267fb"
                    }
                  }
                ]
              },
              {
                "id": "872c1833-d363-44f1-ad05-c143088b08b4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff4435ed-9e33-4c26-82f1-713f60eacf67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "19c83c75-ea2a-445e-a938-5a3dba2b67ee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "357c4b23-10b3-4fcf-82bc-83f12f7ef899",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ab8c3131-5f71-461a-b327-51025efa6dee"
                    }
                  }
                ]
              },
              {
                "id": "b14675ff-ac8f-4699-b367-1bbec66403d7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9183aed9-4ca1-4cea-a08c-ebf689240487",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97469428-0134-4efb-8eef-3edcaf6ce2c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74555ad7-628b-43c4-987a-d5fd0940ca50",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "59351bb0-56f9-449b-a278-95b9d36a40b0"
                    }
                  }
                ]
              },
              {
                "id": "f4dbb175-8815-4257-861d-6a5af341d632",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67a607eb-ca7e-4aee-a151-f496274b6274",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ab2bbc1-98e1-4efe-98a8-d645abaea3bc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a06acac3-192d-4a38-8d2a-8287ccf1cabd",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "1813d7f6-c544-4944-bc45-1494c1f1751d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "73c83a5e-a505-49d2-afcd-78c0b808db4a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6449ba43-c3f4-43b6-a397-6dae352d1f97"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "11991179-4726-40b7-ba70-9577032b5827",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6ed9ec8f-591c-45fc-9275-2438bdd83f49"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de3d345e-7783-4752-9fb8-7207bf354690",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "9b237e61-fa55-42ca-b1e7-2d7dc0130f62"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "691c653f-7fe8-4e62-9d08-d93a58f7cb5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7be34cd-c9fd-4afb-bc8b-c00d2bf3c424"
            }
          }
        ]
      },
      {
        "id": "302a1a6e-e592-436c-a216-c461eb02b12a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "72b8f4b8-b1d4-4084-b0b5-269b5971dd75",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cce3253e-3e0e-480c-85d7-c981c95c341e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b6cf9f2c-6950-4cd3-9c22-31320da93e21",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90131c24-28e3-4ad9-99fb-849a82683503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d8dd567-86b8-4927-9111-3b6c2b0e62d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc25863-c0e8-4a38-9e8b-713a58a2fe47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb6e8a0a-dc91-428a-9bdf-3b0bca32d26c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65eeb7e8-a997-4ab0-90c1-03b41a04d728",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2abf3c6-6fdc-4128-a162-fb7cb881bf50",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b0aa3ffd-71c1-468b-97ae-eb06f6fdbfef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "006b2967-6e6d-42ce-a0e5-57ce5bc1b50e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b11d33b-4e80-4f55-83dc-8d036fa00127"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03616b2b-0858-4614-98aa-2e52925dae34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db44121f-a34f-4214-a7fe-0748ac1fc7f2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b66e146-1e5a-43d3-88b9-6259682ef8eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de3b5f1d-e870-48c0-86fc-b3a1838b60a1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "708cdf61-7ce7-411f-bc3f-fe78e118d7d0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "5978777c-e153-458c-b8e3-5ffbc456c89f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7374df5e-03fc-404d-90bc-b0303a512142",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "85fffefc-718b-4c3d-a765-2011391d7ad7"
            }
          }
        ]
      },
      {
        "id": "674d6f20-fded-4608-8369-1d2dde85967f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0a114eb7-fe65-4338-b3a0-4ae281bc476a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c655e5a5-9e74-4b32-8733-4e8deaea1dea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "130eb59e-7291-4847-9931-fcbe1ba895c8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9538055-2d0c-4cc2-9382-d6035574856d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "821b60aa-0d9e-418e-ba64-4dfbd8d21dc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22f364e-f406-4615-a223-d2d6f0b6ba1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f239e1d-7fcc-49fd-a2fa-cfd464f82218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4cc3cc-f7e8-4488-b2d0-1eac012ada46",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77baa835-7710-4577-90cc-94695762a9b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "9837d76a-3835-4742-b187-9bd0f64403ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c4b7df-2697-48d1-a978-b9e4c71fc187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd771c0b-aa21-4fd6-b711-5221cb153cd8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aaa06fd5-ffd3-4b05-b276-ee10640b6cdb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11afce84-bd14-45d7-9f21-ce72d59660e8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a7ec32c-de61-4882-a0ad-125046ba793b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d3d04dc-5eab-430e-ab1d-30390e5c34c7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5334fd6-6885-439a-b590-8d13e9349b72",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6f6a93d7-e7ae-476f-bda6-1741abe675dd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ef5f03a-3e6c-495c-b327-e2ae0bc46624",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de6fd052-18c5-4e7f-9599-2d9ff930c2d8"
            }
          }
        ]
      },
      {
        "id": "564a4194-b28f-4ce2-ab6f-d7bde4381845",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a605c9a6-d4a4-4ab1-85f3-0b5f1a960358",
            "name": "Negative Testing",
            "item": [
              {
                "id": "18cece46-0b34-40d0-a431-e3c590b6adfd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c3424a45-8717-47f6-8e2c-da775fa2a286",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8b81ee-0174-4d42-a5a4-21f9bf0daf8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc4567db-5770-494f-98e4-dc9f3c0079b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2092f731-8a76-4e36-8b52-4b3a684c9519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b43ec717-09e0-4caa-a99c-893d5f142a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e3eff6-e3f9-41c9-932b-8884423775f9",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49fc075d-9265-415c-902c-bcb12eb93269",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "bf27f60d-2105-4d8b-b702-2bf50901fac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de55b5d2-aee2-4df0-af0d-3877b6ff5f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5268f837-c39b-4dea-baba-a8966210d571"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49e47acc-df05-4db4-9d1c-0b0faf8460b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70c2dc97-df1c-419a-8c4a-3c2b382157c5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e268378b-8e64-4809-84e0-fee0d8ac1f76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abcd526e-553e-4a9f-806d-72a751b11481"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90770299-e27d-4cae-8052-58f94ee04193",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "174d9231-d0bf-444a-bdbf-fa54c256dcf4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a52b5df-739d-4e4d-a686-d1d8157d412c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "227611b9-52b7-486b-89e2-90e88c5a2c37"
            }
          }
        ]
      },
      {
        "id": "f0d5480b-c77b-4955-8838-68932907953c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "32f5ed7e-1b1c-4028-9e59-5163444ea27a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d2f65378-ba0a-4f90-80a4-213b17c001d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c18bd39a-3f41-4a83-95eb-f9319490cadb",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d6bb188-7848-4e5d-bbb2-f309a9d27374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47039e7b-766f-4b67-a89c-497fce098bc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f390227e-c84f-4a67-a67c-83d0bf7ca6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fa03d7d-ae34-4134-b3e9-9eaa122fe680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb289a82-65bc-4770-b7cf-a8d3a2db317e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9699f57-4cba-4931-8b96-5435916389b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9e820790-9639-4f86-bc52-bca022d45791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d340345-7bdd-4c90-9fd9-2db619e94447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ee0e4dc-af7f-43d9-ae81-4cba10ede126"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e215fd82-c938-42a0-9956-364fa4b7043c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7601dd62-aa22-42bf-a6b2-4f8c1449939e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "661e6332-1e90-4aa4-8ba4-ccf951c3ce11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fdcac887-e4c1-4cfd-a26e-ad13799d620b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15cdd3e9-98b2-42a8-b303-1022135495ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "067b4990-163c-4168-af9e-3fd4f52df3c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff840b34-765e-44c7-8db8-7fdf397c2fc0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7e28a5b4-1739-49a4-b8cd-4038eb69b678"
            }
          }
        ]
      },
      {
        "id": "6f616f35-90cd-4dd8-b0fe-df78c27ad716",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "cde6dbd4-fbbb-4515-b1f8-0571fd70ae15",
            "name": "Negative Testing",
            "item": [
              {
                "id": "25dca7bb-92cb-40a6-ac8f-983b26f35320",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "12c889fb-5e61-40ce-9466-1aae9e798e7e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19adb2a7-6762-46bf-ad91-7d95c4daee4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3075eae9-eeee-4591-85c9-5e6822a471c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a0b2c0-0273-48ed-9663-9aa0a384dc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49ecfacb-1c4d-4569-83b3-86460e7c8d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c23761bf-b5bb-4baf-8a2e-9db8115a840c",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc264fe0-9abc-4350-b0d2-0549c7d04bef",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "ffa047f4-bb29-4a01-a38d-38a9a086ac9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead60400-a9f3-4d08-a725-4f3f7554d29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e1448d2-e1f8-43cd-84db-401ab61ac935"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee9f16e5-c2d5-46b7-91bc-159586936e0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "face73d1-ae15-434a-9b7c-b4f8ac62c035"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d87e5ca-d769-48b4-89be-afb2bbb4f48e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9bd03f30-f634-4ef3-8c66-994fa8efba7b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fffd6287-a09b-45c3-99bd-f61aea89d7d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "294d898a-39b2-4054-8005-a55e86a16bc6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "90f1fa7c-8a2b-43ff-a9b3-6db248498747",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3555f7ee-2083-4764-bdda-a07505e4b1f4"
            }
          }
        ]
      },
      {
        "id": "847ca1fa-67bb-4535-8d44-cefa84802328",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "14c5629e-a2b2-497b-83d2-e7ce546baf54",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 19
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 85.48598130841121,
      "responseMin": 31,
      "responseMax": 748,
      "responseSd": 122.52341866448755,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662079630687,
      "completed": 1662079643288
    },
    "executions": [
      {
        "id": "7feb6d6b-d09f-4333-9bf0-a95fe5fae8ef",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "34f0f3db-c054-44dd-8210-f51235d9c7dd",
          "httpRequestId": "0cae5674-f783-416c-b4e0-a28272d8b7dc"
        },
        "item": {
          "id": "7feb6d6b-d09f-4333-9bf0-a95fe5fae8ef",
          "name": "did_json"
        },
        "response": {
          "id": "a0795127-49a1-4b93-a9fc-d759189392d9",
          "status": "OK",
          "code": 200,
          "responseTime": 204,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a765348e-272e-44d9-9197-cfdd829d928b",
        "cursor": {
          "ref": "f2bac369-daba-460b-9754-576054fb36de",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d6da0428-47db-44cd-b6df-8bd8663a2373"
        },
        "item": {
          "id": "a765348e-272e-44d9-9197-cfdd829d928b",
          "name": "did:invalid"
        },
        "response": {
          "id": "d34ade20-173e-4484-8af2-e6e53c0b45be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a765348e-272e-44d9-9197-cfdd829d928b",
        "cursor": {
          "ref": "f2bac369-daba-460b-9754-576054fb36de",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d6da0428-47db-44cd-b6df-8bd8663a2373"
        },
        "item": {
          "id": "a765348e-272e-44d9-9197-cfdd829d928b",
          "name": "did:invalid"
        },
        "response": {
          "id": "d34ade20-173e-4484-8af2-e6e53c0b45be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a29a41-fca0-4f6a-ae73-d844a79c6049",
        "cursor": {
          "ref": "a4d5eac4-1cde-4fcd-b216-20e1dd9ffd07",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "49f53dbb-36f8-4331-971d-ded2b3c5c73f"
        },
        "item": {
          "id": "b4a29a41-fca0-4f6a-ae73-d844a79c6049",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "76990c2d-622b-4b6d-abf4-8dc7e24c56b8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 88,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fbd389d-5f79-4f70-9584-840b37049b83",
        "cursor": {
          "ref": "65b3bfa9-4ea0-4b16-9437-f11f6ef09959",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "37389aaf-5928-42ec-9b01-bf5b4db388e9"
        },
        "item": {
          "id": "0fbd389d-5f79-4f70-9584-840b37049b83",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a524fa8a-5f92-4a4b-9bbf-70ea728335b3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 33,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99220afa-2f1b-4ce3-bad4-a3df638c5b28",
        "cursor": {
          "ref": "b1beb963-7d11-4b2f-9215-c3464b764a79",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d0346fdb-6018-4f3e-8958-1847e565fdf6"
        },
        "item": {
          "id": "99220afa-2f1b-4ce3-bad4-a3df638c5b28",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f381d662-7936-473d-8feb-bd7d7e2d288a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4659b96-7bac-4691-a69d-845c4eb7f238",
        "cursor": {
          "ref": "aee8e0b5-a6ce-49fb-8abd-3dc254bca0d3",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "413c4631-6658-4c86-bee2-af0a6f135749"
        },
        "item": {
          "id": "a4659b96-7bac-4691-a69d-845c4eb7f238",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "992d2547-c46d-4743-963d-3dd327fd2041",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4659b96-7bac-4691-a69d-845c4eb7f238",
        "cursor": {
          "ref": "aee8e0b5-a6ce-49fb-8abd-3dc254bca0d3",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "413c4631-6658-4c86-bee2-af0a6f135749"
        },
        "item": {
          "id": "a4659b96-7bac-4691-a69d-845c4eb7f238",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "992d2547-c46d-4743-963d-3dd327fd2041",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df5cd96-b75a-482d-8863-fa026d180def",
        "cursor": {
          "ref": "312f5593-57b1-4972-a7d6-2e8a5d2e9549",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "06692447-8615-49e2-a8a3-659566ed7f2e"
        },
        "item": {
          "id": "4df5cd96-b75a-482d-8863-fa026d180def",
          "name": "identifiers"
        },
        "response": {
          "id": "d4c47541-513d-4a40-afdc-9b49babe428d",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279e9001-e3ea-46a8-9b65-3b0bbd2405b4",
        "cursor": {
          "ref": "4bf9a032-d3b4-4a20-9d14-7282085334d3",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "36b2394f-01d3-4781-8434-9a614cebe15d"
        },
        "item": {
          "id": "279e9001-e3ea-46a8-9b65-3b0bbd2405b4",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7f61b652-ad97-4a55-b803-dec45d199fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279e9001-e3ea-46a8-9b65-3b0bbd2405b4",
        "cursor": {
          "ref": "4bf9a032-d3b4-4a20-9d14-7282085334d3",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "36b2394f-01d3-4781-8434-9a614cebe15d"
        },
        "item": {
          "id": "279e9001-e3ea-46a8-9b65-3b0bbd2405b4",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7f61b652-ad97-4a55-b803-dec45d199fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279e9001-e3ea-46a8-9b65-3b0bbd2405b4",
        "cursor": {
          "ref": "4bf9a032-d3b4-4a20-9d14-7282085334d3",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "36b2394f-01d3-4781-8434-9a614cebe15d"
        },
        "item": {
          "id": "279e9001-e3ea-46a8-9b65-3b0bbd2405b4",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7f61b652-ad97-4a55-b803-dec45d199fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c04a1c3-acbd-4aad-ab06-10ed04aafc48",
        "cursor": {
          "ref": "dd16feef-69de-4f49-8c57-ebb2f6195e33",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "86877f2d-bf12-4e4c-81a0-b562d6e39e50"
        },
        "item": {
          "id": "3c04a1c3-acbd-4aad-ab06-10ed04aafc48",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "37cc0547-04cb-46ff-813b-cd681a3745c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c04a1c3-acbd-4aad-ab06-10ed04aafc48",
        "cursor": {
          "ref": "dd16feef-69de-4f49-8c57-ebb2f6195e33",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "86877f2d-bf12-4e4c-81a0-b562d6e39e50"
        },
        "item": {
          "id": "3c04a1c3-acbd-4aad-ab06-10ed04aafc48",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "37cc0547-04cb-46ff-813b-cd681a3745c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30062af4-9817-4187-939a-3f5a441886c8",
        "cursor": {
          "ref": "dfa12bc4-6f5a-4ed1-a671-b6076c75af75",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c60edada-88df-4e94-950b-09d12499abf9"
        },
        "item": {
          "id": "30062af4-9817-4187-939a-3f5a441886c8",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "fffd7eeb-3065-42d2-8a6c-59ee1d42c9ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30062af4-9817-4187-939a-3f5a441886c8",
        "cursor": {
          "ref": "dfa12bc4-6f5a-4ed1-a671-b6076c75af75",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c60edada-88df-4e94-950b-09d12499abf9"
        },
        "item": {
          "id": "30062af4-9817-4187-939a-3f5a441886c8",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "fffd7eeb-3065-42d2-8a6c-59ee1d42c9ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae0a3a4-3001-47e8-8509-6bf1d7eb959e",
        "cursor": {
          "ref": "5eb7f2cf-60ff-42c8-8fed-a7eed589e543",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e46cc9f1-c74a-46f6-9086-fb7494c450db"
        },
        "item": {
          "id": "7ae0a3a4-3001-47e8-8509-6bf1d7eb959e",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "12c1ba77-bfa6-4eab-803b-c8e8e483bd25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae0a3a4-3001-47e8-8509-6bf1d7eb959e",
        "cursor": {
          "ref": "5eb7f2cf-60ff-42c8-8fed-a7eed589e543",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e46cc9f1-c74a-46f6-9086-fb7494c450db"
        },
        "item": {
          "id": "7ae0a3a4-3001-47e8-8509-6bf1d7eb959e",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "12c1ba77-bfa6-4eab-803b-c8e8e483bd25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10fce804-fa54-4dc4-96fc-1cb12f3c2c42",
        "cursor": {
          "ref": "3490748e-c0da-4c8a-8de0-3f4206455eb9",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0cfb724b-de90-4ab8-8c77-bfa858f8d0df"
        },
        "item": {
          "id": "10fce804-fa54-4dc4-96fc-1cb12f3c2c42",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "cb2b2433-611c-4207-8c94-01890d402c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10fce804-fa54-4dc4-96fc-1cb12f3c2c42",
        "cursor": {
          "ref": "3490748e-c0da-4c8a-8de0-3f4206455eb9",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0cfb724b-de90-4ab8-8c77-bfa858f8d0df"
        },
        "item": {
          "id": "10fce804-fa54-4dc4-96fc-1cb12f3c2c42",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "cb2b2433-611c-4207-8c94-01890d402c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0260e9b4-f1a7-46a4-8fe6-8028e7920eea",
        "cursor": {
          "ref": "6311c84b-737f-4e25-9818-4fa7d1a2ecef",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fe7b3076-651c-4d90-874f-65ed376b567a"
        },
        "item": {
          "id": "0260e9b4-f1a7-46a4-8fe6-8028e7920eea",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "634e8162-e914-4fb8-a94b-3a3de76c4a03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0260e9b4-f1a7-46a4-8fe6-8028e7920eea",
        "cursor": {
          "ref": "6311c84b-737f-4e25-9818-4fa7d1a2ecef",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fe7b3076-651c-4d90-874f-65ed376b567a"
        },
        "item": {
          "id": "0260e9b4-f1a7-46a4-8fe6-8028e7920eea",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "634e8162-e914-4fb8-a94b-3a3de76c4a03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdcaa9f3-f40f-451f-bd67-34d76847f46c",
        "cursor": {
          "ref": "dbf2a3f7-0725-4bd6-8caf-1ad36c84d283",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b414caea-6c24-4f30-99df-043416cd35d5"
        },
        "item": {
          "id": "bdcaa9f3-f40f-451f-bd67-34d76847f46c",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "bdd30afd-2103-4497-8170-54fa964d3d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdcaa9f3-f40f-451f-bd67-34d76847f46c",
        "cursor": {
          "ref": "dbf2a3f7-0725-4bd6-8caf-1ad36c84d283",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b414caea-6c24-4f30-99df-043416cd35d5"
        },
        "item": {
          "id": "bdcaa9f3-f40f-451f-bd67-34d76847f46c",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "bdd30afd-2103-4497-8170-54fa964d3d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8a4660-6c28-4faf-b7e5-306c8d5f0a57",
        "cursor": {
          "ref": "b5800d48-0e63-4332-9b5f-83afacbcdfee",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "de21518d-cf92-47e8-992c-40565b5b5569"
        },
        "item": {
          "id": "7d8a4660-6c28-4faf-b7e5-306c8d5f0a57",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "a5be563b-a4e1-4afe-b138-bb551feea4dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8a4660-6c28-4faf-b7e5-306c8d5f0a57",
        "cursor": {
          "ref": "b5800d48-0e63-4332-9b5f-83afacbcdfee",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "de21518d-cf92-47e8-992c-40565b5b5569"
        },
        "item": {
          "id": "7d8a4660-6c28-4faf-b7e5-306c8d5f0a57",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "a5be563b-a4e1-4afe-b138-bb551feea4dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72576576-ef2f-4355-a508-10d378297a9a",
        "cursor": {
          "ref": "6aa8268b-cf11-4d2a-bb69-54a781258d03",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "383a2eef-ebac-40e1-a379-fa5c2a9fdb16"
        },
        "item": {
          "id": "72576576-ef2f-4355-a508-10d378297a9a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1b286634-b5da-43ac-b70c-ae67b32f0e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72576576-ef2f-4355-a508-10d378297a9a",
        "cursor": {
          "ref": "6aa8268b-cf11-4d2a-bb69-54a781258d03",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "383a2eef-ebac-40e1-a379-fa5c2a9fdb16"
        },
        "item": {
          "id": "72576576-ef2f-4355-a508-10d378297a9a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1b286634-b5da-43ac-b70c-ae67b32f0e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58dc252b-5553-41bf-a486-d804fa4a2d4a",
        "cursor": {
          "ref": "50af253e-652b-4272-8891-6b2a3b74d4d4",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "10cd30c3-e3aa-491a-9c0d-29c1e656dd25"
        },
        "item": {
          "id": "58dc252b-5553-41bf-a486-d804fa4a2d4a",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "fe203a39-861d-4ac7-9258-e41a21d66681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58dc252b-5553-41bf-a486-d804fa4a2d4a",
        "cursor": {
          "ref": "50af253e-652b-4272-8891-6b2a3b74d4d4",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "10cd30c3-e3aa-491a-9c0d-29c1e656dd25"
        },
        "item": {
          "id": "58dc252b-5553-41bf-a486-d804fa4a2d4a",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "fe203a39-861d-4ac7-9258-e41a21d66681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e310717e-a0f1-43d4-9a10-aa5ed32aa27d",
        "cursor": {
          "ref": "09f61f51-b13f-4208-821b-e6bcd8166051",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "57d4b7c9-999a-4ba3-8de0-9b1f3dd4118d"
        },
        "item": {
          "id": "e310717e-a0f1-43d4-9a10-aa5ed32aa27d",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "42a28816-c4c5-47f0-94ed-7264edc05bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e310717e-a0f1-43d4-9a10-aa5ed32aa27d",
        "cursor": {
          "ref": "09f61f51-b13f-4208-821b-e6bcd8166051",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "57d4b7c9-999a-4ba3-8de0-9b1f3dd4118d"
        },
        "item": {
          "id": "e310717e-a0f1-43d4-9a10-aa5ed32aa27d",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "42a28816-c4c5-47f0-94ed-7264edc05bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d41168-a959-4e43-8831-3bcf35e4ea8f",
        "cursor": {
          "ref": "d1d54cab-fea9-4c54-bc9e-9055493ae214",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "84f53535-b750-4c61-b932-e1efa8bede92"
        },
        "item": {
          "id": "72d41168-a959-4e43-8831-3bcf35e4ea8f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "42bdd497-b946-4735-9e8c-087d866bcc1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d41168-a959-4e43-8831-3bcf35e4ea8f",
        "cursor": {
          "ref": "d1d54cab-fea9-4c54-bc9e-9055493ae214",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "84f53535-b750-4c61-b932-e1efa8bede92"
        },
        "item": {
          "id": "72d41168-a959-4e43-8831-3bcf35e4ea8f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "42bdd497-b946-4735-9e8c-087d866bcc1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f51f501-ac34-498e-b724-725a507d6256",
        "cursor": {
          "ref": "0a504b2a-623b-416e-bc2e-9ac33a2f3302",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5b024bee-e26a-4136-a4a9-492fe8f88633"
        },
        "item": {
          "id": "8f51f501-ac34-498e-b724-725a507d6256",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "95a5a890-a7f9-48e2-b029-2e0c9571fb4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f51f501-ac34-498e-b724-725a507d6256",
        "cursor": {
          "ref": "0a504b2a-623b-416e-bc2e-9ac33a2f3302",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5b024bee-e26a-4136-a4a9-492fe8f88633"
        },
        "item": {
          "id": "8f51f501-ac34-498e-b724-725a507d6256",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "95a5a890-a7f9-48e2-b029-2e0c9571fb4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cef3195-ddee-446d-8f7b-819b8a27439b",
        "cursor": {
          "ref": "396b5a4c-ec13-46e6-8bee-f4193c44e7c2",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "292440c3-b607-41ad-84f4-d5adaeb2a841"
        },
        "item": {
          "id": "5cef3195-ddee-446d-8f7b-819b8a27439b",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "dd1cf10f-2e81-4b3c-83c4-6088de3115a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cef3195-ddee-446d-8f7b-819b8a27439b",
        "cursor": {
          "ref": "396b5a4c-ec13-46e6-8bee-f4193c44e7c2",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "292440c3-b607-41ad-84f4-d5adaeb2a841"
        },
        "item": {
          "id": "5cef3195-ddee-446d-8f7b-819b8a27439b",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "dd1cf10f-2e81-4b3c-83c4-6088de3115a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb048ed7-9355-48f5-ad80-9a3bb8f18811",
        "cursor": {
          "ref": "31773f18-98c2-40c9-ae77-8ed475ad763f",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f43a7634-0556-4d6d-b5ca-9b7c77360399"
        },
        "item": {
          "id": "fb048ed7-9355-48f5-ad80-9a3bb8f18811",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "5cf45ad4-7c9b-4e1a-9545-e51a05d53da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb048ed7-9355-48f5-ad80-9a3bb8f18811",
        "cursor": {
          "ref": "31773f18-98c2-40c9-ae77-8ed475ad763f",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f43a7634-0556-4d6d-b5ca-9b7c77360399"
        },
        "item": {
          "id": "fb048ed7-9355-48f5-ad80-9a3bb8f18811",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "5cf45ad4-7c9b-4e1a-9545-e51a05d53da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e23f91de-09bd-4ebe-b62d-191d55928388",
        "cursor": {
          "ref": "2660cfd0-04a8-4532-9e4a-30ab23e1492a",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1c4d7ac9-1249-4cd7-8726-7653938238de"
        },
        "item": {
          "id": "e23f91de-09bd-4ebe-b62d-191d55928388",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4fca18e5-699d-4a5c-ba16-b5c228a29283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e23f91de-09bd-4ebe-b62d-191d55928388",
        "cursor": {
          "ref": "2660cfd0-04a8-4532-9e4a-30ab23e1492a",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1c4d7ac9-1249-4cd7-8726-7653938238de"
        },
        "item": {
          "id": "e23f91de-09bd-4ebe-b62d-191d55928388",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4fca18e5-699d-4a5c-ba16-b5c228a29283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a66e86-4f7e-4600-9ac5-51ab8baf4919",
        "cursor": {
          "ref": "fc64a5ef-0272-4913-9316-98c782510a61",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6ee37110-0c3b-4c38-9014-f482233ef616"
        },
        "item": {
          "id": "e4a66e86-4f7e-4600-9ac5-51ab8baf4919",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a2764bed-9d80-4dea-b418-064c828b643e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a66e86-4f7e-4600-9ac5-51ab8baf4919",
        "cursor": {
          "ref": "fc64a5ef-0272-4913-9316-98c782510a61",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6ee37110-0c3b-4c38-9014-f482233ef616"
        },
        "item": {
          "id": "e4a66e86-4f7e-4600-9ac5-51ab8baf4919",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a2764bed-9d80-4dea-b418-064c828b643e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab90df2-b8a5-48e9-8b1b-de45b17e8e04",
        "cursor": {
          "ref": "d94dacaf-ca3e-4526-901d-957776aa7a57",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ef3ea799-22ba-4f64-af2c-5c6f4f610911"
        },
        "item": {
          "id": "3ab90df2-b8a5-48e9-8b1b-de45b17e8e04",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "24905488-0c7d-44b9-9004-15303567448f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab90df2-b8a5-48e9-8b1b-de45b17e8e04",
        "cursor": {
          "ref": "d94dacaf-ca3e-4526-901d-957776aa7a57",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ef3ea799-22ba-4f64-af2c-5c6f4f610911"
        },
        "item": {
          "id": "3ab90df2-b8a5-48e9-8b1b-de45b17e8e04",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "24905488-0c7d-44b9-9004-15303567448f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1d1794-da59-49b3-b9fa-d55080e1b122",
        "cursor": {
          "ref": "5f8331b5-089f-42eb-bd5e-35d07d76aef7",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "62ba7ee3-c6d9-4a0a-bb43-dcb9c923d34b"
        },
        "item": {
          "id": "fd1d1794-da59-49b3-b9fa-d55080e1b122",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "80601e2c-0f61-4a15-b713-baaaf2bc357e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1d1794-da59-49b3-b9fa-d55080e1b122",
        "cursor": {
          "ref": "5f8331b5-089f-42eb-bd5e-35d07d76aef7",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "62ba7ee3-c6d9-4a0a-bb43-dcb9c923d34b"
        },
        "item": {
          "id": "fd1d1794-da59-49b3-b9fa-d55080e1b122",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "80601e2c-0f61-4a15-b713-baaaf2bc357e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a909d50-0543-497c-b54e-7c9cf98830a3",
        "cursor": {
          "ref": "e031552d-9e67-4d06-bb67-c4db5aa7d181",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2b52c9be-b686-4479-962d-013bfa40eb02"
        },
        "item": {
          "id": "7a909d50-0543-497c-b54e-7c9cf98830a3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "84835fe3-0b88-47c8-8ebe-8303a4288c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a909d50-0543-497c-b54e-7c9cf98830a3",
        "cursor": {
          "ref": "e031552d-9e67-4d06-bb67-c4db5aa7d181",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2b52c9be-b686-4479-962d-013bfa40eb02"
        },
        "item": {
          "id": "7a909d50-0543-497c-b54e-7c9cf98830a3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "84835fe3-0b88-47c8-8ebe-8303a4288c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f62ffa8-5df0-4f59-8633-c69c3dce7146",
        "cursor": {
          "ref": "08261b61-4130-48d0-9eb4-620ead6dfef5",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9e095172-5fd7-424c-9f26-32a6493d00dd"
        },
        "item": {
          "id": "4f62ffa8-5df0-4f59-8633-c69c3dce7146",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "72224ce7-f64a-4d67-acef-5b3f10075dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f62ffa8-5df0-4f59-8633-c69c3dce7146",
        "cursor": {
          "ref": "08261b61-4130-48d0-9eb4-620ead6dfef5",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9e095172-5fd7-424c-9f26-32a6493d00dd"
        },
        "item": {
          "id": "4f62ffa8-5df0-4f59-8633-c69c3dce7146",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "72224ce7-f64a-4d67-acef-5b3f10075dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74dfa082-eebf-480f-a2a1-8aac0950c7eb",
        "cursor": {
          "ref": "40753994-8124-41a0-8da9-7a258c969e63",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b1b322e2-f5d4-468c-8635-e28137f651c9"
        },
        "item": {
          "id": "74dfa082-eebf-480f-a2a1-8aac0950c7eb",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "85ed335a-d63a-4b2f-aaae-da8b0c65b47b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74dfa082-eebf-480f-a2a1-8aac0950c7eb",
        "cursor": {
          "ref": "40753994-8124-41a0-8da9-7a258c969e63",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b1b322e2-f5d4-468c-8635-e28137f651c9"
        },
        "item": {
          "id": "74dfa082-eebf-480f-a2a1-8aac0950c7eb",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "85ed335a-d63a-4b2f-aaae-da8b0c65b47b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abfa901a-091e-49e5-8b91-5a9ac934b26b",
        "cursor": {
          "ref": "d59b85c5-814e-439b-b4ec-b08a64dfcf93",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3f76d011-4e98-4c29-b919-dab5f9a21e48"
        },
        "item": {
          "id": "abfa901a-091e-49e5-8b91-5a9ac934b26b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "02a5341d-2721-43a8-bd15-369c37e5b3c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abfa901a-091e-49e5-8b91-5a9ac934b26b",
        "cursor": {
          "ref": "d59b85c5-814e-439b-b4ec-b08a64dfcf93",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3f76d011-4e98-4c29-b919-dab5f9a21e48"
        },
        "item": {
          "id": "abfa901a-091e-49e5-8b91-5a9ac934b26b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "02a5341d-2721-43a8-bd15-369c37e5b3c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c3103f0-f554-4137-9dd8-9ad63f331025",
        "cursor": {
          "ref": "6efa8d20-e59d-4b4a-983d-6d044c1b1eea",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "69e3fd90-d46d-401c-8116-3c00a071d7cd"
        },
        "item": {
          "id": "6c3103f0-f554-4137-9dd8-9ad63f331025",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "3e33204f-33f4-4e70-a3a0-52398062638c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c3103f0-f554-4137-9dd8-9ad63f331025",
        "cursor": {
          "ref": "6efa8d20-e59d-4b4a-983d-6d044c1b1eea",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "69e3fd90-d46d-401c-8116-3c00a071d7cd"
        },
        "item": {
          "id": "6c3103f0-f554-4137-9dd8-9ad63f331025",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "3e33204f-33f4-4e70-a3a0-52398062638c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e363f937-e5ff-4ff9-a759-d416745c2843",
        "cursor": {
          "ref": "974819f6-4f2b-4f78-ba87-74e2089d0426",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "084ab747-bb37-4de7-9f4c-7c1951430dc9"
        },
        "item": {
          "id": "e363f937-e5ff-4ff9-a759-d416745c2843",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0bfc0e7c-8022-49ea-b6bb-96366d368f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e363f937-e5ff-4ff9-a759-d416745c2843",
        "cursor": {
          "ref": "974819f6-4f2b-4f78-ba87-74e2089d0426",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "084ab747-bb37-4de7-9f4c-7c1951430dc9"
        },
        "item": {
          "id": "e363f937-e5ff-4ff9-a759-d416745c2843",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0bfc0e7c-8022-49ea-b6bb-96366d368f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeca5143-198a-4820-87f8-e0147387adaf",
        "cursor": {
          "ref": "a1254306-0414-4dd1-8070-197ef506745f",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2b11d71f-ff2c-4478-86e5-51c8416a3859"
        },
        "item": {
          "id": "eeca5143-198a-4820-87f8-e0147387adaf",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "6dd19034-b0af-486c-884f-945ee9fd809f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeca5143-198a-4820-87f8-e0147387adaf",
        "cursor": {
          "ref": "a1254306-0414-4dd1-8070-197ef506745f",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2b11d71f-ff2c-4478-86e5-51c8416a3859"
        },
        "item": {
          "id": "eeca5143-198a-4820-87f8-e0147387adaf",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "6dd19034-b0af-486c-884f-945ee9fd809f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5e6374-623c-44c3-a3cc-c3c9793ed2b0",
        "cursor": {
          "ref": "64908223-0c71-425f-bc28-796030ee279a",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1fd184d7-adb7-476d-a6c6-eb15c900f5fd"
        },
        "item": {
          "id": "6c5e6374-623c-44c3-a3cc-c3c9793ed2b0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "448181d6-660b-4985-97dc-059d0d778336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 748,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5e6374-623c-44c3-a3cc-c3c9793ed2b0",
        "cursor": {
          "ref": "64908223-0c71-425f-bc28-796030ee279a",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1fd184d7-adb7-476d-a6c6-eb15c900f5fd"
        },
        "item": {
          "id": "6c5e6374-623c-44c3-a3cc-c3c9793ed2b0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "448181d6-660b-4985-97dc-059d0d778336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 748,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe74998-9789-4922-94b2-6af8c462d835",
        "cursor": {
          "ref": "176c8c05-2eb5-4fbb-a538-1ddf15a3d241",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a12c7be0-0031-4240-8002-15d74cb64fe2"
        },
        "item": {
          "id": "bbe74998-9789-4922-94b2-6af8c462d835",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "8c16c4b9-92a5-4279-b5e8-1b871070a6b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe74998-9789-4922-94b2-6af8c462d835",
        "cursor": {
          "ref": "176c8c05-2eb5-4fbb-a538-1ddf15a3d241",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a12c7be0-0031-4240-8002-15d74cb64fe2"
        },
        "item": {
          "id": "bbe74998-9789-4922-94b2-6af8c462d835",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "8c16c4b9-92a5-4279-b5e8-1b871070a6b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e9a1949-0f37-4d85-af98-7483c0fbf9cb",
        "cursor": {
          "ref": "45c92d87-2d1d-4b2b-8a1b-cd08ebced54f",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1edd0363-843d-4e71-8640-a1a89cf4a58a"
        },
        "item": {
          "id": "0e9a1949-0f37-4d85-af98-7483c0fbf9cb",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "5fa1c733-7421-433f-b329-e2de84842670",
          "status": "Created",
          "code": 201,
          "responseTime": 551,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "0e9a1949-0f37-4d85-af98-7483c0fbf9cb",
        "cursor": {
          "ref": "45c92d87-2d1d-4b2b-8a1b-cd08ebced54f",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1edd0363-843d-4e71-8640-a1a89cf4a58a"
        },
        "item": {
          "id": "0e9a1949-0f37-4d85-af98-7483c0fbf9cb",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "5fa1c733-7421-433f-b329-e2de84842670",
          "status": "Created",
          "code": 201,
          "responseTime": 551,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "e69791aa-04d3-4931-bd83-9b9a6c7edd04",
        "cursor": {
          "ref": "36760dc1-966f-426c-a84c-22e0197d8e73",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "da1ee809-664d-4aa9-9d5f-e2fe6863af76"
        },
        "item": {
          "id": "e69791aa-04d3-4931-bd83-9b9a6c7edd04",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "45685100-5152-4056-9e9d-f9baf4ebf30e",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "e69791aa-04d3-4931-bd83-9b9a6c7edd04",
        "cursor": {
          "ref": "36760dc1-966f-426c-a84c-22e0197d8e73",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "da1ee809-664d-4aa9-9d5f-e2fe6863af76"
        },
        "item": {
          "id": "e69791aa-04d3-4931-bd83-9b9a6c7edd04",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "45685100-5152-4056-9e9d-f9baf4ebf30e",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "45f097bf-0c05-4dde-a751-ca750943f5f4",
        "cursor": {
          "ref": "7984db1f-9ba0-452f-9c20-7fa006ea6c7c",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "17bca5e2-f7ba-44d9-8637-34fa1f8870b2"
        },
        "item": {
          "id": "45f097bf-0c05-4dde-a751-ca750943f5f4",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "ef0240a9-54a2-4e33-9860-79ba1678771d",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "45f097bf-0c05-4dde-a751-ca750943f5f4",
        "cursor": {
          "ref": "7984db1f-9ba0-452f-9c20-7fa006ea6c7c",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "17bca5e2-f7ba-44d9-8637-34fa1f8870b2"
        },
        "item": {
          "id": "45f097bf-0c05-4dde-a751-ca750943f5f4",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "ef0240a9-54a2-4e33-9860-79ba1678771d",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "60b27396-b58a-4c44-aa84-9cb77ecccd53",
        "cursor": {
          "ref": "0fa73fd2-a8c6-4f29-9e6a-f9eb36c96e92",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a3d16c38-9155-4371-8fc4-fce8cd823319"
        },
        "item": {
          "id": "60b27396-b58a-4c44-aa84-9cb77ecccd53",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d7e10609-0020-482c-a356-e1dfb6fd0dc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b27396-b58a-4c44-aa84-9cb77ecccd53",
        "cursor": {
          "ref": "0fa73fd2-a8c6-4f29-9e6a-f9eb36c96e92",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a3d16c38-9155-4371-8fc4-fce8cd823319"
        },
        "item": {
          "id": "60b27396-b58a-4c44-aa84-9cb77ecccd53",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d7e10609-0020-482c-a356-e1dfb6fd0dc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ba6698-b360-40a2-8afa-cc3f861fba63",
        "cursor": {
          "ref": "9aaaa659-f0f8-428e-96fa-694c27bbf4eb",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0f99e413-71c3-4fe3-8176-cafa85a2c07b"
        },
        "item": {
          "id": "e3ba6698-b360-40a2-8afa-cc3f861fba63",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "42088b82-b4f7-436d-9785-83a24da30d6e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ba6698-b360-40a2-8afa-cc3f861fba63",
        "cursor": {
          "ref": "9aaaa659-f0f8-428e-96fa-694c27bbf4eb",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0f99e413-71c3-4fe3-8176-cafa85a2c07b"
        },
        "item": {
          "id": "e3ba6698-b360-40a2-8afa-cc3f861fba63",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "42088b82-b4f7-436d-9785-83a24da30d6e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51578f3d-1888-400b-b4e7-604432774f90",
        "cursor": {
          "ref": "24ae317a-2258-4efd-bd6d-efbc4f3bc4df",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "da46b047-4f0f-466c-9d5f-1a996e689463"
        },
        "item": {
          "id": "51578f3d-1888-400b-b4e7-604432774f90",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a956115f-f14f-44b8-ac5f-9feeaf2ebd37",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "51578f3d-1888-400b-b4e7-604432774f90",
        "cursor": {
          "ref": "24ae317a-2258-4efd-bd6d-efbc4f3bc4df",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "da46b047-4f0f-466c-9d5f-1a996e689463"
        },
        "item": {
          "id": "51578f3d-1888-400b-b4e7-604432774f90",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a956115f-f14f-44b8-ac5f-9feeaf2ebd37",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ffa506-e273-4b6a-8493-151c5886d7bc",
        "cursor": {
          "ref": "2f13d328-1f29-4de9-8832-a3b16d96d487",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6394adc5-002c-485e-bd80-ac2dc7f84894"
        },
        "item": {
          "id": "e4ffa506-e273-4b6a-8493-151c5886d7bc",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "2a6f3a80-b576-4bea-9332-c6abb47e6834",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "e4ffa506-e273-4b6a-8493-151c5886d7bc",
        "cursor": {
          "ref": "2f13d328-1f29-4de9-8832-a3b16d96d487",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6394adc5-002c-485e-bd80-ac2dc7f84894"
        },
        "item": {
          "id": "e4ffa506-e273-4b6a-8493-151c5886d7bc",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "2a6f3a80-b576-4bea-9332-c6abb47e6834",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "974e5f46-8678-4925-8bda-2e8c3b5fb1cd",
        "cursor": {
          "ref": "a73a1a29-08a8-4394-98d2-0f5a890d43ed",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9e8b9daa-e1b3-4c93-a843-da50a9619610"
        },
        "item": {
          "id": "974e5f46-8678-4925-8bda-2e8c3b5fb1cd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "05a2035c-7e6f-4762-99aa-423126cae1c8",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "974e5f46-8678-4925-8bda-2e8c3b5fb1cd",
        "cursor": {
          "ref": "a73a1a29-08a8-4394-98d2-0f5a890d43ed",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9e8b9daa-e1b3-4c93-a843-da50a9619610"
        },
        "item": {
          "id": "974e5f46-8678-4925-8bda-2e8c3b5fb1cd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "05a2035c-7e6f-4762-99aa-423126cae1c8",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "94dbedb4-1dcf-4a0e-a74f-ee9ce71847cb",
        "cursor": {
          "ref": "dfbe1891-fac4-41b3-9cca-23be257b9022",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0ab79aa1-009e-472a-a2cf-3be469ede2e5"
        },
        "item": {
          "id": "94dbedb4-1dcf-4a0e-a74f-ee9ce71847cb",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "66bff353-6c74-417a-bbed-3d4343129667",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "94dbedb4-1dcf-4a0e-a74f-ee9ce71847cb",
        "cursor": {
          "ref": "dfbe1891-fac4-41b3-9cca-23be257b9022",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0ab79aa1-009e-472a-a2cf-3be469ede2e5"
        },
        "item": {
          "id": "94dbedb4-1dcf-4a0e-a74f-ee9ce71847cb",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "66bff353-6c74-417a-bbed-3d4343129667",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "471845c4-454a-4841-bc95-1dce9941b026",
        "cursor": {
          "ref": "cee9124d-1d1f-4abd-b5df-ac38771cda4b",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f5a47c6a-eff2-4dc6-ae2f-8e18103175b5"
        },
        "item": {
          "id": "471845c4-454a-4841-bc95-1dce9941b026",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8915bb4f-607d-4eed-b18a-97fc604561f5",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "471845c4-454a-4841-bc95-1dce9941b026",
        "cursor": {
          "ref": "cee9124d-1d1f-4abd-b5df-ac38771cda4b",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f5a47c6a-eff2-4dc6-ae2f-8e18103175b5"
        },
        "item": {
          "id": "471845c4-454a-4841-bc95-1dce9941b026",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8915bb4f-607d-4eed-b18a-97fc604561f5",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "872c1833-d363-44f1-ad05-c143088b08b4",
        "cursor": {
          "ref": "b6623e46-fa10-40a5-907f-136c05a4f64a",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2101499c-6477-4437-a106-3b6fa1e7c519"
        },
        "item": {
          "id": "872c1833-d363-44f1-ad05-c143088b08b4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ed248340-0634-4d54-b1b7-0edc48252fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "872c1833-d363-44f1-ad05-c143088b08b4",
        "cursor": {
          "ref": "b6623e46-fa10-40a5-907f-136c05a4f64a",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2101499c-6477-4437-a106-3b6fa1e7c519"
        },
        "item": {
          "id": "872c1833-d363-44f1-ad05-c143088b08b4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ed248340-0634-4d54-b1b7-0edc48252fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b14675ff-ac8f-4699-b367-1bbec66403d7",
        "cursor": {
          "ref": "57c63434-1609-4a8e-8604-b1ee970b5525",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "be563de6-1696-467f-9fef-6ba8dd9ddcd6"
        },
        "item": {
          "id": "b14675ff-ac8f-4699-b367-1bbec66403d7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5ea6421b-6344-4438-b64f-e928c4a834db",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b14675ff-ac8f-4699-b367-1bbec66403d7",
        "cursor": {
          "ref": "57c63434-1609-4a8e-8604-b1ee970b5525",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "be563de6-1696-467f-9fef-6ba8dd9ddcd6"
        },
        "item": {
          "id": "b14675ff-ac8f-4699-b367-1bbec66403d7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5ea6421b-6344-4438-b64f-e928c4a834db",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f4dbb175-8815-4257-861d-6a5af341d632",
        "cursor": {
          "ref": "996ed0e9-8ddd-4f85-97f3-170761be9577",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5ae211b1-251c-4b0d-bd6d-840221a4b8ef"
        },
        "item": {
          "id": "f4dbb175-8815-4257-861d-6a5af341d632",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "f102380e-d609-48be-86a3-94cdb730d887",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f4dbb175-8815-4257-861d-6a5af341d632",
        "cursor": {
          "ref": "996ed0e9-8ddd-4f85-97f3-170761be9577",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5ae211b1-251c-4b0d-bd6d-840221a4b8ef"
        },
        "item": {
          "id": "f4dbb175-8815-4257-861d-6a5af341d632",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "f102380e-d609-48be-86a3-94cdb730d887",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b6cf9f2c-6950-4cd3-9c22-31320da93e21",
        "cursor": {
          "ref": "78a0131a-b003-4aa8-b744-e421799cbb03",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ccf6a4c5-b3f4-419d-87c1-756af3168d16"
        },
        "item": {
          "id": "b6cf9f2c-6950-4cd3-9c22-31320da93e21",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "045cf03a-9a2e-4c8c-88c7-4f462779e266",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6cf9f2c-6950-4cd3-9c22-31320da93e21",
        "cursor": {
          "ref": "78a0131a-b003-4aa8-b744-e421799cbb03",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ccf6a4c5-b3f4-419d-87c1-756af3168d16"
        },
        "item": {
          "id": "b6cf9f2c-6950-4cd3-9c22-31320da93e21",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "045cf03a-9a2e-4c8c-88c7-4f462779e266",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65eeb7e8-a997-4ab0-90c1-03b41a04d728",
        "cursor": {
          "ref": "bdd52687-8816-431e-85c6-aa76bdc63307",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4d9afde7-1b6a-47af-875c-ea5ef59b3ffb"
        },
        "item": {
          "id": "65eeb7e8-a997-4ab0-90c1-03b41a04d728",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "394ef976-e5fe-42a4-ac60-18fea1c52c90",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130eb59e-7291-4847-9931-fcbe1ba895c8",
        "cursor": {
          "ref": "4786d732-6faa-462d-be59-b8aaa7883d60",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c9cdbe9d-1089-49cf-a235-a3044a383a32"
        },
        "item": {
          "id": "130eb59e-7291-4847-9931-fcbe1ba895c8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "04c764e6-2398-4593-a1ba-93cd8734080b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130eb59e-7291-4847-9931-fcbe1ba895c8",
        "cursor": {
          "ref": "4786d732-6faa-462d-be59-b8aaa7883d60",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c9cdbe9d-1089-49cf-a235-a3044a383a32"
        },
        "item": {
          "id": "130eb59e-7291-4847-9931-fcbe1ba895c8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "04c764e6-2398-4593-a1ba-93cd8734080b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e4cc3cc-f7e8-4488-b2d0-1eac012ada46",
        "cursor": {
          "ref": "2df731a1-6ff7-4cc5-b4b8-c187c6f4ad03",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "22188040-eb72-489f-ae8c-07c080be0ef7"
        },
        "item": {
          "id": "4e4cc3cc-f7e8-4488-b2d0-1eac012ada46",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "66f4f568-c7d4-4729-b295-9d293c3c135b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3424a45-8717-47f6-8e2c-da775fa2a286",
        "cursor": {
          "ref": "bcec40ca-f001-4b0d-86bb-fc78d6e2adc8",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c91a690a-3741-4c14-b0a1-e24f169ff462"
        },
        "item": {
          "id": "c3424a45-8717-47f6-8e2c-da775fa2a286",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5da539a6-85db-414c-b83b-f6d44256e1a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3424a45-8717-47f6-8e2c-da775fa2a286",
        "cursor": {
          "ref": "bcec40ca-f001-4b0d-86bb-fc78d6e2adc8",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c91a690a-3741-4c14-b0a1-e24f169ff462"
        },
        "item": {
          "id": "c3424a45-8717-47f6-8e2c-da775fa2a286",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5da539a6-85db-414c-b83b-f6d44256e1a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e3eff6-e3f9-41c9-932b-8884423775f9",
        "cursor": {
          "ref": "2ba28a08-4b00-4a8d-b853-6fdc7330bddc",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1073ede6-eacf-4512-b10e-8dd9aaedeaf5"
        },
        "item": {
          "id": "06e3eff6-e3f9-41c9-932b-8884423775f9",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "3897ea25-d018-4c9f-8748-344cc80e00d1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c18bd39a-3f41-4a83-95eb-f9319490cadb",
        "cursor": {
          "ref": "76a1c312-f0d5-4d57-8231-d56690b9dc05",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "264147c9-75e7-46bf-8a9a-655670ae76be"
        },
        "item": {
          "id": "c18bd39a-3f41-4a83-95eb-f9319490cadb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0db944cb-d049-4cfe-aca4-c2cf3c000358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "c18bd39a-3f41-4a83-95eb-f9319490cadb",
        "cursor": {
          "ref": "76a1c312-f0d5-4d57-8231-d56690b9dc05",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "264147c9-75e7-46bf-8a9a-655670ae76be"
        },
        "item": {
          "id": "c18bd39a-3f41-4a83-95eb-f9319490cadb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0db944cb-d049-4cfe-aca4-c2cf3c000358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "bb289a82-65bc-4770-b7cf-a8d3a2db317e",
        "cursor": {
          "ref": "cfc0c6a6-ceee-4b69-b06c-d12eac10c9a9",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "48d8570f-b0d0-485c-9c76-6aae84978afb"
        },
        "item": {
          "id": "bb289a82-65bc-4770-b7cf-a8d3a2db317e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "73ec2c2a-4ebd-4dbd-8513-6aad14462f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "12c889fb-5e61-40ce-9466-1aae9e798e7e",
        "cursor": {
          "ref": "47157047-6a82-4fc6-b7bf-7221f8060505",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "81865548-eeba-409f-8155-2e0357be09c5"
        },
        "item": {
          "id": "12c889fb-5e61-40ce-9466-1aae9e798e7e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "69d99f2c-c0a7-4d3a-ad7b-684ec53a1416",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c889fb-5e61-40ce-9466-1aae9e798e7e",
        "cursor": {
          "ref": "47157047-6a82-4fc6-b7bf-7221f8060505",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "81865548-eeba-409f-8155-2e0357be09c5"
        },
        "item": {
          "id": "12c889fb-5e61-40ce-9466-1aae9e798e7e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "69d99f2c-c0a7-4d3a-ad7b-684ec53a1416",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c23761bf-b5bb-4baf-8a2e-9db8115a840c",
        "cursor": {
          "ref": "cf6702ad-5d54-49c7-ac68-a4e78510c7ab",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fffdbd58-9b5f-4862-910f-6b941e5e45d2"
        },
        "item": {
          "id": "c23761bf-b5bb-4baf-8a2e-9db8115a840c",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "dd247d86-1978-473d-902d-d624dfbac07d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}