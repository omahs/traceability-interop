{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "bfaa7ea9-852b-4971-9273-62f2d5b1a2bd",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7d100453-5d72-4962-b8c9-baa9c79d25b0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "79efcd12-a8bd-408b-bad8-35b7943f1590",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8064af4d-c982-4fa1-8357-77e9df7e44d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "72fbc2fa-0d46-4c91-8c4b-ea280e0762ee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "10e55b15-3959-4a2a-9deb-f73c6dc17376",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "23671ccc-1e7c-4081-b0c9-17aac7b2eeb3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0d9e6d1-4f56-4908-b0b9-487a5baa12da",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9d317ab5-b273-476a-b925-2ca996df6753",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c88e543-adcf-4d7a-8851-43b2985d90a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69e5ea90-bcb8-47d3-aea0-4aaae4d297d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7791a3d4-9b20-49b9-b466-45b6b890f55d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64025e66-19a5-4a16-9afa-7ca8500ba6ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31df001f-f05a-44fb-8ac2-f253cdaea6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c476ab4-7d8a-433a-a3cc-8365f9517bed",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5fd079-494e-4ab2-834c-bcff293f7235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5cf9d650-0d44-47ea-8e6c-3b1bbd5535e2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "499ce775-78de-4dcc-8242-22e47423ae76",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e87c2877-4b45-4a2d-a144-68824bfc6a67",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2cb85f5-e92b-4e44-8a3e-d5505e2f401a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "def637d0-2f99-49b1-a4c4-94e8790cd0fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a801582-a947-4e35-857d-a56952b4485b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d02a99f8-b479-4673-b055-8ce3e89690cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78143ed1-0504-47d3-9e50-0a9d58b8166d",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81ee481-1cb4-44cb-b662-38353a3b98ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eef18290-4eb1-46f0-8c20-b426e7c095fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf956fb-a362-4297-a604-699d2cc2c80c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "cc9658d9-a6e7-4895-8a07-365f8dc739c9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a5ecccff-f5ec-488d-a503-2fb811deb01c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9660d0be-3d6c-4a74-90e1-c27d2295941d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a9e0488-4cac-42f6-931f-639e5749c209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "fb6b9bd1-cf08-498a-a3d9-0a6eda4e4f97"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c9b2023-c91d-426d-bb55-957fbb14fd78",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "81e5948e-5114-43a4-90b3-14a31ac723ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc532002-638e-481b-84fe-9df428dfbaaf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9dc091df-3e30-421f-baf7-12891bb49050"
            }
          }
        ]
      },
      {
        "id": "9f71ecfd-5c28-48f9-a855-da0993c429c0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "91bf5c51-a17f-43ad-9eb0-aeefce2cd30a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f9764a7-5de7-41c2-b831-68e0bbe4bac7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "541c6f82-735a-4b5f-81ef-0bc656420fde",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156def04-ba5b-4fd0-9dec-fffa9753894d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4025fa04-1daa-4143-bf9c-91458b4fd816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20eb4935-5210-4e02-9db6-8a7988acec43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d4d6dba-345c-415b-9bca-59c72d10d019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254e14cd-f46d-464d-874f-f9e9fb200ecd",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0664248-3e72-4291-8153-29ba86bb42df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca672304-fa92-4af9-a33b-de7560f4c333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e828bddf-6318-4fcc-8e4c-a33f931a0be5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ac5f183-9d46-4867-a1c7-e34dfbbc0c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91209a1a-cecb-4ba5-b736-c93ece4ab63b",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8376aa6-398a-48e5-8a80-becfda301885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d968d73-bb63-4391-ae11-349da2cb5a3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450b506e-07a2-4376-b4ae-e35a6275492e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7733330a-5108-4f77-9fcc-c7a837984d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b62cbae-e1b6-463b-a7a8-93ccf751de66",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a37b9a-7a80-4fa4-a1de-4de053c04a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae462a11-44dc-4775-9b88-fba776dc05ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f797c52-9ce0-4d6e-971a-954035b2270e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d310391-f01a-44a4-99a5-e5a9e8e191c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b07e6e-c1f3-40f3-abe7-1d0295787c12",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee4297f8-35ee-4fd1-99fc-d524e55c522d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caf7a0c1-4162-4ecd-8b7d-b23e94daa4d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ece81b-a534-4495-94bb-b1e98c80ac2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b0b40a4-2d49-4822-a5ab-68b5c34fca01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98bc5af6-7b3d-4a00-a73b-8ef6705fb0b2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9942b74-7e60-4b3e-a4c1-3703da7bff00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cad9c316-d4f6-4db9-a726-a2f7bcdfbda0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba2ca3e-718e-45bd-840c-54af90cf41f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6c0227d-cc1c-4fbb-83d6-a07a7db43e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ef890b-3690-4147-87ef-269f9d10f764",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7c0ae1-5ee5-484a-96b9-684d8bb1ce94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f83874-3134-4a98-a725-0ad4d16e585d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185a8057-9fcd-4cff-aeb3-5805791e930b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7af0602c-b58d-4b11-9d63-e872f4e8a162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09253a1f-fac1-48a0-a403-dc5b00374729",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "845d8187-5a09-4066-8793-1781b37c4e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7b37110-64ff-43cc-ae5b-a59d0b3f8ac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8541345-cf85-4298-9260-bf12a9ecdfa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cf7c58c-e086-4bb4-ac0b-411492dc0412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8cf581-ad4a-4a39-bda1-bc035cc202b5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4051c7-d28f-4c4c-a896-034fc92e2e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b0c5125-959a-4877-98ae-7d9489547cb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90418a9-bfdb-44b0-b033-b38ed06c88ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d21cd4a-71f6-4f50-885e-29e194a73bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1738f732-9fb2-479b-a8ce-081ccdba29b0",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71a3d06-1807-4ab6-a8a7-9a3c21f8cf5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25fc12f9-758c-4d32-984f-4f8986710fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e780b9d-7bb1-456e-9eb9-c10ceefc80b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78366c5c-483d-4ce0-b429-ecb2914f1962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d98831-cd63-4a02-af51-4e53653f8872",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2c26c0-653a-4f59-967e-7a9927f210e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6dba47a-f28a-4b56-9dc2-5eb100549bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb997551-30de-404a-a3f5-55b56fb37f78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "8ed66580-4f62-4974-8011-62054250cfb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a92dec-8dab-4163-b9d5-3d964c15b430",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45258c37-5477-4c59-a4cd-589f87650651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f7c3e7-d45d-4a87-9aee-4516f69fa6ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c962cdad-21e7-45ef-bddf-0bd3efb19bc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "23f2f7a1-3942-4bc1-8598-1aa68820c7e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d964582c-2581-4485-b39c-77fe1f5ce21f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd03afd-bf18-46c4-8f6f-d59b8e808b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5e0254e-6a22-4949-aa09-0374376b0cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a0367c-ec8a-4e70-9d9f-791abec0073e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f63e506e-872f-470b-8c25-55177f6323a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e85c3ad-11e9-4be7-b64b-90c03e1a39e6",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af50127-7a03-40f9-b0f1-a272e89ef03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eded851a-8520-4b2f-859e-0efff89b5930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce490a4-a1a3-46c7-ba9f-2369bd18825e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acad24ee-ef01-4ceb-80c8-30aa9a3b673e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5ec577-66f6-470f-9d98-de7cb483d806",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960432ba-522b-49a4-8177-afbbcc943a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4211c967-024a-47d3-8761-d68caeeabea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef098b43-4a6c-4b42-82da-f0f0a4e6b607",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "5cc6d86d-805a-4038-956d-0859d7dc6f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d01509b-d04b-4111-bfbe-4ede46e82caa",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edeaa6c7-d6bb-49e8-92ef-f91d744be3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "207cd84f-bd54-4eb9-ac5f-d38df9042651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c343531-4ad4-4ec8-b47e-0565667b334b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "39dd032b-838d-4fa0-a3b3-a33666ef2101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4a3173-7738-4e30-92a2-23dd686e9163",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d654d33b-89c5-458f-8b72-65ca13cfc012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d132dbca-1e2d-4a0c-b541-8ef6c44c84cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a409c1f-9c75-43a7-951a-367ef1ca8caa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c47bc6b4-30f0-480e-aff0-8326a3e983de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec876c4d-dff5-428b-a3ab-61c6a8d4feef",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25fc284-2b0d-4c3d-8c49-7da629235edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa43112-4e2f-4172-a1f5-f07f69491ef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a214223f-39e6-4eae-9b74-74164b218968",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20e080f0-b653-4fa2-9326-05aa898a9315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b3b3d2-c0a2-44fb-83d0-f4a348617766",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73353ce-f2ed-4501-a39c-d9b139432dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73fe8e14-1008-47da-80f0-953d56e6409c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4314c8-f123-4436-b234-95677bf8a7da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3cf0313-73ce-46af-af3c-0b76a281d69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73faf23b-738d-4125-93f1-85522e1ba4d6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8384eac7-c7e0-47f8-b470-a842de4d5f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f6733eb-d3c0-456f-aa03-ae05475e389d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4951b3f-3827-4269-83a3-513a5378b8ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6ae7bfd-e519-43dd-9d3b-94803943cf45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fdd00c-adbb-4404-bf4a-fde3b7cadfc4",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b04022-fccc-400a-9c21-53be41d4e765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0bbb36b-57df-45c0-aff8-7f45f51848da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce99774-e77a-4af4-9f7b-4d579840ecc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e72f5ee2-e2dd-4624-aa71-79eb10404530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea46b37-228b-438d-8440-7f52e257f3fa",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afed8037-db36-4b1b-b715-3edd9dc811b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3141ce5b-ffd3-4f2f-8482-2639c3bcdb09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d31e6d-c4f2-4c27-b960-7889a41a1fb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e1d9ae9-53b0-4866-87ee-829f19b90af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429ebb04-30bc-4ce5-9487-3b8724213bc2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e21ea0-a75f-4b3b-954a-fd4edcb62d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912df54c-ce36-4449-b580-51862d65b2e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc56808-b37b-48b9-a8b7-0f2293cbbcfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "439012a7-376e-4347-9daf-f9f9cf305f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe3d21b-8b45-4e5e-9c8f-a0837bd90e85",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82929ff4-829f-439b-afb7-2b8d01fc4673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3f945f8-7d67-4b19-ba3b-2deffe61d967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bc6e99-b7e2-440c-a019-8687f6097876",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a4ecfe9-b055-4de8-9cf4-b5fd8920082a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de35bac3-ea30-43a6-95aa-74b2bb2dacdd",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35fa4fee-aff6-4ffc-a85a-1b7192ae9283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a4afa18-b779-494d-9790-16b51ca48084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3d46e1-dc10-4fa7-bd64-d68a78cb4aec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74e50fed-06b4-4a11-86c3-41cb8c9c4803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c14fce-6057-4f68-9e9e-59f819687401",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea80349-abc8-4cf7-b1ab-91835b0a325e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ef47a3-37b2-4636-81b8-d763599e5ba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1d2e5a-c6a9-4474-a639-4f1052d4c88a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19d60e33-8e47-4854-b817-59643e9db6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0d2176-f2f9-4027-b977-e51e7498aeb6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79998f54-36bf-4c54-a09b-66cca9364633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36f1f77f-92b8-4fc4-9bfd-35946ae626b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeccf860-5fc9-4898-bf9d-bc3d06e76510",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a403cd9d-4eb6-4a78-866a-b3fa6b625053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1ae37d-b4f9-4840-84b7-542771f4f047",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "281bdbfa-e75b-4195-b528-67ce9683f5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2534dd16-75e2-49f4-a07a-f9d22ee70b9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e49208-1578-4b90-bcee-38e69a9361ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9d610b6-a48c-4d83-8217-7950301b4534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d921cab-12d3-41c4-9777-c7ba3c84d96e",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36fb2328-05be-4af9-a3e9-6084d16fc364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14b5769b-286e-4e8a-a73a-d60455888dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbf344a-e5d9-4339-8733-9c9249471afe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a37096c-4571-413e-858b-7319977c97d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158e8a57-108d-43fc-8910-1f40fc38ad79",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bb440a-f38d-468e-a4ae-4db25d52d637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d085d0-4174-435e-88cc-73e149bd1eee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3cd5365-f5f8-4f8d-895e-dfff29049a49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0316991-fc56-4ed0-8c8c-cd199fa81564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c49821-1887-491d-9eaa-2a7043a77c32",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a10f38f-8052-4f3f-bf36-644c377f3d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0d8a889e-a235-4155-bac4-be13483d4f4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b82c00-b6c9-4e0b-ad81-bda497d9a086",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5333a30-b8d5-4739-aefb-34573a33a5c5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f8d8cf19-a305-4a2b-a78d-944e8323cd14",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "14ad0b0d-0c2f-45bb-a4c8-c20a45e0179a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f8f37e-672c-46c8-8e1b-9ebf7b99fb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b0807c2-7f47-4bd3-9a0e-bd54143ebb47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915e3a7d-d2b7-461c-9229-47d4f606786c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "cd8feae9-c35d-4c7e-b99a-7f159ad69af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea69976-0988-420e-b44c-44660705b251",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d22c40d-a9a3-4983-8c90-f54192f489d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "356efe89-e54a-4232-a12e-c1655697da9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28720e86-7e57-4bc3-9edb-05de335af834",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "9a208be8-2962-4e9d-b28d-9e3933eb33df"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cca7187c-4849-4864-adac-b0a100ef4f78",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8c03059-8eda-47bb-81a0-5eceadd82c33"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bd78ac9-ae46-48d7-b3b8-2f0ebfea0421",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5babde3e-51e1-4480-9465-6ea5c707ff81"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "65525d05-9f67-4e7c-9b24-47f0007caba3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6479b8d1-0769-44cc-88d7-5e8705f9366d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c3574e33-c298-439a-8c79-63ef9f37d83f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "09bce7d4-60c8-4d21-8d38-fdafa96e05fd"
                }
              }
            ]
          },
          {
            "id": "69abb6fe-ee0e-4b31-9222-c16b2002eeb8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9b07a630-62fa-45cc-8903-55ffbf99cd0c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0406f7dd-fb66-4b30-9962-6dbf7f3d1435",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb36409d-a3cc-4e78-a46f-c35c070ec152"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cbcd486e-c6f8-46bb-9451-662aab7decb5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f3bf1c7c-ae0d-4987-98a8-a78a3dc06049"
                    }
                  }
                ]
              },
              {
                "id": "c1c93a34-2330-46ef-b5df-d200165b602f",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "70483e03-ba9f-4aef-9b7f-bf3ee889d8f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e687eb1-bcd5-4c61-98ef-f58061114520"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "caf0764a-f8d6-4386-929e-409982b6fb30",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7dae2535-8b3a-422f-a24b-835c1429bccd"
                    }
                  }
                ]
              },
              {
                "id": "5bfa8d40-d2fd-4ce1-9ec2-917636748c8d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1722df98-681d-49a5-964a-2ff80b3ede97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c182e925-c39b-4af0-9052-120ad548cb58"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "753dae92-3c64-40df-bd27-e656baf40dbf",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "8b7313ed-9ddb-40a8-83f4-d1f495acdb27"
                    }
                  }
                ]
              },
              {
                "id": "7d6fdb50-96a6-4e9b-82a0-765b02a10b31",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "396121e0-2cd0-4a95-a892-f31dbf5b126e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4f3c54f2-d4e6-4af9-90d5-ca04daaed1c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4858e44-0ce8-48d4-961a-0a3ffbe03132",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "66658437-29a0-49e1-a67e-132f96640cec"
                    }
                  }
                ]
              },
              {
                "id": "bf6ca3cd-30e4-4c87-bf2e-de5cfc670678",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa4272f8-e174-4e47-a5c0-3489172ea481",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "452e77a5-732c-4185-b15f-d5e26d9be82e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38386c64-14af-4ea4-89a5-6e1d455c252f",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "895716ba-7e03-4ee1-9c65-86dc09b68236"
                    }
                  }
                ]
              },
              {
                "id": "a2179541-13c0-4c50-a78b-51bb7efb6c70",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ea25594-532f-46e6-88b7-4501146e3072",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7eedb4c-a535-4cfd-9cce-76583ad769d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0caf3a97-3cf3-4b9b-8f25-8bf9be2e8193",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d73eec50-a617-472e-827f-b7b02b42926f"
                    }
                  }
                ]
              },
              {
                "id": "9f992a63-a06e-4e33-88da-056eadc2ce87",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "037f0dd0-8a55-4507-87f5-01a55984181a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5570b837-eefd-41b2-b4b4-9010ece04233"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca838f43-4326-44c7-8607-7401f78afc02",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "60957af3-38b0-4a11-b104-dd2566f075fd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b948d722-5cc1-4503-baf6-9e4c119af153",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c49cf73e-9de2-4a78-99d9-f437fc800252"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0684780c-104f-4a9b-b690-9a02729f0ed2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "71a1d25c-a505-4f8d-bc29-e167eda7d50a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e553f63-be9a-4e88-80a4-43dbd6948d3d",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "c8a79df3-92e7-4d89-aada-e9934b1be550"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7acdb6a7-2f54-4b94-b4f9-43668c31b84a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9383f3fe-9331-4399-8bdc-506912e675d8"
            }
          }
        ]
      },
      {
        "id": "ebbaf6ad-83d2-40dd-baa1-7383aac75136",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ce68ecf9-3001-4a81-b21f-b9f34280a258",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2b350c51-76b4-4018-8a0c-48c94887c005",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "641f641b-afd1-4653-8701-afa3c7f56969",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75044ddc-eb90-454f-a78c-d65b1accfa26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da0d157-399b-4840-a73b-b014f32ea2f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bac890-f737-49a4-9500-a2364676623a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "608db8e5-f949-429c-8d59-af3b3a7f27d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e39668-daff-4b16-b28a-e3924370cce2",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5df00f-419b-4bb4-8e08-f6f364b6fe61",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "500c0195-ec77-4979-941d-8d0d4dc1b20c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38280a80-29c0-4d53-a69e-8dc1cf53ec1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4c0de2f-5594-4abe-a0c1-b65ac05114f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0ec6603-4ce2-4b70-bf13-dc18783691cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0fd4959-6b7d-4d8c-b72b-4636a22df3bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9aedfee-bd60-48fb-a6a4-265bc2f9f418",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ed64013-3439-44e1-b9a0-8a28514db994"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "746adf31-497c-4a24-b44d-2fae2383a3e0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "71f824cb-c488-4aaf-980e-98a22f4c0fbd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e46fe31-6111-444c-b8f7-c02bcded83b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1905f3d3-b37c-4a64-a636-20f284f8316f"
            }
          }
        ]
      },
      {
        "id": "9c15b6f6-0c35-4f12-b769-be4e538b51c4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "73b2da59-ef82-43a1-9085-5366c8bd6618",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c9fca944-3577-4b44-943a-82a2d1391a9f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2ffd1263-808d-46d2-b55d-36263e5c486b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa600084-030b-4cac-a3c8-476d09820a7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d04832c2-a9df-4f5c-a687-41815deb95ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e84e342-5714-4aa1-8425-89a895f4a676",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0c8459-de34-4963-87df-153f7d110db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34359da-4346-4c40-8bc3-0d6da0e7a55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462da929-6110-4163-a6bb-056b4e94b042",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b75d8db-0788-4b7b-b8d4-02913dc18b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c78acbb2-c0e2-4b59-b839-34aff48e2b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187f3ad8-62c4-4a9a-8bd7-3be6a72354d3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d283abe2-9091-4830-af18-014103fb9675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b25c2ff-ab2e-43d0-b99b-661a80f4bf86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2769ab6-22c2-47c1-943e-7f8ef258dbae",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8596183a-6c38-499e-8a38-6b390d70b644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ff22a9-0254-4257-ac8b-f7c2bf2842d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3a2815-1d89-4edd-8360-dbbcd30929d6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b3ec94-a7bc-4a54-be71-585b06fcc953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d750cb82-dc23-4ea5-a0c2-80ecc17d3ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc00572-8e4e-4b68-86ca-0a7f135bd4c3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b16d90-0dbb-4b71-8970-07a69c0d2a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adcfa150-12b3-43b3-bec8-2ef490a2e648"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e9879f-ae4a-4514-84b1-337f467e4469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf7ee58-74e2-48a3-bf64-7a29725728e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2675606-a0ec-422b-986b-d93372665ab0",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1381dfa0-9b98-4819-be40-bc6dc8d2c4dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "456b14c8-2eaf-4776-9c27-aa0279679e86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc64dec-7e8b-4254-b1d2-6c8fc6ee31c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44b1ed93-2ecb-4d5e-af63-4f5402ecfd76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abdec9a4-c276-420e-a41a-930cb3c6e486",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74d9e86-a2e7-4e4c-a67d-b5112597376b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc49e803-baa0-4f05-83c1-1a60a4a716b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42eed50-476f-4fad-8f75-b4a81829a52c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2109ff-9ce7-4868-a999-aba777eb9cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94688a6f-ffb9-4658-96d0-fc99a759b8fe",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edecaea5-7dce-43e7-9f35-1a95705bfa87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d0c6296-63d0-4914-92e6-63cdf5dceacc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53247eac-d5d5-4079-afc1-05459407f19a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a06a545-567a-4bc8-b135-1758adb9f47a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69fd1a77-b092-40b0-afef-a2a04cb7f91a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3218f3c1-39e1-41c4-9c8e-5b61133242ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7bdd318-1c50-4477-9f23-15f9c4a0b1d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1debce93-d99b-4b39-97df-a540ec492d69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4033202f-b084-4940-bcc3-16415b915a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6b8da7-3e71-4bd9-a45a-465f6929e38c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add62696-9d60-4b48-9084-ef8743e2529f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c81d91cc-d127-45c1-8f02-ffe2dbdfd744"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b9a933-556c-446c-8754-7cd67d18314c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0dfbf7b-0919-4db0-8478-7e56e6f7ffdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe088f6-1255-48c5-a963-42a215729b81",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d954848-70b0-4020-a103-4a1275fdfafd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2426e15-180e-4b2a-b7f3-09a32e0f43eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f2c9f5-f1b8-42bc-bec2-c7bc7a5e954b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a6ca069-e923-47a8-b711-b49d5554bc87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1fa26c-30d9-4a5e-91a5-d4e28e449126",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377128c8-da8e-42b6-bf81-37e05b469d65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cde7121-9418-4007-aac4-62806495790b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06112f57-4fd9-4cae-ac34-41ce406eb71a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7c8f4a-f582-43a8-9b60-a39b8a8b95d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4623b4f-4d78-4e48-a8c3-4719c7887be9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8add4afd-436f-4569-9b0c-efdc15bff72b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9de9d133-40c7-4a06-82a6-e4644ca1bf70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dccedb2a-541a-411f-b06c-d1f60045585f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fff30f3-33f5-49de-a70e-ebb4cae9bab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6bfb6e-2916-4cd9-9816-4eda1522d267",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875c947c-d9ee-4940-b01a-82f949ea167c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19913f90-80ca-430d-baa9-590790d75a26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1262c701-1276-4e0c-815e-a6762fe3dcbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0aa99c8-7d2d-43a5-b614-b79cb22fd76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d8c41c-f133-4b18-93ef-07bca5f61f0d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5184caa1-7b0e-4825-a3f7-5de1c3eeb036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bb86a84-e5f4-4c16-8faf-c72c71fd0382"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c018f8-f1c8-4a99-86a2-fb5877376e75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcb15c49-0fce-4278-bf1a-5e8afc2cf842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec68f7a0-a30b-43b8-ada3-974d15c6310e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b0637c-f818-48de-88d0-3339afd98814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d6ecf7-2d4a-4447-81d6-0f4c439d66ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "181a5583-e9ac-41c4-95dc-c8a84256e5d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65f33e43-33a8-4a28-95ec-b4c6aca1a7c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dde44dd-1f69-427d-968e-ffd737ccd79e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "561fe71e-014e-4b62-acae-3c9a1ad4e98d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c196d47-db19-4a6c-bf63-40b77e9e6f99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db20e1c-d99b-4b97-b165-b59f92057c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d4812c5-4158-4880-9bb2-6eed5c6ad558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4667d3ac-ce1f-4cb1-b8e8-953070d05b74",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4d9d41-4c43-4887-a00a-93b1a9045817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8996c6ab-46b3-4abf-8906-7570f21696f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30bc2df5-efc8-4a6a-bec7-fc647aeb1057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01b50976-43ff-4a73-b970-d1402cad1f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b5e8fb-edc3-4578-ae5b-40d62909fc3f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07003029-40eb-4ca7-a445-9566cb81bf2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5b4fc19-a789-48d2-8cff-cd8ac875d107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9baabd14-c7f9-4e1c-8dce-941f8eebc3b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e36ce55-5614-4aec-8203-c42587702d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e07a278-f445-40d2-b9f0-504c7587fab3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c13981-1324-43f8-9fe8-b19e98a59592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db7815b2-49ba-4946-a78d-e3911669eb8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca01e5b3-387a-4df5-a865-f1175eb74556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cb25daa-5769-499e-b7fa-31138ad10c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff4f9d3-7500-4983-8d5e-b8b085c4d1c3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a5a218-ea39-49c1-ac41-63e596a660ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ab2f83-eb1f-44e0-bfe5-becd6b3542a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7763720f-bbd7-4a33-8600-83ac092c9eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20e91471-0d6b-4928-86c4-f2610811fa47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295a9671-795a-43fe-907c-d7b01d4c5c79",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7878f29b-592c-422e-97c5-0dc8495dc412",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3764c689-8451-452d-a60a-704ad03c9b15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5d4bd6-9da9-4dda-8c61-6bf07e9ca649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4032169b-9694-4f02-b5b2-336f99500eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b265bec-7c28-4f06-a26f-789fbacc451d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a007c638-00d7-43f8-986a-3628f666f19f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b4add83-378a-4835-8222-d29a91da1814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5653c929-aa03-415f-a657-1e41b550f0b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0f5087d-f8d3-4e0e-87fd-c924aaf78d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51004a4-5a48-4082-835d-02754a51b82f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa7afca-b6ba-426b-a884-0705b6640c19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62284a47-fdbf-4975-9eb1-82017cfe279b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f7e1cf-8a64-4817-b472-70441a5c6b7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dc11439-cd57-4eaf-afb5-248e32d3d59a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454a8335-77bc-421c-ab3b-9cb80f2825d5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35065f6d-5850-4fef-b8f1-a6dfa22f16b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47e67e81-db5d-4802-b611-cc52f263e3f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8392d3ab-d6be-47af-93ef-f419b62ebb2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd481d9-5f89-4148-96d9-8c3c0ded72b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71719439-11ed-4557-a30a-311378ffe430",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf8bd05-7376-4997-b604-ad3a0b11246a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a384e0-c564-476c-95bf-f5e89209553a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "958a3881-6818-4ec2-842b-c30e19657f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba9a08b4-86af-4388-a49e-1957f20600ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90793922-399d-4626-8ef2-6d347c6cfa08",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d573436-6e87-42af-b9d5-9d6657ade966",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca1998af-8d4d-4b52-89d9-645942c01fdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1eb31a2-6be0-4996-913e-7b72eac3c31c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd7bcc09-f754-4eaf-8c96-856adcf8eab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997c6a37-c044-46d7-bd77-edadc3b01398",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de28914a-0ca3-4948-a992-d42272d5f100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cd6c8dd-6cdf-4e34-8758-e458834eff84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a532405-982e-423c-9491-f318e248cb85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d782f021-01dd-42a6-ac90-7869275f1b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4394f58c-0138-4540-9b09-985c72b176ea",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffdc9a90-469e-435b-8a75-9bcf17d7ce01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11e3d081-3343-410e-8be9-8cf0e1dfc137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd42915-0668-48e6-9f23-256d182b92da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be705cdb-8528-4ab5-ac12-8abc458c5c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af88492b-1fc4-40ce-baff-1d18f61e0382",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5830150f-a687-4372-a1a0-a645ecabb197",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b776f54-b595-4516-8764-705c1bbb827e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe0b858-0216-4dc8-8f4b-62ffe664da35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1094d92b-da71-4e63-8165-4fa02efbc47f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26041251-b9ad-4bb6-b5e5-d5da5439f068",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b10cf42-24f7-440c-9a7b-f1dd8817d65e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc8e1eea-0135-4b59-95e1-cc7853ee1370"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f778eab1-0540-459d-bbf2-b8b7d404f443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb906a10-5140-4d6e-a2c2-c747c315636a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78cc6d3e-7eb5-4d39-a441-39414f8afc71",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c085e9-3491-4a35-bfdd-9314d2398a33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af15da23-3088-468b-923d-719d71e4f4fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f307e9f5-0586-4e3c-a9ab-d055fd54060f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ebc6861-fa3a-438c-933d-fb93f87e8eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e338c98d-8f98-43e5-adfc-ec71543f900c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4685397-53fc-4396-a6bb-9d5a2c8eda59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10ebf35d-ce3d-4d4f-85b9-8116a868be31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8caf09c3-66d9-492e-96aa-e8c6fd39c8b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caa05fca-af45-434d-bf9d-2bc235b9868a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b632e8d-a462-44f5-a6d7-8e2be9938016",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8a1ca8-1264-4783-9824-2c154ff30272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0452c9-0edb-4637-8107-36791264d76b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39b1364-bd3e-4692-9430-ae605096d199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2e8f215-e902-4bcd-a9d9-b413de1fb63e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee68e90-dacd-40bb-ba50-3509da1d3fe5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f8f4e3-96dd-4177-9d4c-8234ff562007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3515f81c-0c3a-46d7-bd04-bd5c04b2fe21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b966662d-27de-4808-93b6-a9af3c95d118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dfe45c6-5199-4140-8dc7-6d0cfd898807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89d4ec4-316a-4cd2-9961-b5555e3f7bde",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50262e8-4ad3-4c03-a99c-a641087cb73c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c208625e-c02a-49c8-97a6-5e432552524d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb2d270-dd94-4e19-9874-0dc64759fc4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6651910-393a-4440-921e-01452fd38169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f77dd6a-5016-4579-9fcc-6710830aaa56",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062decaf-04d9-495c-9b2f-009ef05a864b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db79a50-4ab4-4f0d-a68e-f27909fe4d46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb8bc5b-759c-4591-addb-4c2c78a8b609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4535cf49-94f4-4698-9ca7-cc1fbade17b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3673a1-04ff-4670-a057-77ae16e99f90",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e26a09-66c8-4787-bb32-2dd4278f5571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59987699-9dc9-49a6-b7b8-e45bdebf56c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b931cf78-80b3-4619-9815-24d19fbb06ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60189f25-7605-4fd3-8262-d9a7136fc03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75be87bd-b22f-4c99-9e6b-20ede79c58eb",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec8ed42-a556-4bb4-b6ff-a355191a747a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b3a588-e310-4c04-a831-151b6d0fb7d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e9afd9-d7a5-4751-a563-d8e64a650f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad34d34-f898-43c3-bd2b-47ec1658bbe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c17172-5da7-4407-87c2-463f1e9a1ec9",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2873d151-4e02-4919-a02f-850a049c6807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d93de2f2-6e91-4565-a008-d22a14286a41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de503289-97d9-4cd0-964a-23e4fe831919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c3b1849-0083-40b2-8a2f-f5f3e7847244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f6711a-cd35-4aa9-9151-b3f24ae0f3e2",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff260f1-7383-4a8d-81a3-e7d93bec9216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed98f44a-759f-4a3b-b729-8b6388e4948f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "956fdcbd-2ded-4823-9137-95e719a05977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff3919d9-685c-4993-8298-81113c328cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28166362-1875-474a-9f15-c4fce439750e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb18e3d-7f14-4f0b-bbe5-1d4013e075c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "172a95ce-871b-492f-b9c7-a5c8a80940c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da63208-4c3e-4c5f-b6b8-f6e1fc5088a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ff6752b-9631-4a05-904c-f4fb305ecc02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6cccf8-b8ea-404a-b881-44e7b705f44d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca628fe-1ff0-41d5-9eb3-26141c87ba58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c3353bd-6b2a-46f7-87ff-77c059cec31e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22415c6-db9b-4b69-bdcf-045d6047a3bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7704b60-7c7d-4723-bdb7-966e0f4a6f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53eb2c97-e238-40ab-b0af-6baa1c6c506d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5253f35-78e1-42f1-9881-24d2e3aedba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee5fa62f-b6f8-4fba-80c2-93f106e06e5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9d4ab2-5f80-4bec-8eca-403e38c392f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43faa582-6fa8-40ab-848c-8e4c4d614ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855b16dd-259d-4cae-a671-13765ada2fb8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1df70c-da61-4289-a389-fe6d07373019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5ec2a0a-e5e2-45e9-a8e8-8b96f1e804c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07398766-7ea5-442d-81d3-d4385d86f2c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1dd4d43-c15c-4eba-b820-b632d81448f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65b4b5b-8d99-4348-8d6c-918f031e2c20",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81dec78d-c756-4c11-b161-3659ee6d2049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b7316f-cdde-44e0-a8c4-6dea1e0c64cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "681a29b7-fa2d-4fb1-b9a6-f3333dd1ea1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "835ec532-dc2a-4166-a14a-d974c6efc949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a9cb4e-3241-4b88-94e0-787508005f14",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa41baea-3580-447f-a2f4-dc634f61869f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06710e65-ef49-4f9c-859e-6379e63bbf6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25816de8-5636-449e-ba9c-3ef5d6c257e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d432a9b9-5637-4c01-913b-186547e0a12f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87545c45-9930-4b99-acb3-fda275620b08",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b20e5f-c36f-4049-bbe3-6ab45f250877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e7e9692-6504-45ce-bcfc-2558e988bf36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfc08fc-e0c2-408b-b51e-e5171135b2ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28239626-d281-4399-bb67-12ff6fe77f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f09d7c69-2cef-4806-b3d5-8c2f259a1ee5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688b6b2d-0890-4a71-8797-bd76c3e8ac5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1b820c-94ce-46dc-ac00-4f232de95af1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b29a7f9d-18a1-497a-b490-1a68353374e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85201982-0232-4d41-b2e9-d46b30127ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d67994-d54c-4c8f-9e53-08f6421237c4",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a20080-b872-45f3-acdf-87783f552521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab5dc866-0ba5-49ec-ba15-914e3735d95b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c208cc91-bebe-4d25-a1df-080791c4f66c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f66b1bc-8876-466f-8490-f3e0aecdb874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eed7d08-4d45-4d2f-99f0-e5df11e91411",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03069db-b9a5-4696-a991-235e15447c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "290a5cc0-3c64-45b1-b98a-430df190a805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcec6700-7a3c-4949-a40a-0ebd76b468d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6589ee97-5d02-41c0-a2bc-bd03826bc4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075cb7d7-7dad-4a5f-9101-b2cb97a5bd7f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114b8ad7-db8c-4b05-bd6c-d64285ca2460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "719b8bcc-52f1-4bd3-b3c1-8641c0013989"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c3a316-bb21-46ee-b710-bbb438fe933b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5aa86d-1c25-4a1c-9122-f34b598f3a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92723353-7649-4019-ab4e-1555d2bed793",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441b02be-21f9-4367-9089-a74514788f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2421544-19c5-4ae3-820e-8ed036a434c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a5ff1c-697d-4c19-a574-9f196005b345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66267c13-73f6-42ed-84f6-7568bdc4ee05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63056f8d-cd87-4b2d-a486-7098a27b0da3",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e6aae1-521b-4cce-b571-d76c352f1c08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdb30d46-b898-4208-af5d-603d8f2be33a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7ec17b-67dc-4bb5-b626-9ade53ea4211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15f9f87f-19bf-42d4-8407-02d95c13a702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3df8340-4a4b-4462-a6b4-a0d92f457fb7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c967353c-b419-4e8e-9e29-6c4a0e7688d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f326611c-261b-4a0e-aa24-cd4d96d86f4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91cf27ff-571f-4c19-97e6-007c097993b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0932b871-c611-4542-ae11-334b7afeb8da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbacd9b1-8916-4136-b62a-d7bf0aa13893",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488aec58-9cdf-4dbe-bc21-d6fec1a47076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f777a7cb-9f4c-4d8d-af8d-a5904a1b063b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03c3199-9160-4581-bc57-ae54a2372232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07fac42e-9588-4eaa-a89a-57fb445d1019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f105a58b-a872-456f-a58b-5f2638d2cb7e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab0593d-bbd0-4bb6-b6fe-f1032159786c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef458000-c34c-421f-861d-6872576360dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d243a6e6-20e9-4a22-bbdf-44d8d71f4124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17f73807-a935-405f-a35a-7997cb3d1b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e81173-0497-40c4-b94f-1512d09df070",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cffe781-a5ed-47f5-89b6-9feb06974443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a21c1b-229c-449a-a513-41d1425e6b76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d1fe90-a678-42ec-a9c0-e898a06f8603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3172391d-1c6c-420b-b350-ab5de6cb33a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a07af8c3-87c8-46b6-8f07-e89f549f755a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620150cc-e8f1-47cb-a8bb-4412e2df3bb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20cddc1d-c564-4696-97a5-cba0c05a0f4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d39c083-c3dc-440c-a0c1-3614687f025f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4340ea5d-fec5-4206-9bde-09b3ae407322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6deddb-7935-4e7f-9323-402285d9ec71",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5d5b26-f2b0-4651-8329-7588643dad23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "425dd10b-2627-444b-b34e-901ebe9d6a56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32574440-bc5d-45ed-9b2d-f6ec7f02ff58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b1caaf-0dfa-4867-9006-efe8868b7e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70d7519-4b21-435d-b46e-98cdc2b6e4a6",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec0fcf9-c11a-4031-85a2-b0efd34c8df9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fd24a27-e4cd-4ef3-b645-5fcc6e10f954"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4ca563-a24b-4e22-839b-69ea2ee8b61b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fda3b2e1-9056-412a-ac5c-70b89e6ec630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7c3b87-f215-42e3-bd3b-3246939bf738",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3d1e2d-2712-4584-97d3-526d9c09c075",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4a69e8d-d74a-426a-9d5e-63463eb24c9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c16cdc5-b462-4c2c-8027-372a2a76948f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e138910-ce09-4020-ac80-b053d263e997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bcf657e-e4d4-4e1d-9ba5-81c1d6419ecf",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8944cd2b-7582-4255-96d8-8f7b359e9716",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c37bb961-7282-4ee5-8a59-b7cdd9e710c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28d578f-46b9-41c9-a7b1-4614b2b84b9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d681fb-755e-4336-bd02-d506181749ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec6aba8-6950-4dc3-b8d8-c7cf7697259e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b14675-9cd0-43af-a47a-72bf1e947f72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6e44dfc-d961-4492-ba21-0409973d5dc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e50a4b-b21f-4540-b4d6-1ea20e347ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee78c8c-f302-4982-a4ff-ff0e88000c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867945d0-ecfa-43c4-a5c8-98c649ca531a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91dfc0d7-06bb-4063-805a-0c2d0737e06c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2c4b992-06a5-4a04-b0bc-405b38c29f67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0212d3b2-4724-42aa-b698-98e259b7aa82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f6d0df8-a62b-4ae6-9adf-faf10ecf1fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d958569-461c-4823-b748-e8f8684ba454",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe7597f-a6fa-4ea2-9cee-a8b3e6879ae1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9955b3f6-e5cd-4988-92b0-cee61cb038ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ee43e4-ea4e-4c78-aed0-184409d835ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d9e356-d5fd-422e-bba5-09fa37b66182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511b9511-6ce8-4aec-83b9-6f9ba34c0e35",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360d593a-597b-4fa8-9fd2-3ae0f75bc2bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a0603e6-8b8f-4a5a-aeb9-dd9080a59a59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25985a8b-0de9-436e-8b42-9acf94d1c2c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1625573e-552e-4a75-a576-e605c8cb630e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94401c3-38f2-4959-b2a8-ea9fc6489a04",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe4fe15-e7c0-49a3-a9b5-8e7574c26ce1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6c01642-c8d4-4861-9581-dc959d0c8674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09cea1c1-0b75-49d5-9735-a0951b3e6f88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "778d3ec7-2b5c-4282-afdf-8915762da6dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f56cdc31-6c41-4d99-b0b1-58a952476890",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca50683f-3e28-4dcf-b489-8c48150d0803",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e89054b1-026f-4dc6-b6b0-e22a360ea422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f9f184-11cf-4ff5-a7bf-3f13c25fb278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a746af3-f969-46cd-9ed2-8dc27f2f78b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d087ec59-3e8c-48a9-9350-8623918cd06c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c489f263-8d63-453a-bbfa-a62822732f2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4d53e32-33ff-4aaf-98e7-8a9c396ef9bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4cb26f-8f2e-4ca1-aeb1-e9472cdaf946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "537e2eba-7f26-40b9-91fe-e693964b18df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a552355-9f88-41d9-ba5c-fc004f061679",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320c0601-c84a-4bd8-acfa-cbc4b2538529",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e1624b0-1576-41c4-93f7-321709d8079a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d90fd3-83be-472f-9586-01abc5357f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef926291-5eaf-466f-816a-8403d668edd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b66f4b-63ed-4cfa-918c-3f65241744fd",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab01c92-2568-478b-bc59-9044beb8312c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83b2e96b-fe96-4f39-99f6-a8f4b4d09cf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "841a803d-d860-4dac-80ab-469fd5fae05b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "651940e9-2940-492f-bf23-37e99a2bc9a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c7c647-cec6-4e2f-a076-fb8a7bc872a9",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee57b846-0369-4091-b9da-fe5314240795",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8376a11-f637-41df-a2b0-7eb6f95a0d95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4aa942-a5ff-4f12-a765-d2bc9cba0c35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c589cb-0e75-4ae4-ac61-c571106df74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb47095a-b361-407f-a0db-6f2121a56fe6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b58f1b-caca-4bc7-b285-d9cc18dab50b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75f8c83b-fb29-4048-a824-2e61fa6e1bff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e104f7-2661-4819-80c9-04909e096e1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89ab8e53-f111-4792-bc8d-0b3a6d05063e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005a6f10-d14f-4e64-ac7c-fb145d4e224a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5720f23b-91aa-4c23-a91b-a50d8d014415",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a80ce76-7748-4556-8454-42cac69c21bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7de2cad-8b4c-4df8-a936-ab87a339b3a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca3cb64-a018-4e8c-976d-6fbb75e0a496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd0a8b0-484f-4069-a226-f6aae19b6d2a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43634436-9735-429b-ae22-afadcf8500fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b64d6dac-3cbb-42c5-8fdd-d6f71316e07e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5974c40-881b-4c44-a8b8-8b90578db942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5d0f7bd-06f3-497a-a404-d367a832cbb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b2e02c-6fe8-4e78-b47c-94980552fe6a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0b6bab-d3c9-4454-bcfd-7de9bb61dc91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3be006ff-2fc6-4cf8-8a59-8625f34d3849"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "122be1bf-8567-46e6-ad70-e4fe619a819a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a328e4-c018-487b-af33-2bd81ea42b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab2f0fe-912a-41de-938a-733528370537",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82118e3b-34e3-4fd3-b975-624c58aae833",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78a3b7a7-bd7d-45dc-89e4-dd3924ebc268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cfed5e2-2ce4-4797-8385-0489acde82a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "548ce096-42b5-49ee-ae87-80ce11738a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ca565a-640b-4191-92e3-7f4e4a30cd16",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2333e35-f9e0-4284-b8be-74054f0d2c8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc085849-08d1-45b4-b4bd-3d342e0929a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3488e1-025e-4584-aba3-d803908de471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a559e62-5279-46c4-bbd7-3dda28ea631a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525ee087-d96d-4972-8912-c9bab69caaed",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a0ee9b-dafd-450c-a748-2a80c7976149",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "226dfbfc-fb67-4f51-911b-48df9a602746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6da43c-e73b-463a-9c1e-69c74334de0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e278a4fb-2840-4fc4-97a1-9a5f542a7df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1959f51-6c3f-4103-b958-4b39b1d06135",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241d4f3b-6a46-4310-b637-3155b5e2b65d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c030d1db-915d-47b3-a16b-00646433f845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c408a66-6486-4fa9-bdf0-578ba3bd192b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15c91ab6-ce91-45e6-b908-12aafcc57752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cbda1dd-50d4-440b-a88d-44892635fd53",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a311102-1e45-47d0-aa73-57b12c1e059b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c195940e-ce30-4e54-acbe-924944dd5070"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fb9c59-b173-4c6b-a168-e5a952d53575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ca2032-18ff-48c0-a51f-8df4b0d21704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda7c8db-53be-4106-a64b-3d8f875274e2",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f322bf00-de7b-4783-955f-5440815c6077",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f5c74f7-f651-467b-b8cf-13a7d18c9ad5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d5c79b-75b9-44ed-9d89-89f80473ca88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3843bf7-2857-4c4f-ae67-7ae5619d9d02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778bc5dd-0fdd-4815-b728-d8ffc8f648ba",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c01df9-ae44-485b-8095-c9c3aa719f8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e6903a7-1537-450e-9a9f-623d436484bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e8f3b0-cba6-42f6-b0ed-2cecc70cbf66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16038728-219a-4f35-a722-f673df64984a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79416e37-c6a4-4928-90c3-5cc7ba06a75a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c1ed9a-ecbe-46ad-8ad1-2c6ee866df95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48fb4429-6b3f-4c5b-b31b-84ad32014448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b8ac4b-1e70-4ed5-933c-90a4a2dcd21f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "138942ec-caa7-4cd3-9c58-a106bfc97148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b383e54c-7fd3-4ad6-9847-a7dcb809713e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a86deb-71c3-40b2-8e64-f974db5d89b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0958ed86-5e0e-4af9-92a7-8a79a69a68be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "207af25e-a62f-4c48-820a-0299b7d71766",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87185c3a-2024-4d1c-88f5-61f1fda9bc50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653bf753-3527-4c34-8106-531643c2f9b0",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fe7912-420d-49fc-acac-0845c66d5fb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92f176f0-8e5a-4fd3-8d20-db726e378f50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1112cb-ea7c-4cd3-98e8-101aa3007ea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2306a6f-e5b7-4ddf-b9a0-159e44f17fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9a2116-4104-4517-a15b-4053bbcecc85",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c98f03-2805-421f-889c-c94fb128f097",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e886f64-97d8-4c2f-9344-3ecad42d59cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06caa64c-b8fd-43e0-914b-df347b55cce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64eacd4a-ffdd-4fd3-9c04-129b66ffc10d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ef490e-1097-49a5-af56-3f99bf41ed26",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa64ec0-edc9-44ff-ad19-89c4b754b32a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70b3b465-1362-4aff-8a3d-e6cb3a5f2566"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d9ab27-b962-4997-a77d-ab74e5cf6e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5149964c-af6d-4464-8235-82cda5d0e018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f578734c-508e-4c73-9b9e-18ca69d9e2ba",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddec94e-f834-4027-8c4e-e4f50c810c4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95cc10bd-08e1-40e3-9c08-a1feaace2dcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df239f63-c9ad-4c0d-b606-e01dd1dd09b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb95f15-beef-4d5a-b06c-dde037f90d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd3f31b-14fc-4a98-84ff-dfbf4da90524",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca1933d-0eb3-444b-9083-8473172a0307",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23a382dc-0a6b-4cb8-9654-be3890ee2328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64ddf72-cc98-4dad-a226-11c9922a457e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6fad4dd-82c0-45d7-9982-d1320259de51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d5ede2-2cda-417a-8998-29c443169295",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f9c094-194f-4df9-b4c8-d5c87a889b47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97680425-a53f-4298-9c51-0f1cd829f63b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95efbc4-8dfb-431b-bdbe-2c7200f61e5d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26acbcd4-dfdc-4f5c-aec8-aced1383bdf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875b9e6e-7823-40f4-9a49-5a61d2319880",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f9e463-d3a2-4449-a1b2-a6f8acc49eb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba8071b0-cd34-4b91-810c-ac0333d3b72d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daffd587-a022-40c5-926d-597f704c55b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2378643e-eda6-4c3c-9cf1-ef9e710f5c9c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f323fe2-d427-452b-98c1-d7bb40ce686b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bfff55d0-559f-45c6-a45d-1c7d466f3cda"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f07a26a6-2c1e-4062-a1f3-16e9dcfd5fc0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f0bd0577-b6ec-48b7-be2e-efd4d8c6ed4b"
                    }
                  }
                ]
              },
              {
                "id": "a3c459a3-ec42-4c9f-a1bb-f2011f25ae14",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bb2263bc-d93c-4e57-85c8-c4c683086c4c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91b73fc-9228-4581-b83c-2ec5295e9520",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "57409845-8513-4ffe-8c32-de1ed2c2c0a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db244bb-2839-4772-b212-15b5f036d6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abffece8-16af-4602-a221-b8429d9d7da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6bedc6-37a5-44d9-a9eb-d206f3e91c75",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c277b0f-e46a-4188-934f-2f461e2bc63c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6a460b65-ddef-4f2a-b9c7-39b1850c7656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8dc986d-d8d0-4d5c-90ed-a8e5a0d5ee79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5fbccf22-5797-4fbf-a7a0-3c47054ff656"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a97dfdb0-0553-4e73-a629-8a8ed43ceb56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb641132-4d54-467f-bfe6-5a7f7c5eb780"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c98156b-6675-432c-9d77-d27ff364e182",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce2c25db-6c74-42fb-a5e4-46ca5747ee5d"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "c46c4a50-e215-4dc4-8424-c34aefb5ec81",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e9f8d6c8-075a-4e87-854d-2ad6f5e86c59",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a413704-8535-4031-a625-858745687df2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9312d06b-d0d8-4d44-bfca-03557205ac25"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b71ac628-3551-4973-b207-209274bc2168",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35780f15-b0bd-40bb-b126-d9c596f73769"
                    }
                  }
                ]
              },
              {
                "id": "27d087a4-2c0d-484c-942f-4cd658b4b41c",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25664d49-491b-48ff-a4de-69fa7f166953",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a62bceb1-b155-4e72-bbcc-9be4ec7dd755"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf778e32-d5ee-4972-873e-275aae2d1ca6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e2e8d3e-52ae-45f1-8dee-c86ddc1a655e"
                    }
                  }
                ]
              },
              {
                "id": "53aa5176-0c4c-40cb-b16d-8bb5c4d95a31",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7fdd493-b99b-40f0-ac14-66ee67227166",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "846decd7-4038-40a1-a5cf-9310a821118a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "759487c4-fbd6-4b66-bede-4136e8e27d92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dcc893ff-7e48-48ef-8026-75c50885346d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61c0db0c-3064-457e-9062-e535226094fa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "bd2c74bb-fa05-463e-a833-99c7e060e819"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b73caa15-c403-413f-b553-cea4192b51be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "32ff0504-0f92-43ea-be02-4d0b1800c220"
            }
          }
        ]
      },
      {
        "id": "a0769053-d9a9-4030-95b0-e3a96e1601d2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "62df8fc9-0450-409f-9c2b-6d9b19db0235",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d5bf19a4-24a8-4ef1-87c0-0907bb4d3880",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "57726345-87fa-4122-a12a-352025647003",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5cf9da-903d-4747-a41a-11c329bb972d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "987df93a-7f08-4941-88b3-b1d449d885d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "755e11ea-77ac-4517-8ff3-407221091a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba49f4c9-fcc4-4f76-a6ca-6adde783b8d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb339861-a950-4330-ba09-5cfe060c2638",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbe2b0f-e2df-4352-b9d7-d959d7db02e6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6563a17e-d554-4c6c-85d5-bfbd5b2203bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b64b764-fdf6-40da-bf35-01bca04734b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09b024bb-fe3f-4f82-8d1b-c91d1dbe6261"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf479c0d-8b76-43da-902f-9dab90a94d96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aab34ca7-acf6-4d67-8a5b-2d0d143e8a9e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "95b3e33e-fdd6-4263-b066-789ea34ac586",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32ab7525-a0c3-44f0-9884-50ed07676519"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "316b00fc-ecda-47f2-93fa-89f94760a77e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "70038140-3c28-4708-8b6f-e15d1216e3fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8a010a76-59ec-4420-912e-1bd64b075707",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "15938d07-2a5f-494b-acb7-8ade6693c350"
            }
          }
        ]
      },
      {
        "id": "10f3e532-2852-4adf-9851-5c8c7005e5a2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e7faa6e5-3c33-4627-b4e7-2cb5b3509425",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3b2df60d-8233-4858-848b-e1c218e2e905",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9703b859-d054-48d0-b945-d2b1178c9b53",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1dae1dd-a3a2-43b0-8630-1bd7b981bac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a1abcd-7e94-4a43-88c9-7ce393181633"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9f19f1-2270-4de6-8508-959eb4ec8f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "246c3305-d518-458e-af78-cc73414d34bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91f063a-394b-4ffd-8714-96e1e8cfde23",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be08a03-1eaf-4845-b450-cc8245814faf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "cc67a713-49de-4204-8d74-7d3bf23a980c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e26fee3-91e2-4327-89b4-ee2b2407913e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b7bfd9e-994a-46fc-984e-f0061e62381b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e955bbe-0717-470f-95a0-2d83b93c2111",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3fa86a86-e158-4d4d-b5f5-07b19518b448"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf71d343-75e4-4ced-adb5-0977e6dfb6f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee67a345-e898-4499-b48b-4d3f7e34a63e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed33a860-831b-4806-9066-6ea6e5fba20e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "c1dc271e-2962-434d-b5f0-520be2786c1d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61c2d7f1-0181-4563-b0b6-726ac4106d77",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53c35545-9363-4c71-a82b-cd013ee776f7"
            }
          }
        ]
      },
      {
        "id": "1932d439-b2ca-43c2-8ccc-633548a42d4d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "294f5e27-1652-4a91-a255-6574f9c3f650",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb2ae43f-7796-462e-9ead-cb869952f1c9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "698cee95-6641-4e61-9523-e14a7a389f24",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be2db407-4b94-48d7-869d-7452c3fe7f8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f66a0d0d-4903-4d05-a5eb-7f57a01348e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51886b79-76ec-4039-83fc-eaaad188e0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8fced3f-e5fd-4c42-9541-69e5d145701b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a060cb4-dfc8-4c48-8320-b2aa9d3f4902",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9844621e-9048-41ee-961b-2270b8a0baa3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "bb634298-5793-4411-9b8f-3442857760d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5debd778-7f35-4b81-8b69-55eda45c2f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38f046b6-04f2-48cc-9aea-c717b5715af8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90bde7e6-ca22-4e03-8281-5692d5083e40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0702bd4-6be8-4587-bd60-215b7e3741e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1f014ac-4958-4fd4-a55b-4ee3e7150f13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8d216af-ec5b-420f-ba3a-47350fb31864"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9382a4e1-367f-4742-b8db-18b1057e81fd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "6b9fc2b9-66dd-4451-947b-8f9806068ac7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e31c367f-6022-4881-8e99-a9a67de19456",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "13efc12f-ae1c-4acd-a5f2-120781a08de0"
            }
          }
        ]
      },
      {
        "id": "6cb8d7af-6c33-4e4d-981b-4ad55dd08ab3",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "7e3aba3f-d9b1-4c50-8017-0be2b14009c3",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 155,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1211,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 155,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 203,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 155,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 315,
        "pending": 0,
        "failed": 284
      },
      "testScripts": {
        "total": 611,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 600,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 86.99014778325122,
      "responseMin": 64,
      "responseMax": 292,
      "responseSd": 34.8848902529226,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1664586626123,
      "completed": 1664586652763
    },
    "executions": [
      {
        "id": "79efcd12-a8bd-408b-bad8-35b7943f1590",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 155,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5c56bb0c-278e-4b0f-86a9-352d5bff2710",
          "httpRequestId": "1a928333-95eb-450d-a5f5-6861e0bca485"
        },
        "item": {
          "id": "79efcd12-a8bd-408b-bad8-35b7943f1590",
          "name": "did_json"
        },
        "response": {
          "id": "d171c355-127f-46b5-9199-412554a4d25c",
          "status": "OK",
          "code": 200,
          "responseTime": 291,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "9d317ab5-b273-476a-b925-2ca996df6753",
        "cursor": {
          "ref": "ea3706c1-ccee-49fb-bbff-342d1dd91deb",
          "length": 155,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "62fd723c-4be2-4feb-9a6d-26a9066d2f82"
        },
        "item": {
          "id": "9d317ab5-b273-476a-b925-2ca996df6753",
          "name": "did:invalid"
        },
        "response": {
          "id": "b1739a56-1137-47c0-bc46-351ab30a7a7a",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "9d317ab5-b273-476a-b925-2ca996df6753",
        "cursor": {
          "ref": "ea3706c1-ccee-49fb-bbff-342d1dd91deb",
          "length": 155,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "62fd723c-4be2-4feb-9a6d-26a9066d2f82"
        },
        "item": {
          "id": "9d317ab5-b273-476a-b925-2ca996df6753",
          "name": "did:invalid"
        },
        "response": {
          "id": "b1739a56-1137-47c0-bc46-351ab30a7a7a",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "7791a3d4-9b20-49b9-b466-45b6b890f55d",
        "cursor": {
          "ref": "b7a2c1b8-2dd3-4ddb-bad8-cc10f217cd84",
          "length": 155,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1016f7a8-0264-4afb-bf0a-03fe72f16756"
        },
        "item": {
          "id": "7791a3d4-9b20-49b9-b466-45b6b890f55d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f3ad6275-ecc1-490b-a1e1-c8ba479bd03a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 163,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "1c476ab4-7d8a-433a-a3cc-8365f9517bed",
        "cursor": {
          "ref": "97279b96-68de-42bc-916e-b492bbfe644b",
          "length": 155,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a03664f5-ba6f-41b2-83ab-8a61fa2aa6b2"
        },
        "item": {
          "id": "1c476ab4-7d8a-433a-a3cc-8365f9517bed",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5664f805-7d92-40a2-b649-65f589fd003d",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e87c2877-4b45-4a2d-a144-68824bfc6a67",
        "cursor": {
          "ref": "cda51259-d1fe-4539-880d-4caf0c1f92fd",
          "length": 155,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ec332bf6-8c56-4e51-a1b6-6d9ccd1056fa"
        },
        "item": {
          "id": "e87c2877-4b45-4a2d-a144-68824bfc6a67",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e1748357-88f1-4a60-8cf3-f7cfa2647042",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "78143ed1-0504-47d3-9e50-0a9d58b8166d",
        "cursor": {
          "ref": "f4756026-8124-4761-8af4-965a013182e2",
          "length": 155,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8522e9bf-7fd2-47d2-bd3e-0e6fdbf04a23"
        },
        "item": {
          "id": "78143ed1-0504-47d3-9e50-0a9d58b8166d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5043690f-24b5-4ef6-8469-ababd553329b",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "78143ed1-0504-47d3-9e50-0a9d58b8166d",
        "cursor": {
          "ref": "f4756026-8124-4761-8af4-965a013182e2",
          "length": 155,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8522e9bf-7fd2-47d2-bd3e-0e6fdbf04a23"
        },
        "item": {
          "id": "78143ed1-0504-47d3-9e50-0a9d58b8166d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5043690f-24b5-4ef6-8469-ababd553329b",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "9660d0be-3d6c-4a74-90e1-c27d2295941d",
        "cursor": {
          "ref": "0f3ce37f-d4d2-4eae-8bea-826b7c98f9d4",
          "length": 155,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "976a3720-5096-4d10-9dba-ffa5c4cec10a"
        },
        "item": {
          "id": "9660d0be-3d6c-4a74-90e1-c27d2295941d",
          "name": "identifiers"
        },
        "response": {
          "id": "42b4d117-fb78-4388-a2c9-2f93a9a8b205",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541c6f82-735a-4b5f-81ef-0bc656420fde",
        "cursor": {
          "ref": "4b90707e-ec9d-4965-9fe8-9cf8f4a91688",
          "length": 155,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "769300cd-21f3-4147-bf41-f38aa1bfb8da"
        },
        "item": {
          "id": "541c6f82-735a-4b5f-81ef-0bc656420fde",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "76899e6a-ca25-4391-a4ac-fdd52e303738",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 292,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "541c6f82-735a-4b5f-81ef-0bc656420fde",
        "cursor": {
          "ref": "4b90707e-ec9d-4965-9fe8-9cf8f4a91688",
          "length": 155,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "769300cd-21f3-4147-bf41-f38aa1bfb8da"
        },
        "item": {
          "id": "541c6f82-735a-4b5f-81ef-0bc656420fde",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "76899e6a-ca25-4391-a4ac-fdd52e303738",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 292,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "541c6f82-735a-4b5f-81ef-0bc656420fde",
        "cursor": {
          "ref": "4b90707e-ec9d-4965-9fe8-9cf8f4a91688",
          "length": 155,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "769300cd-21f3-4147-bf41-f38aa1bfb8da"
        },
        "item": {
          "id": "541c6f82-735a-4b5f-81ef-0bc656420fde",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "76899e6a-ca25-4391-a4ac-fdd52e303738",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 292,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "254e14cd-f46d-464d-874f-f9e9fb200ecd",
        "cursor": {
          "ref": "40774820-c54d-46c1-a3b6-84ab77b8ddfe",
          "length": 155,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7c88e1cb-7102-447a-aa59-21ff0cf29735"
        },
        "item": {
          "id": "254e14cd-f46d-464d-874f-f9e9fb200ecd",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "79185ace-1428-46c6-aafa-c769bbf2172e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 82,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "254e14cd-f46d-464d-874f-f9e9fb200ecd",
        "cursor": {
          "ref": "40774820-c54d-46c1-a3b6-84ab77b8ddfe",
          "length": 155,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7c88e1cb-7102-447a-aa59-21ff0cf29735"
        },
        "item": {
          "id": "254e14cd-f46d-464d-874f-f9e9fb200ecd",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "79185ace-1428-46c6-aafa-c769bbf2172e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 82,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "91209a1a-cecb-4ba5-b736-c93ece4ab63b",
        "cursor": {
          "ref": "c9d2969e-e4e3-4094-a425-80461c027fc1",
          "length": 155,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d345f5f5-d14b-4e91-9c26-84cab55323d3"
        },
        "item": {
          "id": "91209a1a-cecb-4ba5-b736-c93ece4ab63b",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "5dc74059-a627-4908-9495-52f104442f6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "91209a1a-cecb-4ba5-b736-c93ece4ab63b",
        "cursor": {
          "ref": "c9d2969e-e4e3-4094-a425-80461c027fc1",
          "length": 155,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d345f5f5-d14b-4e91-9c26-84cab55323d3"
        },
        "item": {
          "id": "91209a1a-cecb-4ba5-b736-c93ece4ab63b",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "5dc74059-a627-4908-9495-52f104442f6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "2b62cbae-e1b6-463b-a7a8-93ccf751de66",
        "cursor": {
          "ref": "c541ac21-e228-4cb5-8152-ad03e87f1333",
          "length": 155,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8727f9f3-3ee7-4a92-a9fc-610928a6af1f"
        },
        "item": {
          "id": "2b62cbae-e1b6-463b-a7a8-93ccf751de66",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "c44b8a99-880a-4384-95a4-e14ae7ab5f05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "2b62cbae-e1b6-463b-a7a8-93ccf751de66",
        "cursor": {
          "ref": "c541ac21-e228-4cb5-8152-ad03e87f1333",
          "length": 155,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8727f9f3-3ee7-4a92-a9fc-610928a6af1f"
        },
        "item": {
          "id": "2b62cbae-e1b6-463b-a7a8-93ccf751de66",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "c44b8a99-880a-4384-95a4-e14ae7ab5f05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "51b07e6e-c1f3-40f3-abe7-1d0295787c12",
        "cursor": {
          "ref": "3e9905d2-0a5a-4b36-94f0-da1c4ee95b17",
          "length": 155,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8cf01b68-fff2-4846-bada-4e866313e121"
        },
        "item": {
          "id": "51b07e6e-c1f3-40f3-abe7-1d0295787c12",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "c11935b5-afca-454c-8593-66059522d849",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "51b07e6e-c1f3-40f3-abe7-1d0295787c12",
        "cursor": {
          "ref": "3e9905d2-0a5a-4b36-94f0-da1c4ee95b17",
          "length": 155,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8cf01b68-fff2-4846-bada-4e866313e121"
        },
        "item": {
          "id": "51b07e6e-c1f3-40f3-abe7-1d0295787c12",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "c11935b5-afca-454c-8593-66059522d849",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "98bc5af6-7b3d-4a00-a73b-8ef6705fb0b2",
        "cursor": {
          "ref": "5fdc7edf-4f4e-4188-8191-2a8c4f2b74a4",
          "length": 155,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ef463b23-f6a5-4611-ab7c-68ff4a5d8a1e"
        },
        "item": {
          "id": "98bc5af6-7b3d-4a00-a73b-8ef6705fb0b2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bdae78d2-eefb-47bd-8309-cace7917609b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "98bc5af6-7b3d-4a00-a73b-8ef6705fb0b2",
        "cursor": {
          "ref": "5fdc7edf-4f4e-4188-8191-2a8c4f2b74a4",
          "length": 155,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ef463b23-f6a5-4611-ab7c-68ff4a5d8a1e"
        },
        "item": {
          "id": "98bc5af6-7b3d-4a00-a73b-8ef6705fb0b2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bdae78d2-eefb-47bd-8309-cace7917609b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "42ef890b-3690-4147-87ef-269f9d10f764",
        "cursor": {
          "ref": "f18e9653-d079-46b4-b643-2a626de1bdc8",
          "length": 155,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "162c5c09-004a-4901-b593-8dccc34f3fc6"
        },
        "item": {
          "id": "42ef890b-3690-4147-87ef-269f9d10f764",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "a21f40e2-7dd3-425b-996d-b436db687c5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "42ef890b-3690-4147-87ef-269f9d10f764",
        "cursor": {
          "ref": "f18e9653-d079-46b4-b643-2a626de1bdc8",
          "length": 155,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "162c5c09-004a-4901-b593-8dccc34f3fc6"
        },
        "item": {
          "id": "42ef890b-3690-4147-87ef-269f9d10f764",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "a21f40e2-7dd3-425b-996d-b436db687c5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "09253a1f-fac1-48a0-a403-dc5b00374729",
        "cursor": {
          "ref": "2dadb5ac-e223-4e52-9077-b9865b8f1ee7",
          "length": 155,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "848f67a5-79cf-4069-b40d-9d8ef297ca4a"
        },
        "item": {
          "id": "09253a1f-fac1-48a0-a403-dc5b00374729",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "3b2c25c8-842d-4e12-b510-0cfd553a878f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 82,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "09253a1f-fac1-48a0-a403-dc5b00374729",
        "cursor": {
          "ref": "2dadb5ac-e223-4e52-9077-b9865b8f1ee7",
          "length": 155,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "848f67a5-79cf-4069-b40d-9d8ef297ca4a"
        },
        "item": {
          "id": "09253a1f-fac1-48a0-a403-dc5b00374729",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "3b2c25c8-842d-4e12-b510-0cfd553a878f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 82,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "3f8cf581-ad4a-4a39-bda1-bc035cc202b5",
        "cursor": {
          "ref": "ac49d8ff-097d-449f-a0ff-abc5104c008f",
          "length": 155,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "89afe0a4-c1c3-416a-a21e-1c62ee27d47b"
        },
        "item": {
          "id": "3f8cf581-ad4a-4a39-bda1-bc035cc202b5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8d615f47-31bd-40f2-a549-aa7a200abf9c",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "3f8cf581-ad4a-4a39-bda1-bc035cc202b5",
        "cursor": {
          "ref": "ac49d8ff-097d-449f-a0ff-abc5104c008f",
          "length": 155,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "89afe0a4-c1c3-416a-a21e-1c62ee27d47b"
        },
        "item": {
          "id": "3f8cf581-ad4a-4a39-bda1-bc035cc202b5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8d615f47-31bd-40f2-a549-aa7a200abf9c",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "1738f732-9fb2-479b-a8ce-081ccdba29b0",
        "cursor": {
          "ref": "23463f9b-3bd1-4373-92e0-02cd52e5ce33",
          "length": 155,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1ca169d1-c0c6-488a-b3a8-45fc28dde5cb"
        },
        "item": {
          "id": "1738f732-9fb2-479b-a8ce-081ccdba29b0",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "f3c983c2-d9e9-43ba-8271-fb747eb98233",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "1738f732-9fb2-479b-a8ce-081ccdba29b0",
        "cursor": {
          "ref": "23463f9b-3bd1-4373-92e0-02cd52e5ce33",
          "length": 155,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1ca169d1-c0c6-488a-b3a8-45fc28dde5cb"
        },
        "item": {
          "id": "1738f732-9fb2-479b-a8ce-081ccdba29b0",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "f3c983c2-d9e9-43ba-8271-fb747eb98233",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "11d98831-cd63-4a02-af51-4e53653f8872",
        "cursor": {
          "ref": "1d517c76-bf15-4a10-9d38-a108632f3f1c",
          "length": 155,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d5dfd301-ac23-4780-ade3-ab4231c7f257"
        },
        "item": {
          "id": "11d98831-cd63-4a02-af51-4e53653f8872",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "d452f990-0717-4846-8ace-0f816a791032",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "11d98831-cd63-4a02-af51-4e53653f8872",
        "cursor": {
          "ref": "1d517c76-bf15-4a10-9d38-a108632f3f1c",
          "length": 155,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d5dfd301-ac23-4780-ade3-ab4231c7f257"
        },
        "item": {
          "id": "11d98831-cd63-4a02-af51-4e53653f8872",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "d452f990-0717-4846-8ace-0f816a791032",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "c1a92dec-8dab-4163-b9d5-3d964c15b430",
        "cursor": {
          "ref": "662a1d1e-9b35-4c71-8373-ce1a8a8b2a84",
          "length": 155,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7f396e97-a933-4b01-81ea-1feaf329ea52"
        },
        "item": {
          "id": "c1a92dec-8dab-4163-b9d5-3d964c15b430",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "250b2215-3824-4347-9483-d51468e4f68e",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "c1a92dec-8dab-4163-b9d5-3d964c15b430",
        "cursor": {
          "ref": "662a1d1e-9b35-4c71-8373-ce1a8a8b2a84",
          "length": 155,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7f396e97-a933-4b01-81ea-1feaf329ea52"
        },
        "item": {
          "id": "c1a92dec-8dab-4163-b9d5-3d964c15b430",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "250b2215-3824-4347-9483-d51468e4f68e",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "d964582c-2581-4485-b39c-77fe1f5ce21f",
        "cursor": {
          "ref": "be8e330a-490c-4566-b2b5-60b18a36d72e",
          "length": 155,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "eded2dba-4ef0-418a-82c9-95a094827f10"
        },
        "item": {
          "id": "d964582c-2581-4485-b39c-77fe1f5ce21f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "97ce775b-82e6-4285-933d-d85ed0295e68",
          "status": "Created",
          "code": 201,
          "responseTime": 91,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "d964582c-2581-4485-b39c-77fe1f5ce21f",
        "cursor": {
          "ref": "be8e330a-490c-4566-b2b5-60b18a36d72e",
          "length": 155,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "eded2dba-4ef0-418a-82c9-95a094827f10"
        },
        "item": {
          "id": "d964582c-2581-4485-b39c-77fe1f5ce21f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "97ce775b-82e6-4285-933d-d85ed0295e68",
          "status": "Created",
          "code": 201,
          "responseTime": 91,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "0e85c3ad-11e9-4be7-b64b-90c03e1a39e6",
        "cursor": {
          "ref": "83842d9a-f8e3-4d5b-8083-415220d47d7e",
          "length": 155,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "387dd410-2c11-450e-910e-659125c9136c"
        },
        "item": {
          "id": "0e85c3ad-11e9-4be7-b64b-90c03e1a39e6",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "9a96503a-6fea-4f75-b407-3f4c8b9aed80",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "0e85c3ad-11e9-4be7-b64b-90c03e1a39e6",
        "cursor": {
          "ref": "83842d9a-f8e3-4d5b-8083-415220d47d7e",
          "length": 155,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "387dd410-2c11-450e-910e-659125c9136c"
        },
        "item": {
          "id": "0e85c3ad-11e9-4be7-b64b-90c03e1a39e6",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "9a96503a-6fea-4f75-b407-3f4c8b9aed80",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "ba5ec577-66f6-470f-9d98-de7cb483d806",
        "cursor": {
          "ref": "7b0ba8cc-b929-4417-bef4-647965c4f9ae",
          "length": 155,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "79846d36-c103-4b88-ba6b-0dca42064b54"
        },
        "item": {
          "id": "ba5ec577-66f6-470f-9d98-de7cb483d806",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "01b70810-4070-4787-95d4-8e55eec8c22c",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "ba5ec577-66f6-470f-9d98-de7cb483d806",
        "cursor": {
          "ref": "7b0ba8cc-b929-4417-bef4-647965c4f9ae",
          "length": 155,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "79846d36-c103-4b88-ba6b-0dca42064b54"
        },
        "item": {
          "id": "ba5ec577-66f6-470f-9d98-de7cb483d806",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "01b70810-4070-4787-95d4-8e55eec8c22c",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "9d01509b-d04b-4111-bfbe-4ede46e82caa",
        "cursor": {
          "ref": "3134868a-9575-4722-896c-35053d4c79cd",
          "length": 155,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7773c2c7-4534-4658-85d1-58c27f719a8a"
        },
        "item": {
          "id": "9d01509b-d04b-4111-bfbe-4ede46e82caa",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a91a2fd0-daa6-4164-9ecf-11bcebc7e9ec",
          "status": "Created",
          "code": 201,
          "responseTime": 100,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "9d01509b-d04b-4111-bfbe-4ede46e82caa",
        "cursor": {
          "ref": "3134868a-9575-4722-896c-35053d4c79cd",
          "length": 155,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7773c2c7-4534-4658-85d1-58c27f719a8a"
        },
        "item": {
          "id": "9d01509b-d04b-4111-bfbe-4ede46e82caa",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a91a2fd0-daa6-4164-9ecf-11bcebc7e9ec",
          "status": "Created",
          "code": 201,
          "responseTime": 100,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "2d4a3173-7738-4e30-92a2-23dd686e9163",
        "cursor": {
          "ref": "6f2b1d31-6698-43cf-9d95-aa52157ae5ad",
          "length": 155,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "798cfea7-104a-40ab-aec0-75bae63a1362"
        },
        "item": {
          "id": "2d4a3173-7738-4e30-92a2-23dd686e9163",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8045291a-0918-461c-9271-7e19488a9d65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "2d4a3173-7738-4e30-92a2-23dd686e9163",
        "cursor": {
          "ref": "6f2b1d31-6698-43cf-9d95-aa52157ae5ad",
          "length": 155,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "798cfea7-104a-40ab-aec0-75bae63a1362"
        },
        "item": {
          "id": "2d4a3173-7738-4e30-92a2-23dd686e9163",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8045291a-0918-461c-9271-7e19488a9d65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "ec876c4d-dff5-428b-a3ab-61c6a8d4feef",
        "cursor": {
          "ref": "5a4421cf-4bae-411e-b739-0c867fcb3c79",
          "length": 155,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d4b5df32-e0a5-4ecd-8410-6b70b31e30bd"
        },
        "item": {
          "id": "ec876c4d-dff5-428b-a3ab-61c6a8d4feef",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "619933fd-5cbe-4250-870d-7fb1aef7273d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "ec876c4d-dff5-428b-a3ab-61c6a8d4feef",
        "cursor": {
          "ref": "5a4421cf-4bae-411e-b739-0c867fcb3c79",
          "length": 155,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d4b5df32-e0a5-4ecd-8410-6b70b31e30bd"
        },
        "item": {
          "id": "ec876c4d-dff5-428b-a3ab-61c6a8d4feef",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "619933fd-5cbe-4250-870d-7fb1aef7273d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "d3b3b3d2-c0a2-44fb-83d0-f4a348617766",
        "cursor": {
          "ref": "4b5c7430-4e3c-423d-a563-20f3aebe20e8",
          "length": 155,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c4aea50c-bb7c-4707-bf14-e2cb832b04d2"
        },
        "item": {
          "id": "d3b3b3d2-c0a2-44fb-83d0-f4a348617766",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7d7a4469-026a-490a-9448-fb0561e27d58",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "d3b3b3d2-c0a2-44fb-83d0-f4a348617766",
        "cursor": {
          "ref": "4b5c7430-4e3c-423d-a563-20f3aebe20e8",
          "length": 155,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c4aea50c-bb7c-4707-bf14-e2cb832b04d2"
        },
        "item": {
          "id": "d3b3b3d2-c0a2-44fb-83d0-f4a348617766",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7d7a4469-026a-490a-9448-fb0561e27d58",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "73faf23b-738d-4125-93f1-85522e1ba4d6",
        "cursor": {
          "ref": "06a5597a-c87b-4d99-88f9-c90a7f6f9586",
          "length": 155,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9a063bae-a7c9-4ddf-b3ec-2fed6a80d6e0"
        },
        "item": {
          "id": "73faf23b-738d-4125-93f1-85522e1ba4d6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9169bef6-1efe-48d7-b738-1cb513e57afb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "73faf23b-738d-4125-93f1-85522e1ba4d6",
        "cursor": {
          "ref": "06a5597a-c87b-4d99-88f9-c90a7f6f9586",
          "length": 155,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9a063bae-a7c9-4ddf-b3ec-2fed6a80d6e0"
        },
        "item": {
          "id": "73faf23b-738d-4125-93f1-85522e1ba4d6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9169bef6-1efe-48d7-b738-1cb513e57afb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "03fdd00c-adbb-4404-bf4a-fde3b7cadfc4",
        "cursor": {
          "ref": "ceeed66c-a52a-4aca-9e9c-55a03861a60a",
          "length": 155,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e29ff915-99ff-44da-bbe3-50d65f77bdd6"
        },
        "item": {
          "id": "03fdd00c-adbb-4404-bf4a-fde3b7cadfc4",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "85fa35d3-d911-485e-a877-5b62c6632fa7",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "03fdd00c-adbb-4404-bf4a-fde3b7cadfc4",
        "cursor": {
          "ref": "ceeed66c-a52a-4aca-9e9c-55a03861a60a",
          "length": 155,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e29ff915-99ff-44da-bbe3-50d65f77bdd6"
        },
        "item": {
          "id": "03fdd00c-adbb-4404-bf4a-fde3b7cadfc4",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "85fa35d3-d911-485e-a877-5b62c6632fa7",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "9ea46b37-228b-438d-8440-7f52e257f3fa",
        "cursor": {
          "ref": "525b987a-d00e-4984-82f3-bfe967cda4c6",
          "length": 155,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "eb33e49a-f24a-4974-a821-11b78a385156"
        },
        "item": {
          "id": "9ea46b37-228b-438d-8440-7f52e257f3fa",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "1341dfff-781e-4c53-9b2e-7a7917c4861b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "9ea46b37-228b-438d-8440-7f52e257f3fa",
        "cursor": {
          "ref": "525b987a-d00e-4984-82f3-bfe967cda4c6",
          "length": 155,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "eb33e49a-f24a-4974-a821-11b78a385156"
        },
        "item": {
          "id": "9ea46b37-228b-438d-8440-7f52e257f3fa",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "1341dfff-781e-4c53-9b2e-7a7917c4861b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "429ebb04-30bc-4ce5-9487-3b8724213bc2",
        "cursor": {
          "ref": "be003f2d-e2ee-4417-ad4c-ea3b6ee5eca0",
          "length": 155,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d55605c5-6837-4131-a12b-cd54c7261333"
        },
        "item": {
          "id": "429ebb04-30bc-4ce5-9487-3b8724213bc2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7de33c29-acb3-4e52-9177-e45c4a0d6567",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "429ebb04-30bc-4ce5-9487-3b8724213bc2",
        "cursor": {
          "ref": "be003f2d-e2ee-4417-ad4c-ea3b6ee5eca0",
          "length": 155,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d55605c5-6837-4131-a12b-cd54c7261333"
        },
        "item": {
          "id": "429ebb04-30bc-4ce5-9487-3b8724213bc2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7de33c29-acb3-4e52-9177-e45c4a0d6567",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "efe3d21b-8b45-4e5e-9c8f-a0837bd90e85",
        "cursor": {
          "ref": "a7e967b6-2ac8-4bb2-9d75-5db4c0059fb8",
          "length": 155,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "14e2996a-7632-4dd0-807b-7c60efb41cd3"
        },
        "item": {
          "id": "efe3d21b-8b45-4e5e-9c8f-a0837bd90e85",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "18cf35cf-cdcf-4db1-b705-048452915bc4",
          "status": "Created",
          "code": 201,
          "responseTime": 91,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "efe3d21b-8b45-4e5e-9c8f-a0837bd90e85",
        "cursor": {
          "ref": "a7e967b6-2ac8-4bb2-9d75-5db4c0059fb8",
          "length": 155,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "14e2996a-7632-4dd0-807b-7c60efb41cd3"
        },
        "item": {
          "id": "efe3d21b-8b45-4e5e-9c8f-a0837bd90e85",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "18cf35cf-cdcf-4db1-b705-048452915bc4",
          "status": "Created",
          "code": 201,
          "responseTime": 91,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "de35bac3-ea30-43a6-95aa-74b2bb2dacdd",
        "cursor": {
          "ref": "354c3bdb-c5c6-4d88-accf-e858a8fbfff0",
          "length": 155,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6b99f00b-7868-401a-8b5e-576e084a8b3e"
        },
        "item": {
          "id": "de35bac3-ea30-43a6-95aa-74b2bb2dacdd",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bf9af09b-3d0a-42e7-8241-d4108f6c0767",
          "status": "Created",
          "code": 201,
          "responseTime": 91,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "de35bac3-ea30-43a6-95aa-74b2bb2dacdd",
        "cursor": {
          "ref": "354c3bdb-c5c6-4d88-accf-e858a8fbfff0",
          "length": 155,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6b99f00b-7868-401a-8b5e-576e084a8b3e"
        },
        "item": {
          "id": "de35bac3-ea30-43a6-95aa-74b2bb2dacdd",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bf9af09b-3d0a-42e7-8241-d4108f6c0767",
          "status": "Created",
          "code": 201,
          "responseTime": 91,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "c0c14fce-6057-4f68-9e9e-59f819687401",
        "cursor": {
          "ref": "a8ddd379-11ab-4c51-abe6-6904d64615d1",
          "length": 155,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "30897b2c-167e-4d89-ad75-cc483f9c4bfa"
        },
        "item": {
          "id": "c0c14fce-6057-4f68-9e9e-59f819687401",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "4678d4d9-9fb5-453b-a133-dd9f1ff1649c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "c0c14fce-6057-4f68-9e9e-59f819687401",
        "cursor": {
          "ref": "a8ddd379-11ab-4c51-abe6-6904d64615d1",
          "length": 155,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "30897b2c-167e-4d89-ad75-cc483f9c4bfa"
        },
        "item": {
          "id": "c0c14fce-6057-4f68-9e9e-59f819687401",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "4678d4d9-9fb5-453b-a133-dd9f1ff1649c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "4e0d2176-f2f9-4027-b977-e51e7498aeb6",
        "cursor": {
          "ref": "4f7eee01-1c40-43a8-99dc-c6969e2d876d",
          "length": 155,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f87c9879-6e1e-406d-b76f-cf2c6852467e"
        },
        "item": {
          "id": "4e0d2176-f2f9-4027-b977-e51e7498aeb6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "72bce20b-4f4a-414e-ab24-c83fd8145c14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "4e0d2176-f2f9-4027-b977-e51e7498aeb6",
        "cursor": {
          "ref": "4f7eee01-1c40-43a8-99dc-c6969e2d876d",
          "length": 155,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f87c9879-6e1e-406d-b76f-cf2c6852467e"
        },
        "item": {
          "id": "4e0d2176-f2f9-4027-b977-e51e7498aeb6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "72bce20b-4f4a-414e-ab24-c83fd8145c14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "1a1ae37d-b4f9-4840-84b7-542771f4f047",
        "cursor": {
          "ref": "550f8d06-e8f6-42e7-96da-47cbf8242ce4",
          "length": 155,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cf175aff-3d7f-40ed-bef2-b6575c9acbbc"
        },
        "item": {
          "id": "1a1ae37d-b4f9-4840-84b7-542771f4f047",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "04dcc38b-ecf9-434d-a9e1-8c885da788a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "1a1ae37d-b4f9-4840-84b7-542771f4f047",
        "cursor": {
          "ref": "550f8d06-e8f6-42e7-96da-47cbf8242ce4",
          "length": 155,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cf175aff-3d7f-40ed-bef2-b6575c9acbbc"
        },
        "item": {
          "id": "1a1ae37d-b4f9-4840-84b7-542771f4f047",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "04dcc38b-ecf9-434d-a9e1-8c885da788a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "1d921cab-12d3-41c4-9777-c7ba3c84d96e",
        "cursor": {
          "ref": "297c7f4f-6b5f-4313-a97d-c5bd3d2480a2",
          "length": 155,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a98e480c-1713-4d84-b80c-40d33b3ed919"
        },
        "item": {
          "id": "1d921cab-12d3-41c4-9777-c7ba3c84d96e",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "b43abe9e-b0a8-4ee5-bce2-7797dc0cd0f6",
          "status": "Created",
          "code": 201,
          "responseTime": 96,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "1d921cab-12d3-41c4-9777-c7ba3c84d96e",
        "cursor": {
          "ref": "297c7f4f-6b5f-4313-a97d-c5bd3d2480a2",
          "length": 155,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a98e480c-1713-4d84-b80c-40d33b3ed919"
        },
        "item": {
          "id": "1d921cab-12d3-41c4-9777-c7ba3c84d96e",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "b43abe9e-b0a8-4ee5-bce2-7797dc0cd0f6",
          "status": "Created",
          "code": 201,
          "responseTime": 96,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "158e8a57-108d-43fc-8910-1f40fc38ad79",
        "cursor": {
          "ref": "763c5120-9228-4db3-9df2-bec4ba5285e8",
          "length": 155,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8370e3d5-985f-4c81-8674-d0748c23e032"
        },
        "item": {
          "id": "158e8a57-108d-43fc-8910-1f40fc38ad79",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "33d1bf4c-de9f-417b-89a7-0f82807ebb08",
          "status": "Created",
          "code": 201,
          "responseTime": 91,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "158e8a57-108d-43fc-8910-1f40fc38ad79",
        "cursor": {
          "ref": "763c5120-9228-4db3-9df2-bec4ba5285e8",
          "length": 155,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8370e3d5-985f-4c81-8674-d0748c23e032"
        },
        "item": {
          "id": "158e8a57-108d-43fc-8910-1f40fc38ad79",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "33d1bf4c-de9f-417b-89a7-0f82807ebb08",
          "status": "Created",
          "code": 201,
          "responseTime": 91,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "48c49821-1887-491d-9eaa-2a7043a77c32",
        "cursor": {
          "ref": "80833b61-bd10-4239-aac8-3fc7c983e2b6",
          "length": 155,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "670c3362-b495-49e3-bf0d-ca17a5f5a555"
        },
        "item": {
          "id": "48c49821-1887-491d-9eaa-2a7043a77c32",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "28f3d1ab-20f6-4afc-834e-277dc9513cb0",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "48c49821-1887-491d-9eaa-2a7043a77c32",
        "cursor": {
          "ref": "80833b61-bd10-4239-aac8-3fc7c983e2b6",
          "length": 155,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "670c3362-b495-49e3-bf0d-ca17a5f5a555"
        },
        "item": {
          "id": "48c49821-1887-491d-9eaa-2a7043a77c32",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "28f3d1ab-20f6-4afc-834e-277dc9513cb0",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "14ad0b0d-0c2f-45bb-a4c8-c20a45e0179a",
        "cursor": {
          "ref": "b21b3ceb-31b8-404a-9915-8168cb01cb65",
          "length": 155,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a6a0b869-4803-445d-bced-3a1f69a17832"
        },
        "item": {
          "id": "14ad0b0d-0c2f-45bb-a4c8-c20a45e0179a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fd394346-e152-4433-a521-49349b7e3b82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "14ad0b0d-0c2f-45bb-a4c8-c20a45e0179a",
        "cursor": {
          "ref": "b21b3ceb-31b8-404a-9915-8168cb01cb65",
          "length": 155,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a6a0b869-4803-445d-bced-3a1f69a17832"
        },
        "item": {
          "id": "14ad0b0d-0c2f-45bb-a4c8-c20a45e0179a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fd394346-e152-4433-a521-49349b7e3b82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fea69976-0988-420e-b44c-44660705b251",
        "cursor": {
          "ref": "3d8f759d-c2de-4e48-804c-0516089ad3dc",
          "length": 155,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d6cf426b-733e-4e0c-9ff7-5402697eccd9"
        },
        "item": {
          "id": "fea69976-0988-420e-b44c-44660705b251",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4a04004d-e93f-4540-b8e7-ce7ddb8f3fd2",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "fea69976-0988-420e-b44c-44660705b251",
        "cursor": {
          "ref": "3d8f759d-c2de-4e48-804c-0516089ad3dc",
          "length": 155,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d6cf426b-733e-4e0c-9ff7-5402697eccd9"
        },
        "item": {
          "id": "fea69976-0988-420e-b44c-44660705b251",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4a04004d-e93f-4540-b8e7-ce7ddb8f3fd2",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "9b07a630-62fa-45cc-8903-55ffbf99cd0c",
        "cursor": {
          "ref": "799f41c3-2265-489f-8154-b4731e672dfb",
          "length": 155,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8b1ea4fc-9d42-40df-b46b-9c2719cc3dbd"
        },
        "item": {
          "id": "9b07a630-62fa-45cc-8903-55ffbf99cd0c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "77f7bd9f-f4a0-4c17-9dc6-9738b76a2815",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b07a630-62fa-45cc-8903-55ffbf99cd0c",
        "cursor": {
          "ref": "799f41c3-2265-489f-8154-b4731e672dfb",
          "length": 155,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8b1ea4fc-9d42-40df-b46b-9c2719cc3dbd"
        },
        "item": {
          "id": "9b07a630-62fa-45cc-8903-55ffbf99cd0c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "77f7bd9f-f4a0-4c17-9dc6-9738b76a2815",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c93a34-2330-46ef-b5df-d200165b602f",
        "cursor": {
          "ref": "fb3315f5-c108-4e10-8d91-074fc7be4a79",
          "length": 155,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f50bf62b-7c4c-44f7-ae58-f7131646c188"
        },
        "item": {
          "id": "c1c93a34-2330-46ef-b5df-d200165b602f",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "39679365-e405-4e48-bb9a-beef67b5979d",
          "status": "Created",
          "code": 201,
          "responseTime": 101,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c93a34-2330-46ef-b5df-d200165b602f",
        "cursor": {
          "ref": "fb3315f5-c108-4e10-8d91-074fc7be4a79",
          "length": 155,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f50bf62b-7c4c-44f7-ae58-f7131646c188"
        },
        "item": {
          "id": "c1c93a34-2330-46ef-b5df-d200165b602f",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "39679365-e405-4e48-bb9a-beef67b5979d",
          "status": "Created",
          "code": 201,
          "responseTime": 101,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bfa8d40-d2fd-4ce1-9ec2-917636748c8d",
        "cursor": {
          "ref": "fff0466e-ad79-40ad-9f35-7e9aa3ddd373",
          "length": 155,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a251bded-7a9f-4ed1-952a-a9d93e4b5f98"
        },
        "item": {
          "id": "5bfa8d40-d2fd-4ce1-9ec2-917636748c8d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e9106fcb-68c0-4bf8-b4d6-7208e1f9cbbc",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "5bfa8d40-d2fd-4ce1-9ec2-917636748c8d",
        "cursor": {
          "ref": "fff0466e-ad79-40ad-9f35-7e9aa3ddd373",
          "length": 155,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a251bded-7a9f-4ed1-952a-a9d93e4b5f98"
        },
        "item": {
          "id": "5bfa8d40-d2fd-4ce1-9ec2-917636748c8d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e9106fcb-68c0-4bf8-b4d6-7208e1f9cbbc",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "7d6fdb50-96a6-4e9b-82a0-765b02a10b31",
        "cursor": {
          "ref": "81eff5ca-fb47-4adb-8ba4-2448cd4eade2",
          "length": 155,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1900a1b3-e370-4151-8937-7d84b2ac254c"
        },
        "item": {
          "id": "7d6fdb50-96a6-4e9b-82a0-765b02a10b31",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "17ea2423-d541-4bb1-ae83-e9bc501ae85c",
          "status": "Created",
          "code": 201,
          "responseTime": 94,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6fdb50-96a6-4e9b-82a0-765b02a10b31",
        "cursor": {
          "ref": "81eff5ca-fb47-4adb-8ba4-2448cd4eade2",
          "length": 155,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1900a1b3-e370-4151-8937-7d84b2ac254c"
        },
        "item": {
          "id": "7d6fdb50-96a6-4e9b-82a0-765b02a10b31",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "17ea2423-d541-4bb1-ae83-e9bc501ae85c",
          "status": "Created",
          "code": 201,
          "responseTime": 94,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf6ca3cd-30e4-4c87-bf2e-de5cfc670678",
        "cursor": {
          "ref": "630d697d-3bb1-4a4b-9cb9-71dafbfeed1e",
          "length": 155,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7648dcd8-0ab4-4ad0-86c5-aced439b31b8"
        },
        "item": {
          "id": "bf6ca3cd-30e4-4c87-bf2e-de5cfc670678",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "dfcfab0f-b000-4af9-a1ca-816b0a6d977b",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf6ca3cd-30e4-4c87-bf2e-de5cfc670678",
        "cursor": {
          "ref": "630d697d-3bb1-4a4b-9cb9-71dafbfeed1e",
          "length": 155,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7648dcd8-0ab4-4ad0-86c5-aced439b31b8"
        },
        "item": {
          "id": "bf6ca3cd-30e4-4c87-bf2e-de5cfc670678",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "dfcfab0f-b000-4af9-a1ca-816b0a6d977b",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2179541-13c0-4c50-a78b-51bb7efb6c70",
        "cursor": {
          "ref": "b4539cfe-9e57-4aab-8bc0-c7f83b827819",
          "length": 155,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "336cc811-6b20-4dda-a690-e85275a00e10"
        },
        "item": {
          "id": "a2179541-13c0-4c50-a78b-51bb7efb6c70",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "029c90f1-0ae7-44ac-a4dc-720312040a43",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2179541-13c0-4c50-a78b-51bb7efb6c70",
        "cursor": {
          "ref": "b4539cfe-9e57-4aab-8bc0-c7f83b827819",
          "length": 155,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "336cc811-6b20-4dda-a690-e85275a00e10"
        },
        "item": {
          "id": "a2179541-13c0-4c50-a78b-51bb7efb6c70",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "029c90f1-0ae7-44ac-a4dc-720312040a43",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f992a63-a06e-4e33-88da-056eadc2ce87",
        "cursor": {
          "ref": "8b45b784-571c-4d28-a2ad-43b1d9ef3909",
          "length": 155,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1dd7bf0c-4748-4484-bdfc-7c6220602721"
        },
        "item": {
          "id": "9f992a63-a06e-4e33-88da-056eadc2ce87",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "7f53cbe6-f64a-4095-84bf-f2d238a3a5f8",
          "status": "Created",
          "code": 201,
          "responseTime": 94,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f992a63-a06e-4e33-88da-056eadc2ce87",
        "cursor": {
          "ref": "8b45b784-571c-4d28-a2ad-43b1d9ef3909",
          "length": 155,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1dd7bf0c-4748-4484-bdfc-7c6220602721"
        },
        "item": {
          "id": "9f992a63-a06e-4e33-88da-056eadc2ce87",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "7f53cbe6-f64a-4095-84bf-f2d238a3a5f8",
          "status": "Created",
          "code": 201,
          "responseTime": 94,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641f641b-afd1-4653-8701-afa3c7f56969",
        "cursor": {
          "ref": "41a64c23-311c-4a8b-9852-29dc33890d13",
          "length": 155,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5f97f2f2-a4bc-4ce6-bdc4-716dfdce0ff6"
        },
        "item": {
          "id": "641f641b-afd1-4653-8701-afa3c7f56969",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4ec4ab5d-0184-43b9-a5bb-ae90717ffa82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "641f641b-afd1-4653-8701-afa3c7f56969",
        "cursor": {
          "ref": "41a64c23-311c-4a8b-9852-29dc33890d13",
          "length": 155,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5f97f2f2-a4bc-4ce6-bdc4-716dfdce0ff6"
        },
        "item": {
          "id": "641f641b-afd1-4653-8701-afa3c7f56969",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4ec4ab5d-0184-43b9-a5bb-ae90717ffa82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d0e39668-daff-4b16-b28a-e3924370cce2",
        "cursor": {
          "ref": "9abdd29f-52a2-432b-9a57-08a04e4890cc",
          "length": 155,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "61eda96b-6526-4f24-84a4-c0c8c417630e"
        },
        "item": {
          "id": "d0e39668-daff-4b16-b28a-e3924370cce2",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "29367c68-0bdb-4f6d-852f-5b0ea11fca29",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 66,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "2ffd1263-808d-46d2-b55d-36263e5c486b",
        "cursor": {
          "ref": "f866a8b2-122c-4557-9101-1396c4063e1f",
          "length": 155,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9f06b4fe-3596-49c6-a972-9c3f4798b25e"
        },
        "item": {
          "id": "2ffd1263-808d-46d2-b55d-36263e5c486b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e3a6d4ee-7ac6-4da6-8c18-b524373580fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2ffd1263-808d-46d2-b55d-36263e5c486b",
        "cursor": {
          "ref": "f866a8b2-122c-4557-9101-1396c4063e1f",
          "length": 155,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9f06b4fe-3596-49c6-a972-9c3f4798b25e"
        },
        "item": {
          "id": "2ffd1263-808d-46d2-b55d-36263e5c486b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e3a6d4ee-7ac6-4da6-8c18-b524373580fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "5e84e342-5714-4aa1-8425-89a895f4a676",
        "cursor": {
          "ref": "4964c877-b587-4f07-94eb-2a78415696c3",
          "length": 155,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ccef6cdb-5305-4efb-8411-921c72d7968d"
        },
        "item": {
          "id": "5e84e342-5714-4aa1-8425-89a895f4a676",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ad02eb96-724b-434b-84c2-16f6acb7f181",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 56
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "462da929-6110-4163-a6bb-056b4e94b042",
        "cursor": {
          "ref": "1b915794-dd2e-4c65-b3a4-054301799c18",
          "length": 155,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "013bcbf2-8a0b-45d4-9fea-ac0e12f9ff8c"
        },
        "item": {
          "id": "462da929-6110-4163-a6bb-056b4e94b042",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ca6cdd04-dd89-47e9-a973-3e82bd925156",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 65
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "187f3ad8-62c4-4a9a-8bd7-3be6a72354d3",
        "cursor": {
          "ref": "2a3abd40-cfa5-4c88-b8dc-5b8f3e785922",
          "length": 155,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9b842e11-a5b3-46a9-9cf9-3b9414849373"
        },
        "item": {
          "id": "187f3ad8-62c4-4a9a-8bd7-3be6a72354d3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d7cf5e59-9fea-45ea-a1fb-cfa42c038e3d",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "c2769ab6-22c2-47c1-943e-7f8ef258dbae",
        "cursor": {
          "ref": "2a7f5ec8-1a5e-46b0-86fe-3167536829c3",
          "length": 155,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "88483393-81e7-4d8a-a2be-ac03a7c8a91e"
        },
        "item": {
          "id": "c2769ab6-22c2-47c1-943e-7f8ef258dbae",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "13be523c-92d8-412d-81d4-e75e916a2d90",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "ab3a2815-1d89-4edd-8360-dbbcd30929d6",
        "cursor": {
          "ref": "36f90602-70ea-4a32-9a68-aec00f295896",
          "length": 155,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e03e5592-98b9-41d2-8b50-4e57582e06c2"
        },
        "item": {
          "id": "ab3a2815-1d89-4edd-8360-dbbcd30929d6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "11c8dd57-c0be-4b18-964a-3d0b43d81e7a",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "efc00572-8e4e-4b68-86ca-0a7f135bd4c3",
        "cursor": {
          "ref": "c4faa33d-6da1-4bf8-8085-5869061624f0",
          "length": 155,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5127c5c8-3d61-4898-b721-1a5ec1631af7"
        },
        "item": {
          "id": "efc00572-8e4e-4b68-86ca-0a7f135bd4c3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0e39bf3c-d77d-4d2a-b9dd-29978c8c2fd7",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "b2675606-a0ec-422b-986b-d93372665ab0",
        "cursor": {
          "ref": "0182e045-379c-4bcb-97a6-98b521586d33",
          "length": 155,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "962e6ac4-4298-4c20-8a05-133aab0322f3"
        },
        "item": {
          "id": "b2675606-a0ec-422b-986b-d93372665ab0",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "49be0d64-2351-4e13-96e4-e6e29d79f87e",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "abdec9a4-c276-420e-a41a-930cb3c6e486",
        "cursor": {
          "ref": "721643b5-7126-4d80-a3ef-681e54037d77",
          "length": 155,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ce271405-c852-4e3e-a23f-d62efad7d5a5"
        },
        "item": {
          "id": "abdec9a4-c276-420e-a41a-930cb3c6e486",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "23eeda49-0369-49a1-8130-b485d46b94af",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "94688a6f-ffb9-4658-96d0-fc99a759b8fe",
        "cursor": {
          "ref": "cae8008d-dbfa-47ce-8d09-2a5dff6ea00e",
          "length": 155,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1baf64e4-a826-4e38-9478-71173b5e3007"
        },
        "item": {
          "id": "94688a6f-ffb9-4658-96d0-fc99a759b8fe",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ed3baad1-10ba-43ca-ba17-f80a43f756ca",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "69fd1a77-b092-40b0-afef-a2a04cb7f91a",
        "cursor": {
          "ref": "f9abf781-a87f-4c39-9993-d002e19fa764",
          "length": 155,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "43f9c0ef-ee2a-4134-bcfc-e1d3a365d95a"
        },
        "item": {
          "id": "69fd1a77-b092-40b0-afef-a2a04cb7f91a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0de3cf14-bc01-4a56-90e2-a4fd6e1311d5",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "2f6b8da7-3e71-4bd9-a45a-465f6929e38c",
        "cursor": {
          "ref": "ee94faeb-ab62-4af4-b74a-3342b10c785f",
          "length": 155,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "978f0986-ed75-4a0e-9e14-2b8c8bac641a"
        },
        "item": {
          "id": "2f6b8da7-3e71-4bd9-a45a-465f6929e38c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "af5d630d-9316-4934-a4fd-eaf118576032",
          "status": "OK",
          "code": 200,
          "responseTime": 226,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "bfe088f6-1255-48c5-a963-42a215729b81",
        "cursor": {
          "ref": "666fe088-7fd1-430c-9c97-21ca4d222658",
          "length": 155,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "e6d39f13-4c7a-4134-bf6e-9ee8205cb167"
        },
        "item": {
          "id": "bfe088f6-1255-48c5-a963-42a215729b81",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7483841f-baec-4681-a1eb-82dca227aa9b",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "fb1fa26c-30d9-4a5e-91a5-d4e28e449126",
        "cursor": {
          "ref": "959ff9eb-7be6-40ce-ba43-43227e1a6d01",
          "length": 155,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5142a746-1dde-4f20-9ba8-922c6dac1cc1"
        },
        "item": {
          "id": "fb1fa26c-30d9-4a5e-91a5-d4e28e449126",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "4d26a55f-210e-4d86-9bf0-46db6fa0bc2f",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "d4623b4f-4d78-4e48-a8c3-4719c7887be9",
        "cursor": {
          "ref": "ed0008c1-5f20-4b2b-af06-9c82ecac3cc8",
          "length": 155,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d7a8a94c-5578-42b3-b72e-6c27f4d7ef66"
        },
        "item": {
          "id": "d4623b4f-4d78-4e48-a8c3-4719c7887be9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "16495773-bed8-44c2-81b3-38ca7168091a",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "ac6bfb6e-2916-4cd9-9816-4eda1522d267",
        "cursor": {
          "ref": "c6db03d8-7995-45ee-9cf5-99ec36bbc7ac",
          "length": 155,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1db9bf53-8883-4515-a1b3-47d44fb6110b"
        },
        "item": {
          "id": "ac6bfb6e-2916-4cd9-9816-4eda1522d267",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "85234722-dc95-4755-aee6-b367c9168766",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f2d8c41c-f133-4b18-93ef-07bca5f61f0d",
        "cursor": {
          "ref": "559ba0fa-0ff9-4e05-90a5-c1b3d9abd723",
          "length": 155,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "87bcf6c5-d6ea-478f-b1c1-e5e49687ca90"
        },
        "item": {
          "id": "f2d8c41c-f133-4b18-93ef-07bca5f61f0d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c78a7b50-1931-49b9-ba5b-48aed5da3670",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "ec68f7a0-a30b-43b8-ada3-974d15c6310e",
        "cursor": {
          "ref": "834d7c67-a950-457c-bf69-4f08b878b30c",
          "length": 155,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b2a80cb2-56a5-4835-b8f7-879c27f1d544"
        },
        "item": {
          "id": "ec68f7a0-a30b-43b8-ada3-974d15c6310e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2b93e6a9-6ddf-4c2c-ba83-b21a5729c3b5",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7dde44dd-1f69-427d-968e-ffd737ccd79e",
        "cursor": {
          "ref": "b1bdb6a3-dd0a-40b9-857f-9db61ecfeb88",
          "length": 155,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a683bce3-8446-4aaa-a948-c4081a6d2c85"
        },
        "item": {
          "id": "7dde44dd-1f69-427d-968e-ffd737ccd79e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6bdbdd79-2438-4540-bf7e-20887cc4b3d1",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "4667d3ac-ce1f-4cb1-b8e8-953070d05b74",
        "cursor": {
          "ref": "5f963c9a-fed5-4abe-84a8-bcaf6da9d8f3",
          "length": 155,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2dde55d4-467d-41df-938a-2f9c53335491"
        },
        "item": {
          "id": "4667d3ac-ce1f-4cb1-b8e8-953070d05b74",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "83045b06-b3f7-40b1-bad6-16e4aa590dae",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b6b5e8fb-edc3-4578-ae5b-40d62909fc3f",
        "cursor": {
          "ref": "be69dfe7-feb9-4146-b613-683c20fdcef9",
          "length": 155,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b87100e8-0a45-4068-984c-1ff426fd48b7"
        },
        "item": {
          "id": "b6b5e8fb-edc3-4578-ae5b-40d62909fc3f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c0decc80-671f-4ff4-883c-fc1db894de0a",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "4e07a278-f445-40d2-b9f0-504c7587fab3",
        "cursor": {
          "ref": "5651e298-5423-4eb4-841a-f0f5dfcb29e6",
          "length": 155,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d9d7824d-7ea0-4cb9-a6ab-ae2ad37a5317"
        },
        "item": {
          "id": "4e07a278-f445-40d2-b9f0-504c7587fab3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7c1bb45f-34c9-432b-99e2-b99e762e8ffc",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "fff4f9d3-7500-4983-8d5e-b8b085c4d1c3",
        "cursor": {
          "ref": "56890da6-3484-4182-9b6a-85fea7fb1ab6",
          "length": 155,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "66994937-d785-4feb-8de6-9b1a74f6f684"
        },
        "item": {
          "id": "fff4f9d3-7500-4983-8d5e-b8b085c4d1c3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "136eb842-0cd6-4707-be9c-074cf3bc25de",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "295a9671-795a-43fe-907c-d7b01d4c5c79",
        "cursor": {
          "ref": "17e17b2a-03e6-4103-88d7-43bfeb3ff828",
          "length": 155,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "feabf212-26d0-4246-91f9-0d0cf70b3229"
        },
        "item": {
          "id": "295a9671-795a-43fe-907c-d7b01d4c5c79",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c4a11d3d-c6b2-4b01-af0b-4c8e6733e0c8",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "1b265bec-7c28-4f06-a26f-789fbacc451d",
        "cursor": {
          "ref": "295d2f00-4ae6-445e-a87a-640773cc4fa0",
          "length": 155,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c99837da-a6a5-4856-bb2a-2cec1b7c7db5"
        },
        "item": {
          "id": "1b265bec-7c28-4f06-a26f-789fbacc451d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "77e84838-5d91-4faf-9c99-38bce87b0c1f",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "a51004a4-5a48-4082-835d-02754a51b82f",
        "cursor": {
          "ref": "4e07c53d-0260-4287-82cf-5f39fb26bbbd",
          "length": 155,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "fb3379f1-9cd3-41a7-b1bc-616809eb9e8b"
        },
        "item": {
          "id": "a51004a4-5a48-4082-835d-02754a51b82f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f86d4826-e4ef-45a9-b11a-afb842d80bc0",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "454a8335-77bc-421c-ab3b-9cb80f2825d5",
        "cursor": {
          "ref": "64e45db6-ce6a-4798-97ba-1ff3305c96dd",
          "length": 155,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e4a79efb-44aa-4dd3-a75d-efe7ac966747"
        },
        "item": {
          "id": "454a8335-77bc-421c-ab3b-9cb80f2825d5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "360d512f-b018-405d-8a6f-c915dc5b8722",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "71719439-11ed-4557-a30a-311378ffe430",
        "cursor": {
          "ref": "8ba7fd94-f871-4a8f-9e65-c646a8501567",
          "length": 155,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "76c49912-d37c-45c4-b44d-8df6db22eb49"
        },
        "item": {
          "id": "71719439-11ed-4557-a30a-311378ffe430",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a0dfd546-54ae-4de2-914b-14fcf3310b17",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "90793922-399d-4626-8ef2-6d347c6cfa08",
        "cursor": {
          "ref": "32e3a5c5-29aa-4e05-9ef8-e6b4e3bcc71a",
          "length": 155,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "eb316c99-f9ba-41da-988b-3e0b5c541653"
        },
        "item": {
          "id": "90793922-399d-4626-8ef2-6d347c6cfa08",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6ed920c8-09e5-4cd4-b39b-aeb68e1c2c2d",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "997c6a37-c044-46d7-bd77-edadc3b01398",
        "cursor": {
          "ref": "56a6681d-5243-41e1-a88f-8b09aaef98db",
          "length": 155,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3604d99c-0821-498e-bf2b-c8d04403908f"
        },
        "item": {
          "id": "997c6a37-c044-46d7-bd77-edadc3b01398",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "63b02eba-9f08-48b2-84ff-e0e76264578f",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "4394f58c-0138-4540-9b09-985c72b176ea",
        "cursor": {
          "ref": "75c748ae-8789-45bc-ae12-95760f84b23a",
          "length": 155,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b35604cd-670a-490d-a8c6-086b33affe97"
        },
        "item": {
          "id": "4394f58c-0138-4540-9b09-985c72b176ea",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "15fbeb0c-be84-4bc4-bd54-509214f852e9",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "af88492b-1fc4-40ce-baff-1d18f61e0382",
        "cursor": {
          "ref": "6b049a7f-4c4b-486e-a7dd-df4b29504593",
          "length": 155,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "8b18a1bb-8f08-4345-94d9-1f4eda646ba4"
        },
        "item": {
          "id": "af88492b-1fc4-40ce-baff-1d18f61e0382",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c5863680-0da2-4f11-bc1b-7cc4065f271a",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "26041251-b9ad-4bb6-b5e5-d5da5439f068",
        "cursor": {
          "ref": "b3e80b50-d487-4c78-9929-e6922a57a117",
          "length": 155,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3fbd424d-fa8d-4840-b258-7527cc5b9f52"
        },
        "item": {
          "id": "26041251-b9ad-4bb6-b5e5-d5da5439f068",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "bbeef00e-6139-4543-9e52-1fd596649c1b",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "78cc6d3e-7eb5-4d39-a441-39414f8afc71",
        "cursor": {
          "ref": "d5908124-eb19-42ef-933b-6e4dbe36584f",
          "length": 155,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "04e97e32-b758-4b43-9890-ac8396f5ac4a"
        },
        "item": {
          "id": "78cc6d3e-7eb5-4d39-a441-39414f8afc71",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "32f0ae4d-6976-499b-a0ad-cdcae9764105",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "e338c98d-8f98-43e5-adfc-ec71543f900c",
        "cursor": {
          "ref": "a15b6188-e3a6-4194-a8c1-2384c27b44d0",
          "length": 155,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6c2f8b36-5778-4cc1-9f86-fffd9f0c3401"
        },
        "item": {
          "id": "e338c98d-8f98-43e5-adfc-ec71543f900c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "168019d5-bf2c-4c56-9146-84912a8f210d",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "0b632e8d-a462-44f5-a6d7-8e2be9938016",
        "cursor": {
          "ref": "b3633476-a3fe-4cbd-a492-9c9b552ab647",
          "length": 155,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2276d2af-c382-4fe4-9062-a00fd6a96de4"
        },
        "item": {
          "id": "0b632e8d-a462-44f5-a6d7-8e2be9938016",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "37d94730-c1ef-45dd-b490-a55ba17b36db",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "0ee68e90-dacd-40bb-ba50-3509da1d3fe5",
        "cursor": {
          "ref": "13ee9f3f-f27a-49c8-bb72-313a27e52ede",
          "length": 155,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "05584980-2784-4391-af49-de7d62eb6ea6"
        },
        "item": {
          "id": "0ee68e90-dacd-40bb-ba50-3509da1d3fe5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "91806f46-e92e-471e-987c-27a6dd6c716b",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "b89d4ec4-316a-4cd2-9961-b5555e3f7bde",
        "cursor": {
          "ref": "f74ed081-cee5-4935-863a-27c0e261ea8b",
          "length": 155,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "610a70ce-9fb8-46d6-986c-66dd61795261"
        },
        "item": {
          "id": "b89d4ec4-316a-4cd2-9961-b5555e3f7bde",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fe091029-9c4a-4a3b-a51e-3048f16972ae",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "7f77dd6a-5016-4579-9fcc-6710830aaa56",
        "cursor": {
          "ref": "025404f1-c9bc-4bf3-8bcc-18b23a2b5131",
          "length": 155,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6f4ca7b6-406e-4aca-9b94-12d46199f026"
        },
        "item": {
          "id": "7f77dd6a-5016-4579-9fcc-6710830aaa56",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "74f6e3eb-c162-47fc-9e84-8f2140aa73e3",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "be3673a1-04ff-4670-a057-77ae16e99f90",
        "cursor": {
          "ref": "92e0d9fa-b5e0-424c-afa3-7967513483dc",
          "length": 155,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1a97b16e-f165-4d37-9cdb-710704fb79e2"
        },
        "item": {
          "id": "be3673a1-04ff-4670-a057-77ae16e99f90",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a4a6cc84-b049-41f4-bbb0-a554535d0407",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "75be87bd-b22f-4c99-9e6b-20ede79c58eb",
        "cursor": {
          "ref": "3061b3e8-c60c-4ab0-bfe5-1ed2f699c327",
          "length": 155,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "687181d8-dcb3-4023-a602-12c63505685e"
        },
        "item": {
          "id": "75be87bd-b22f-4c99-9e6b-20ede79c58eb",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5fc2c243-99a9-436c-9618-adea624983d6",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "17c17172-5da7-4407-87c2-463f1e9a1ec9",
        "cursor": {
          "ref": "ed9bd5f5-8965-4e70-af7d-fe056a6174fd",
          "length": 155,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5826bd4e-02f0-4b7a-a15d-9ec7bb3e75af"
        },
        "item": {
          "id": "17c17172-5da7-4407-87c2-463f1e9a1ec9",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "beb4227c-19dc-4282-9ba8-10b26d8f4632",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "06f6711a-cd35-4aa9-9151-b3f24ae0f3e2",
        "cursor": {
          "ref": "c95328f3-5179-4776-b9ac-3787f26c0389",
          "length": 155,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e45dcd4b-7d84-40b1-a80c-fba719ec344d"
        },
        "item": {
          "id": "06f6711a-cd35-4aa9-9151-b3f24ae0f3e2",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e6e0a30e-077a-4700-a6f1-7085428760a7",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "28166362-1875-474a-9f15-c4fce439750e",
        "cursor": {
          "ref": "79f036ba-74d8-4f0e-b09a-ee501541ccf5",
          "length": 155,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "326fca4b-ac3f-4f9c-9ad5-13fa77ae7df9"
        },
        "item": {
          "id": "28166362-1875-474a-9f15-c4fce439750e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b2bf7016-6b8d-4996-a932-fbaef0ee56f3",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "de6cccf8-b8ea-404a-b881-44e7b705f44d",
        "cursor": {
          "ref": "7abeefd1-a97c-436a-bcb2-804445082e7a",
          "length": 155,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "28d50d13-ce3c-4ff1-914b-033849e5896e"
        },
        "item": {
          "id": "de6cccf8-b8ea-404a-b881-44e7b705f44d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "84f6f908-f286-4b20-9f2d-8ca9ed9dfacb",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "53eb2c97-e238-40ab-b0af-6baa1c6c506d",
        "cursor": {
          "ref": "c7e8a3ee-b9a0-48c0-85e4-64336be22577",
          "length": 155,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "512bc37f-d0bf-4120-b4d6-82c3ff828988"
        },
        "item": {
          "id": "53eb2c97-e238-40ab-b0af-6baa1c6c506d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "620d8d52-9b88-41e8-a8a9-b95a7c8ff4bd",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "855b16dd-259d-4cae-a671-13765ada2fb8",
        "cursor": {
          "ref": "bbcff3ea-186f-4ab8-a6c7-e11b01cdb688",
          "length": 155,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "10327fc5-fae6-4ed9-af4e-d8034fbe1dc4"
        },
        "item": {
          "id": "855b16dd-259d-4cae-a671-13765ada2fb8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "50617492-8ff1-4db8-8e0d-e9c1714c6bb7",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "e65b4b5b-8d99-4348-8d6c-918f031e2c20",
        "cursor": {
          "ref": "85dc02f8-b8c3-4814-af04-9df74a5233d1",
          "length": 155,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e99c79c2-32ef-40fa-881d-ca305af015ac"
        },
        "item": {
          "id": "e65b4b5b-8d99-4348-8d6c-918f031e2c20",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1a29ec15-f814-4de5-93a3-777dd5e175f6",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "41a9cb4e-3241-4b88-94e0-787508005f14",
        "cursor": {
          "ref": "50c0b835-22bf-4679-9fa1-ee0846ec487b",
          "length": 155,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "228ec110-5671-440a-a2bc-a419f30c0d3f"
        },
        "item": {
          "id": "41a9cb4e-3241-4b88-94e0-787508005f14",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e221857a-48c8-4d36-8421-38053f6b9823",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "87545c45-9930-4b99-acb3-fda275620b08",
        "cursor": {
          "ref": "66f9f8a7-3e19-4ab6-8e9f-449d07d8683c",
          "length": 155,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4aa2eda4-581d-41ae-ad0e-7a41f1550f0e"
        },
        "item": {
          "id": "87545c45-9930-4b99-acb3-fda275620b08",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "923a67f5-e5f9-4459-8ce0-6d9b9baf8a2c",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "f09d7c69-2cef-4806-b3d5-8c2f259a1ee5",
        "cursor": {
          "ref": "95468518-3857-4aaa-8be8-b1298445dce0",
          "length": 155,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d41d11e8-ad9d-4fcc-aeeb-a2041062db2d"
        },
        "item": {
          "id": "f09d7c69-2cef-4806-b3d5-8c2f259a1ee5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e1405484-9f48-4190-857b-db73e3a45112",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "35d67994-d54c-4c8f-9e53-08f6421237c4",
        "cursor": {
          "ref": "c33dce58-f358-4ba6-aa97-262296d0f804",
          "length": 155,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "315cbba2-78ca-44a0-ad9c-15c122e135ba"
        },
        "item": {
          "id": "35d67994-d54c-4c8f-9e53-08f6421237c4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1038fc39-070b-4f3a-83c9-8987be9b709c",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "0eed7d08-4d45-4d2f-99f0-e5df11e91411",
        "cursor": {
          "ref": "25b6ee85-85ce-42cf-abb0-e084fecfe869",
          "length": 155,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4de1bb04-461a-4323-9cea-6511d56a9d3e"
        },
        "item": {
          "id": "0eed7d08-4d45-4d2f-99f0-e5df11e91411",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a323ac5c-a7b5-4a6f-a580-a37c07e95974",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "075cb7d7-7dad-4a5f-9101-b2cb97a5bd7f",
        "cursor": {
          "ref": "978743c5-14e3-4569-88b5-481ce0b5a535",
          "length": 155,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "36913e2e-a625-444f-9f8e-e00e0b1dc0c0"
        },
        "item": {
          "id": "075cb7d7-7dad-4a5f-9101-b2cb97a5bd7f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "07bdabe2-c20e-4b8b-b3b1-ec3337170156",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "92723353-7649-4019-ab4e-1555d2bed793",
        "cursor": {
          "ref": "aecb9c72-8f7c-4058-ad6a-c96b9a6f298f",
          "length": 155,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2688b1ad-8d2f-4069-a163-a1bfdc1f09eb"
        },
        "item": {
          "id": "92723353-7649-4019-ab4e-1555d2bed793",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e7e38022-ae4e-4b4a-a09d-e39572b560e0",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "63056f8d-cd87-4b2d-a486-7098a27b0da3",
        "cursor": {
          "ref": "ac52e4b6-4a69-409b-a16f-705409aab6c3",
          "length": 155,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c7c1dc4c-5a15-424b-bc88-b522cb4f9be8"
        },
        "item": {
          "id": "63056f8d-cd87-4b2d-a486-7098a27b0da3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f6baac46-b2fe-4245-a00c-081e933bd64b",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "a3df8340-4a4b-4462-a6b4-a0d92f457fb7",
        "cursor": {
          "ref": "e11cb0ba-fe58-461a-9205-65990596124b",
          "length": 155,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3c5c84e0-0cb2-4b17-968a-697229335a15"
        },
        "item": {
          "id": "a3df8340-4a4b-4462-a6b4-a0d92f457fb7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f8261835-54df-4395-b6de-ad4f98ac42c7",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:106)"
            }
          }
        ]
      },
      {
        "id": "dbacd9b1-8916-4136-b62a-d7bf0aa13893",
        "cursor": {
          "ref": "df09a86b-6545-4a9a-b0b6-b1435eba5f0d",
          "length": 155,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3e66a56d-93ec-42d4-b345-b5a0bbfa8341"
        },
        "item": {
          "id": "dbacd9b1-8916-4136-b62a-d7bf0aa13893",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d5603a90-c1a1-45df-9a9d-3da6c4e334cd",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "f105a58b-a872-456f-a58b-5f2638d2cb7e",
        "cursor": {
          "ref": "c8a11d7c-0843-4d45-97ce-5cc213d33b1c",
          "length": 155,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c39a16c2-effd-4b71-bf7c-5cc642b988a6"
        },
        "item": {
          "id": "f105a58b-a872-456f-a58b-5f2638d2cb7e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "77a1fe5e-d474-4fd4-9617-3248a1528157",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "43e81173-0497-40c4-b94f-1512d09df070",
        "cursor": {
          "ref": "064381bc-38de-43e1-b218-6308e8a651aa",
          "length": 155,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2661d354-2318-4abc-9437-be6c33088e5a"
        },
        "item": {
          "id": "43e81173-0497-40c4-b94f-1512d09df070",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9856f508-ae33-47ca-8b62-3b628fcb3ec9",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "a07af8c3-87c8-46b6-8f07-e89f549f755a",
        "cursor": {
          "ref": "e7c3d050-bc67-4c0e-bef9-a2e5f49bb2e7",
          "length": 155,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fb579f39-6656-48ff-956b-9528f9c2a5ee"
        },
        "item": {
          "id": "a07af8c3-87c8-46b6-8f07-e89f549f755a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a9c381d1-e77a-4cea-ab4d-2b0c4f683b0b",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "7d6deddb-7935-4e7f-9323-402285d9ec71",
        "cursor": {
          "ref": "b4d5af6d-fa90-4fe3-ab8e-3b22ed586893",
          "length": 155,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ade956f5-5052-4399-8deb-b6ba20c4f4c3"
        },
        "item": {
          "id": "7d6deddb-7935-4e7f-9323-402285d9ec71",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3e018cc1-0504-4172-b382-b15af02d7041",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "e70d7519-4b21-435d-b46e-98cdc2b6e4a6",
        "cursor": {
          "ref": "c779995b-9588-4c09-8c63-ae476021e0dc",
          "length": 155,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7260eb25-c369-4dac-9463-b9e0e0a93c23"
        },
        "item": {
          "id": "e70d7519-4b21-435d-b46e-98cdc2b6e4a6",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "507556e4-c38a-4319-b30f-809dfbfa7685",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "5c7c3b87-f215-42e3-bd3b-3246939bf738",
        "cursor": {
          "ref": "31f43ccd-21f8-4427-84be-4e64ed4f8ace",
          "length": 155,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0774f21e-e391-4583-83fa-36d8ac5e43d9"
        },
        "item": {
          "id": "5c7c3b87-f215-42e3-bd3b-3246939bf738",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d6ef63bd-880c-4e13-b17b-d7f457e83bb4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "0bcf657e-e4d4-4e1d-9ba5-81c1d6419ecf",
        "cursor": {
          "ref": "61f7a971-94ce-4c4d-a70b-ab50ec7ec18d",
          "length": 155,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6fa0cf8f-6f6e-4409-b690-8a0c53c26646"
        },
        "item": {
          "id": "0bcf657e-e4d4-4e1d-9ba5-81c1d6419ecf",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e0f4f9e2-ec8c-478a-bbc3-1ce0d2d71139",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "4ec6aba8-6950-4dc3-b8d8-c7cf7697259e",
        "cursor": {
          "ref": "26697b21-3a21-4c21-834c-f23059e5a693",
          "length": 155,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a7673faa-61fd-428b-ba92-06db9bd4cb59"
        },
        "item": {
          "id": "4ec6aba8-6950-4dc3-b8d8-c7cf7697259e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "71380a6d-577a-4ac8-a252-309eff8f8de9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "867945d0-ecfa-43c4-a5c8-98c649ca531a",
        "cursor": {
          "ref": "654bc47c-e103-41e1-9e78-adaa2dc68c6a",
          "length": 155,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1a51c011-78d0-41cb-8858-ef0e8dfb3a84"
        },
        "item": {
          "id": "867945d0-ecfa-43c4-a5c8-98c649ca531a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0ebdedfb-0d9b-4ddc-ba28-e8d966b939bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "4d958569-461c-4823-b748-e8f8684ba454",
        "cursor": {
          "ref": "e6466c64-b4f2-4e23-9342-8acdf243ca61",
          "length": 155,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7064f14a-4dae-4047-80e1-463a8c3cc8f7"
        },
        "item": {
          "id": "4d958569-461c-4823-b748-e8f8684ba454",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "eac943b8-3ebd-4695-b29b-d4295025b89f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "511b9511-6ce8-4aec-83b9-6f9ba34c0e35",
        "cursor": {
          "ref": "58a4491e-0b7c-4283-b6a2-61a2e05bd073",
          "length": 155,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "05e2d50c-0b81-43b0-a77d-cd992e6b2279"
        },
        "item": {
          "id": "511b9511-6ce8-4aec-83b9-6f9ba34c0e35",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8fdf1e99-0ca6-4144-a65b-22ef7ea086f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "e94401c3-38f2-4959-b2a8-ea9fc6489a04",
        "cursor": {
          "ref": "81f86157-99b7-4c24-96cb-d7aa0688b62e",
          "length": 155,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "80589a8f-1085-4c4f-b504-6449b59963dc"
        },
        "item": {
          "id": "e94401c3-38f2-4959-b2a8-ea9fc6489a04",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ad619e71-4454-4920-8bc6-59d7a155cbc2",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "f56cdc31-6c41-4d99-b0b1-58a952476890",
        "cursor": {
          "ref": "4ce76d85-8a7e-4b4c-878b-d71ee0356982",
          "length": 155,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "73821e0b-a949-496f-8b2f-4be8eb7be58d"
        },
        "item": {
          "id": "f56cdc31-6c41-4d99-b0b1-58a952476890",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3f94d4d6-6222-427a-a42b-ea64afd04510",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "d087ec59-3e8c-48a9-9350-8623918cd06c",
        "cursor": {
          "ref": "53eed46d-b64c-4125-9fa3-0c3e13789eb5",
          "length": 155,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "99aa575d-463a-48b4-8740-417ce329401a"
        },
        "item": {
          "id": "d087ec59-3e8c-48a9-9350-8623918cd06c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ae9a6a9a-33e1-4570-ae16-6c57f3034d78",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "4a552355-9f88-41d9-ba5c-fc004f061679",
        "cursor": {
          "ref": "3a72f1a3-7bc3-461f-a934-406ee5db1a2d",
          "length": 155,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "37f6b244-c73f-4615-845c-2e9cd2908b4b"
        },
        "item": {
          "id": "4a552355-9f88-41d9-ba5c-fc004f061679",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "33a16d5b-3392-4608-bca0-7e9cd6c1e3a1",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "99b66f4b-63ed-4cfa-918c-3f65241744fd",
        "cursor": {
          "ref": "2ffffa7c-993e-4458-bdc3-510311758019",
          "length": 155,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "76ac303a-fb8a-41d7-a573-7558da43d06e"
        },
        "item": {
          "id": "99b66f4b-63ed-4cfa-918c-3f65241744fd",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "48ecedf3-2e78-4aa6-a038-a64d694d0f64",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "65c7c647-cec6-4e2f-a076-fb8a7bc872a9",
        "cursor": {
          "ref": "1eb5541e-97cd-40aa-a634-7f9a6dfc7f66",
          "length": 155,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c510ef67-8cf4-4cf8-8b63-c22fb43ae348"
        },
        "item": {
          "id": "65c7c647-cec6-4e2f-a076-fb8a7bc872a9",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3efdae95-47eb-4779-9641-d1179deacdae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 89,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "eb47095a-b361-407f-a0db-6f2121a56fe6",
        "cursor": {
          "ref": "1119a21d-777b-44f8-9266-ce4bf12b1659",
          "length": 155,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f8959744-d1f3-435a-a620-fb1c4ac82579"
        },
        "item": {
          "id": "eb47095a-b361-407f-a0db-6f2121a56fe6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b9d1b69d-12d7-4da1-85b1-e62c1e0dc5e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "005a6f10-d14f-4e64-ac7c-fb145d4e224a",
        "cursor": {
          "ref": "eaa10d4e-0aac-43e9-97c3-f1808e73449c",
          "length": 155,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7c94bfd7-61e8-488f-bd5e-19d1e27bfdb6"
        },
        "item": {
          "id": "005a6f10-d14f-4e64-ac7c-fb145d4e224a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d3f1163f-1a51-43ea-bed9-c09adfd525ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "bcd0a8b0-484f-4069-a226-f6aae19b6d2a",
        "cursor": {
          "ref": "0c4b8a11-803a-408c-8f0c-a273c22073a8",
          "length": 155,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e0e44010-86cc-4638-8d19-a67bd13c1439"
        },
        "item": {
          "id": "bcd0a8b0-484f-4069-a226-f6aae19b6d2a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9e3342c1-f648-4536-b575-d37b03faa2eb",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "f9b2e02c-6fe8-4e78-b47c-94980552fe6a",
        "cursor": {
          "ref": "abe15ed5-e0e1-4f2b-add1-8d5ef121d602",
          "length": 155,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "001f9c34-ed2b-4bba-b8a8-480c507a97ce"
        },
        "item": {
          "id": "f9b2e02c-6fe8-4e78-b47c-94980552fe6a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f12aedc4-184b-4919-9614-ab5c63458ac1",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "7ab2f0fe-912a-41de-938a-733528370537",
        "cursor": {
          "ref": "1f315ff7-d1b4-4b71-a3f9-5eef03c964f5",
          "length": 155,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "38f739da-c26e-450e-aced-57b4e9b98c64"
        },
        "item": {
          "id": "7ab2f0fe-912a-41de-938a-733528370537",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0f970b23-21f7-4fc1-8e47-7b3d6026a71d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "f9ca565a-640b-4191-92e3-7f4e4a30cd16",
        "cursor": {
          "ref": "0ba88222-3a99-45f4-ab9a-364970bdf573",
          "length": 155,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "aae63558-d40c-484a-b633-2f0d7aa47419"
        },
        "item": {
          "id": "f9ca565a-640b-4191-92e3-7f4e4a30cd16",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "bd57fed5-a5c5-469d-8578-64805e4b0adf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "525ee087-d96d-4972-8912-c9bab69caaed",
        "cursor": {
          "ref": "4a8be0cf-12b3-4883-9ff9-156d05a3fb74",
          "length": 155,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f1370d35-49d7-4753-b197-758d7e15a1d1"
        },
        "item": {
          "id": "525ee087-d96d-4972-8912-c9bab69caaed",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3d4d1daf-b536-4c8f-843c-269eb6565bdb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "c1959f51-6c3f-4103-b958-4b39b1d06135",
        "cursor": {
          "ref": "31f12f44-ada5-4c3a-bad5-01b717829455",
          "length": 155,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "759985f4-a9c2-41f1-a5d5-050ba3d7579b"
        },
        "item": {
          "id": "c1959f51-6c3f-4103-b958-4b39b1d06135",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2b172ddd-663e-453f-9c0a-45ae481cb4f3",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "1cbda1dd-50d4-440b-a88d-44892635fd53",
        "cursor": {
          "ref": "be9617e7-ab8f-477d-b5c2-d4c14b22a36a",
          "length": 155,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "eabf134f-a1c8-4882-b0d1-ac82a0997bdc"
        },
        "item": {
          "id": "1cbda1dd-50d4-440b-a88d-44892635fd53",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2cf6cf92-77f3-4503-ad63-94c0c6d3665d",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "dda7c8db-53be-4106-a64b-3d8f875274e2",
        "cursor": {
          "ref": "eaa4730d-3d4f-4c98-88f5-7ffcdf7321ff",
          "length": 155,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f219ab82-5ca8-4631-991b-5979eeab4e44"
        },
        "item": {
          "id": "dda7c8db-53be-4106-a64b-3d8f875274e2",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0ae24110-bbbe-4852-891d-a01854cc33f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "778bc5dd-0fdd-4815-b728-d8ffc8f648ba",
        "cursor": {
          "ref": "8de0c4bb-8a1c-4009-9946-45646565dea8",
          "length": 155,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "681edee7-b783-4e30-995d-0d4aa125cf03"
        },
        "item": {
          "id": "778bc5dd-0fdd-4815-b728-d8ffc8f648ba",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "34f19ae2-3ee1-4ce7-a4a2-57608d5f5249",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "79416e37-c6a4-4928-90c3-5cc7ba06a75a",
        "cursor": {
          "ref": "48e9feb1-e920-484c-9664-ec609653cd7b",
          "length": 155,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "025a666a-643c-45a8-92ea-a5fc019442ee"
        },
        "item": {
          "id": "79416e37-c6a4-4928-90c3-5cc7ba06a75a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "09381d58-a4cd-4fe6-9f6c-570f72931fa7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "b383e54c-7fd3-4ad6-9847-a7dcb809713e",
        "cursor": {
          "ref": "2cdaedce-cdb5-4112-8a98-da1d80ce534b",
          "length": 155,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "39150d92-431b-4cca-bb50-07883f25a237"
        },
        "item": {
          "id": "b383e54c-7fd3-4ad6-9847-a7dcb809713e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "827f3e8d-6a1c-485a-be71-7b8a581ecff0",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "653bf753-3527-4c34-8106-531643c2f9b0",
        "cursor": {
          "ref": "6c5079b7-1c1f-4893-b52b-4ade33c68c44",
          "length": 155,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2d3d98dc-dcae-4980-a443-972f87854bd6"
        },
        "item": {
          "id": "653bf753-3527-4c34-8106-531643c2f9b0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "fe26e24f-682f-412e-ab61-a8fc5e59d83b",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "ae9a2116-4104-4517-a15b-4053bbcecc85",
        "cursor": {
          "ref": "1b3f39a4-ac1d-467d-8d8f-92d5a9f8bb2d",
          "length": 155,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2fe26f8a-2804-44d9-8ba0-be94d1dea719"
        },
        "item": {
          "id": "ae9a2116-4104-4517-a15b-4053bbcecc85",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d1abfa7a-46cc-4d33-a01d-6de81844a21c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "c4ef490e-1097-49a5-af56-3f99bf41ed26",
        "cursor": {
          "ref": "88edfcfd-196f-4383-9192-ec2a702ef215",
          "length": 155,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "766fe37b-20cf-407d-8f04-d05f8c626ddb"
        },
        "item": {
          "id": "c4ef490e-1097-49a5-af56-3f99bf41ed26",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d12ec020-93b0-4dc9-92f7-d0f452f5f31f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "f578734c-508e-4c73-9b9e-18ca69d9e2ba",
        "cursor": {
          "ref": "a530fcfd-4c57-44d1-a912-00bf81cab975",
          "length": 155,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "80257d80-5e59-4003-b2e8-c81eef902ffe"
        },
        "item": {
          "id": "f578734c-508e-4c73-9b9e-18ca69d9e2ba",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6259b18d-c671-4465-8200-e813a8c20912",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "6fd3f31b-14fc-4a98-84ff-dfbf4da90524",
        "cursor": {
          "ref": "dc8647b6-d804-4cfe-8c65-209a493be89b",
          "length": 155,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3f0ae960-6eed-4081-bd97-426fde5e2a20"
        },
        "item": {
          "id": "6fd3f31b-14fc-4a98-84ff-dfbf4da90524",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c781fee7-ee7a-4017-9246-8d7f22e47c48",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "f3d5ede2-2cda-417a-8998-29c443169295",
        "cursor": {
          "ref": "c4287aeb-ac7b-418d-a674-a38fd9c50767",
          "length": 155,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "667b1cc4-66dc-44f4-ba7d-485bbf7b66c1"
        },
        "item": {
          "id": "f3d5ede2-2cda-417a-8998-29c443169295",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "276e9c55-149f-4093-96df-02e895e0efa1",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "875b9e6e-7823-40f4-9a49-5a61d2319880",
        "cursor": {
          "ref": "2f06263b-d2b0-4561-8af1-eb3e71ffa981",
          "length": 155,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8890b390-2150-408b-b9c8-bb4b75feff99"
        },
        "item": {
          "id": "875b9e6e-7823-40f4-9a49-5a61d2319880",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "39309b3b-13b5-4cdf-a94b-6b9223be3370",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "bb2263bc-d93c-4e57-85c8-c4c683086c4c",
        "cursor": {
          "ref": "28154735-3f4e-4771-85ba-ab22bdb9c29c",
          "length": 155,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "89aa2b5b-962c-4d13-b39d-6f280775b627"
        },
        "item": {
          "id": "bb2263bc-d93c-4e57-85c8-c4c683086c4c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "587552ff-75c4-415e-b881-a464c46ca1f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "8c6bedc6-37a5-44d9-a9eb-d206f3e91c75",
        "cursor": {
          "ref": "35cf7b74-6e68-47ab-abc8-6b02c7cc2808",
          "length": 155,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f414c0ec-9697-46cb-9be3-1a4b6dc3cd1a"
        },
        "item": {
          "id": "8c6bedc6-37a5-44d9-a9eb-d206f3e91c75",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "a89a4407-4d19-424a-bf26-a876a6713af7",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "e9f8d6c8-075a-4e87-854d-2ad6f5e86c59",
        "cursor": {
          "ref": "57973e62-be43-4d0e-9637-837a4c036d45",
          "length": 155,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "bca47756-a83c-48fc-9430-0e676abd0d89"
        },
        "item": {
          "id": "e9f8d6c8-075a-4e87-854d-2ad6f5e86c59",
          "name": "credentials_verify"
        },
        "response": {
          "id": "72f92468-2a89-4d01-89f4-c3384731448f",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d087a4-2c0d-484c-942f-4cd658b4b41c",
        "cursor": {
          "ref": "acc8b6aa-e085-48e0-a000-7cbe1e90e035",
          "length": 155,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "303c11e8-62ad-45f0-937f-206e5b53bd6e"
        },
        "item": {
          "id": "27d087a4-2c0d-484c-942f-4cd658b4b41c",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "6164fd3f-0ca5-4c29-9f50-288dd3a24f1c",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53aa5176-0c4c-40cb-b16d-8bb5c4d95a31",
        "cursor": {
          "ref": "ba4cacb2-c8cb-40ba-a00c-6dda6abdf06d",
          "length": 155,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d4d9c227-a7cb-48fc-9bc6-fb80a9b348db"
        },
        "item": {
          "id": "53aa5176-0c4c-40cb-b16d-8bb5c4d95a31",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9b0f13ca-ca84-4c8f-9e93-160d2a394432",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57726345-87fa-4122-a12a-352025647003",
        "cursor": {
          "ref": "8de80ca7-1ab6-4120-8f96-caae226d9bf5",
          "length": 155,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "cee2856e-2ee7-4477-8825-8edd7893d3c4"
        },
        "item": {
          "id": "57726345-87fa-4122-a12a-352025647003",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "55c52857-869b-4cbb-94e2-73fbafcc3805",
          "status": "Not Found",
          "code": 404,
          "responseTime": 70,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "57726345-87fa-4122-a12a-352025647003",
        "cursor": {
          "ref": "8de80ca7-1ab6-4120-8f96-caae226d9bf5",
          "length": 155,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "cee2856e-2ee7-4477-8825-8edd7893d3c4"
        },
        "item": {
          "id": "57726345-87fa-4122-a12a-352025647003",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "55c52857-869b-4cbb-94e2-73fbafcc3805",
          "status": "Not Found",
          "code": 404,
          "responseTime": 70,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "bb339861-a950-4330-ba09-5cfe060c2638",
        "cursor": {
          "ref": "956f7b54-062b-44dd-81ff-3d8651dd2cdf",
          "length": 155,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9220fd41-a1eb-48f7-bcbb-9ed797b3760d"
        },
        "item": {
          "id": "bb339861-a950-4330-ba09-5cfe060c2638",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "4c8a5469-1dfe-4863-9de0-284284434326",
          "status": "Not Found",
          "code": 404,
          "responseTime": 68,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "9703b859-d054-48d0-b945-d2b1178c9b53",
        "cursor": {
          "ref": "4f3885f2-b37d-4fba-a698-aca5e1bf8bb6",
          "length": 155,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6202982c-fca0-43cc-b0ad-d6ba2df1601e"
        },
        "item": {
          "id": "9703b859-d054-48d0-b945-d2b1178c9b53",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d6fc3433-4deb-4e25-bcfa-a5e8fa0216e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "9703b859-d054-48d0-b945-d2b1178c9b53",
        "cursor": {
          "ref": "4f3885f2-b37d-4fba-a698-aca5e1bf8bb6",
          "length": 155,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6202982c-fca0-43cc-b0ad-d6ba2df1601e"
        },
        "item": {
          "id": "9703b859-d054-48d0-b945-d2b1178c9b53",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d6fc3433-4deb-4e25-bcfa-a5e8fa0216e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "e91f063a-394b-4ffd-8714-96e1e8cfde23",
        "cursor": {
          "ref": "859b19df-1225-4802-b14c-07d7833af240",
          "length": 155,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0d92fb3e-42ad-4640-b68c-9694f257f7b0"
        },
        "item": {
          "id": "e91f063a-394b-4ffd-8714-96e1e8cfde23",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "9f3845e3-f779-4541-a526-192df57e6b8e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "698cee95-6641-4e61-9523-e14a7a389f24",
        "cursor": {
          "ref": "3186c0eb-fe5b-41ec-8807-5e227e844e38",
          "length": 155,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cfdfe22e-3de2-4239-b1a9-f6533cbd9115"
        },
        "item": {
          "id": "698cee95-6641-4e61-9523-e14a7a389f24",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "bdeb7433-cafa-4fb1-b120-fcfcda796804",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "698cee95-6641-4e61-9523-e14a7a389f24",
        "cursor": {
          "ref": "3186c0eb-fe5b-41ec-8807-5e227e844e38",
          "length": 155,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cfdfe22e-3de2-4239-b1a9-f6533cbd9115"
        },
        "item": {
          "id": "698cee95-6641-4e61-9523-e14a7a389f24",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "bdeb7433-cafa-4fb1-b120-fcfcda796804",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "3a060cb4-dfc8-4c48-8320-b2aa9d3f4902",
        "cursor": {
          "ref": "61a8f985-d6aa-4461-8ad0-067300819e97",
          "length": 155,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c0cc6f09-2623-4126-a0c3-7b8080e53aac"
        },
        "item": {
          "id": "3a060cb4-dfc8-4c48-8320-b2aa9d3f4902",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "deceb784-2800-4695-83b0-af4524ac0156",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      }
    ]
  }
}