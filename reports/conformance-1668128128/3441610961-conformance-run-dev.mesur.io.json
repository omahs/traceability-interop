{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "05636752-b8c7-497e-9e9a-4db1799357c9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "49a15df3-5ce0-4310-be78-fe2c06d39562",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7e6901da-0dcc-4d27-ab2c-28229297adc6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3ef5fc81-b9d1-4a28-b8f3-f5adf75d6f01"
                }
              }
            ]
          },
          {
            "id": "41e62949-0b70-4064-a011-dd1f4240c05b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2be08afc-00b5-4553-babe-0c05b1c9916c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "19269d9b-0477-45db-ab8d-4988ab469668"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fc721b51-4582-4cc3-896e-0d11cb7b4f33",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d59e95dd-36e1-43d8-a934-8b389d225185",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b512774b-37d1-4cde-884b-ad0c3e85b6d5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5555c99d-8407-4327-9c5e-814046750abc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6bf55aab-726f-48bc-b7aa-a0257cd3be2b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e4109531-e136-4c96-8ab1-94ee294b2d73",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "33f18bca-469a-41a1-b7bb-9ce4ef4cb7f0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8c7e3fbc-1a4a-4da4-a90e-ab738ecf52a8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5f0f498a-1ecf-4cfc-926d-30ecc87ab322"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9cd4cbc7-bbe5-459b-a638-86af9008d9ab",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "86d82273-af2b-4f1f-b180-7a0510655613"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2d5328f-d5b3-4aaf-889b-2fdc0819df06",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cdef21d0-e30e-45a1-aeee-82eac78a5171"
            }
          }
        ]
      },
      {
        "id": "210fc4ea-a729-4996-933e-f75ca35bb077",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "6be7ab25-5848-4d84-8cdd-e19e3d644716",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9c65362e-7664-459d-a27f-a963ff2f3406",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "89cdf2ee-4833-4c76-9ce4-60114dd8ae57",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49162c25-c2a9-48f6-af79-a33b3c504de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5996cc2-72af-49ed-acd0-8c4b59310dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa0113f-b69b-4e0c-aaef-9749407b4611",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da6556c-d101-4908-93b3-79880ef7bb10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8038531b-8033-4a58-9d66-b35a2ab72230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f65b17-3d17-490b-9a3f-cdb5c587ad6c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "309dcb5d-e8e3-4caf-8072-4ef0e0f80fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36b0280e-9559-45d3-ba18-1b668e2b6a99"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ce814829-7b2d-4892-ad35-5b437e0bb6de",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5e3b5957-4f9e-4a03-b19a-564140beb0df",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbff4f8-9890-4f14-b472-cf1a899684e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ace59f2b-c0e7-47be-8f44-e4d4d2cfe7f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a588f69-8eba-4306-98ba-74da8a95694e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3909a8-f7f3-48f7-9772-c00606598699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9d1083-3eae-4dfd-8410-6cd7f95e0ba1",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac5d0b3-a56c-4427-9597-f6253ab537fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8e2a162-ad3e-46c5-ae0c-c50db8328ee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8273d9-d7bf-4272-ad37-40feab1f3aba",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "a1123ecc-6f8c-4861-85d1-996ecb025e09"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6d033e9b-9a83-4bc7-ae74-988e84a61de2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "be3e9731-3875-4f82-b86b-3a5812d65654",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "921e926f-3af7-49b1-b6ae-7798aea665e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "bba7936b-fab1-4990-bc7d-7b3ddd0e16df"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a01e891-be8c-4db6-be49-dc94d2c30ee2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "27b6fd89-cc40-42ad-ac68-564424f6cd2d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "edb1f8e4-615a-469b-8d49-679b65d8e5f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2da47b21-61a9-41b9-93ed-9d4e67c4f767"
            }
          }
        ]
      },
      {
        "id": "5217412a-7561-430b-8626-2597e74917bd",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "03da30a6-4166-4ab2-b818-3ae2a01c18e2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fc1d78a5-805e-4799-8605-e9597c52445e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ccaf2836-808b-45bf-a5a0-1a82c6899db3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0750f8a7-11c3-4a1e-a492-2d78d99fdb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e94f31-b5f5-4f7a-b3f4-4d7baf2402cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e88ba2-8f4b-4e61-998f-60c3a067bfde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ae4e121-02d0-445a-9c95-d3596cb471cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ed7e9c-3bce-43e3-a346-897063c930e0",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5fa38bb-a2dc-4b28-97f6-4bccd5750c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7345a388-e63a-4b46-a47b-bf3a3287ea97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78070278-313b-4df2-9c31-25ddb9a0b604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6226355-a728-424a-accf-5e193bd28428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45caa9d8-c420-440a-9b61-c54c3c863ff5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69f3f0e-a996-4b22-8a47-1f13a144954c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95b174f8-9a98-469d-bdf1-328ae72b3d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d70967b-f0e9-4148-a985-e07e0c414c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86921be2-c55b-49fd-9871-302d628d1f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc892bb-684f-41dd-abfb-877e2a99b5bc",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a483f62e-93ef-48eb-a2d6-053466978376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c60d82-738d-47e1-a541-125ddb0dd535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb26167c-f6eb-43c5-a22d-be2ded3c0b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d5a1ecd-0e6c-40a4-9aa6-5468f1f1966a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e08f62-95d0-4160-912e-9cd23ddbe08d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49a71d6-f8ec-411f-b553-d4a6d14b99eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a03a0fbb-0eef-40b8-9798-a30c92e394eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68b1705-4a45-420a-8fa9-2f5f543e0319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c162e26c-7930-4a2f-87b7-a79283d61092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6352288-2e5a-4e9f-8b8d-451786f59738",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e59778-db9f-4483-a5f3-e3ba793dba59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "994ab2c0-a828-453f-b641-3c442af848c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df6181b-ee5e-484e-a188-463ebc61789f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e79f79fe-5357-4aa7-8444-6ad58c84775b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339e4930-ea75-49b5-9286-97054211c075",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb41b3b4-ff3c-41a3-bd63-fc64518079c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22b48e72-ddb8-46c0-acee-0e654a10c97e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4313b46a-b64c-4077-bc4c-e07780d59e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "415ec8d7-3d03-4865-94af-c6726f27530c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0de82c-f592-404f-a679-96bae8dba8c2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4386b0da-ff09-4cc0-ad87-023f77c5b7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba75f044-a9e2-453b-bc94-0dea98820da2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa778ec8-9d5d-414b-8f0e-99925f60d1c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0be52e7a-e0ae-4ad8-8b12-b9accfa334ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d664b58b-04f8-4741-a304-32b2aba64782",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe509cc-cb71-4ad5-92fd-66c17c9e3358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41ebf986-fee7-432d-a68c-e5c5de5284cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37edc67e-a597-46cf-87a0-4c81ba8c0b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "554e6554-f0c4-4035-9764-6f774a44f0b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a5b5e1-001a-4f24-ad40-c92800c125ef",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec80dfef-5d50-4819-9cd3-fb6d2791a6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ededd958-49ec-448e-887c-9c2df6c565b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53768409-a6e5-4c02-8acd-850ebd473193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47658aa5-1001-4c00-8b6b-0a5ce91adeee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a3faf4-4545-4c5e-b7c0-be7cbd08f7e2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fcfd49a-afe3-47e8-b497-84cd20c79936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "284288f1-fb31-4f5d-bb4f-0762f100f4f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df237bd8-7a20-49cb-891b-8eb4b3480e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50036805-a616-43f3-a3cf-f9f32a8c452d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00259094-f06f-4767-8ef2-9809a55ba487",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019215c7-b6d0-49bc-be88-cd8a1fe5c193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c2e7746-db89-4427-ab6e-753254f14ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05bf4288-8502-4ecb-935a-205b9fecfb28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2757a0b6-04ce-4bf5-8d80-9335bf0e0203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c56677-8dc7-4ca0-80fd-f5c6fb531d6e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a728af75-b6a5-49f5-8395-ce7d7d2eb812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc07d23-d877-4e52-a079-102d70213ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cbf7ed4-0d50-4935-9e8d-664de944252f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1c9fdb8-0985-4be0-a5c6-1a5200fbf69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb8eb14-0d2e-409e-88fb-1d4ada85258a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0249d3-df8a-44d4-9d94-aa11070d37cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb33fc7e-9696-4b5a-b9be-a0e6a6c58e4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a128c066-8428-4e39-b4a6-b33a06db945c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f51af804-283e-4ba9-9b5d-777fb2c6f137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64edbe09-4514-46f7-86d1-00a9e44d912f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace61f3f-724a-499f-a417-3fa3071a0e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5774d89-02ef-4cf3-ab26-696090ea1f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75633f95-ef9d-4b49-bab2-1cf817446112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84ad0fae-ee5d-4c00-a05d-8a5b02d0c96d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f158405d-3943-4ab1-8638-3d762f29c873",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "247e4b03-4846-45a5-85f6-92dea8619606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30559452-ccf1-4555-be2a-905788d619dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0271c5c9-9367-4799-86db-5c572856b0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5889aefd-904c-4f4f-af28-3d3893811a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d58051ad-0cca-49e2-9d7c-d00431646e06",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f18ff7-8d2d-4262-a13c-9fa9c647c34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2294c8-6e84-4a7e-8cdb-8afaed6a9043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02de7bc3-0c67-4d3c-8c4c-1d39e7eeb10f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2acfcf4a-cf0b-427d-a8a0-12df2f4af954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d497ea55-3e41-4a9c-afa0-a60b13df85b1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06069f0f-a10f-462b-80ef-b4adb46a7c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7598af3-dc04-430f-a00f-66288d50bab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4354ac68-0379-4f91-a127-c69eb2c4f4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "709b6c05-1928-41e3-9f4c-e2ce8bb8fd8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "199a73d7-8c52-41c6-b1c4-5180c5069c6b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad08d22-9853-4ed9-bc5f-371da628e26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2707167a-3e8d-44fa-96cb-49974955f92d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17bef42-dd4d-4fbc-8edb-ab352c2b68e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df9c4605-1abd-43b8-960f-cb5856c36998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd0d368a-5944-45ce-b0b0-b5c569a92272",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2630df-72fc-405d-9523-31604f1e7998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc6725a-cd4a-454d-b19b-d785e6462762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f70cdc7-be91-4772-a788-4922b2d81e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e4464b7-cd45-4b0b-98df-c483e113dcec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32842820-ad16-434d-a2b3-f2470cb7f86a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad004de6-409c-48de-b419-ad5ec1cb0c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c07e7701-8f19-4e78-a6cb-f7f576ed97e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ffbdb0-8252-449e-949d-cf0cee4dfd39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce8b65e7-3592-4cca-ac0a-c8b76cd7d8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dee0142-9de6-4072-8616-df690abc4d75",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a68b8b-ab08-4a82-90ed-c9dd0a61032a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29ea7d19-8355-46e1-9065-acddeac67df6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1054d1a1-2815-46c2-a3d4-8d4777551198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "23b18d76-66f0-4fbc-b321-cd2563a91f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "529f0b1b-c14c-4dc0-9f85-1f3dae630aad",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4606b188-b531-40ed-a694-704aa899d88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2244eb33-e2d8-4c2b-855e-6c9f46162d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494228d7-f12b-458f-bbc2-0b3c81892e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "24fcc1b5-b15f-4b19-a446-7e33e11852e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dbbb2f6-efe4-49ba-b969-b79234add83e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "383792cc-fa12-43ca-96e6-7adb608d0ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8479b5e4-535c-485c-9c26-1ec87cd82401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6723da-cad6-4058-85ad-9890113c0e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a74259-b374-40f6-9b30-118dbf515785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65321a7d-9c89-459e-a811-d35a763dc317",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ce0789-63c0-4f17-b6c2-73cfc1db4b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9aaee46-6801-4139-a9cb-fcb7cfa0fd4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e08e8d-adb5-4b59-a607-1266b3644a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c9ce7f-27bc-47a1-8687-ba6c35a59348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b752bacb-78cf-4d84-a01b-869fa8635744",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d44673-cde3-4ed1-abfa-91128e346d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f07989c3-696c-495e-bd71-0effcdfd75a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd791f26-8e1d-495f-84ad-d0b5e973408a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d07eef8-38e4-4349-a042-8a95ee01b1ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7167844c-cd68-411d-90f6-732007880134",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8489b526-27fe-4f51-a4f0-bce5b518c4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b35772b-0f31-4f18-be0b-194934cd7079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5550b5ca-cc25-4aea-82c0-5e759f636beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5aaf14b-dd43-41c8-85dd-9287c3bf08d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4e8683-798a-4515-934b-f66d54f51af5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "974a3c93-a13b-4ea4-8112-687dd0f2c164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea8e08f-346e-4450-9934-fec7f2659729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4773a699-1243-4d15-9d00-16b1623cbe28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "03fa5e47-470e-466b-85b9-b75da5242e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae51c0d7-bfff-45f4-a94f-9322bd6102f7",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b621c6d-5289-4e91-99ec-86aaa34fdbfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce27da9-b74f-4f4c-9ae2-a2d7f535ec8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805aca42-c2fc-4ea1-8c3c-d42c131e870f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "220d0a5d-76e7-4f57-bb7b-966afde75380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00eb8e7e-d02d-4937-86c7-279327bbe4c2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bcb9dc-33ba-4406-9fee-228eef757e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b474ba-455b-47ae-baf1-522886b959ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912fdc05-aced-4903-9b3b-9d9cd5f65646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "114bcc3c-86a3-4d1b-bfff-695cd34744b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789ab8a2-9c32-4cb8-997c-2f00cdc077f2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5105e705-dc97-4e0a-bd2b-d3c1a794d69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4fc47f1-82dc-46b2-8fc6-8cff42d4ae95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18602fbc-72cc-4730-b640-2f16e60c8183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "858cbbaa-3aef-4a98-8819-31e595e84e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9c933d-3fb5-42bb-bedd-ea5ffcd6c3f9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7c82d7-4cc8-44c7-bdf6-0681e231a5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb4db98b-36c5-4c6f-a565-e55f7b39ddd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f734781-85dc-499e-b340-b107a0da611a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ac6a4b2-157d-4941-a15d-179906cbc6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0d01e4-fe93-4f30-9081-bed89016672e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd995b6-5950-4b75-89ea-ca96f3d1fa6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c84e8deb-891e-446b-8c35-6d793096dea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c2bad2-a818-457c-b4e3-d4125d33f328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9ab431c-1071-4d98-acfb-359d4b5eca88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f722a15-7eea-46f0-ba9a-4eee847b79c2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a376f2-5934-43c1-9bba-315b65ca7d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a624b779-071e-4854-8212-aa759280b91e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd44e8dd-8532-4180-aff0-6775d7ad8732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7d02417-3305-46fa-adfb-5aa4246f30bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091dceae-18e1-4fc1-b0c0-d1d9e12e6f4d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "885ee65d-87d4-403b-98cb-b49f82606bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b581dffd-f953-4912-8a85-8152bcb90ada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282094ea-b1a1-4157-b194-2eae7e93a5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8f764b4d-4a81-4782-a573-24fbc062df7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccbedc84-ec32-4eae-bcd7-f80439093139",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec1b805-e449-4504-8dab-46320efd475f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7b47080-e103-4874-a9f1-d33a3bc0e1da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b1382c-2938-46be-aa88-126657175de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21be1b2b-b164-4e25-b936-d34f8e2862b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72506901-d061-487e-83be-40f5a2d12b15",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e256a51-1d34-472a-93dd-080bae586e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c95c09-2ab7-4171-b3d8-ddf1d08f1f75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73e1e40-ce6b-4411-8c7e-bd66801f4266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a50f8c6c-fed9-46c5-b527-a80ba67406c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cc4612-f5d0-41a7-995c-f9bfc160ccd2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48280ce-5271-4695-8e92-71d587c6f7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80166750-4200-4521-8da7-2380eb2a9987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99189851-aee0-4c7d-b937-09dee06fe4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "264aed78-79ce-451a-a90c-4755ced24540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a1d044-a1ad-4688-a0da-ef1679e8ffdf",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1664f49a-93fd-47c2-8bab-e0278a00b5d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f585023b-d54d-4ac4-84a8-4c4d9fa56f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1751d444-a86b-4e83-af20-9947ccb42053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c384151f-f505-4345-9aa8-92ca8e2f72b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a5f653-6eb3-4064-b554-136768d97159",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b7f504-c878-48ed-af4d-17c3138edae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2155aa3-ae14-47e0-b85a-23d5d79b503e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8e9cc7-a0db-4371-bf9d-ddf18834eea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfc88e52-441f-44a0-9d94-c7ef4140f3ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d187343f-eb79-48f1-bebc-ad3f4bc23d14",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d35505-7fa1-41ce-8e53-ed417ae41d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bda95c93-f693-4e66-aeef-fd63d1dbc725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b7a29f-61c6-445e-83fe-34d63e9e0d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5269baf5-b40b-451e-b027-310ee453cd68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1144e673-bf67-485e-ae2c-e4e91526f62b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b79bc438-485a-4ec9-b706-b8e1acf5fec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bacf143-596b-4027-9560-c2334c48a125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b867b79a-a118-438d-9aa2-f4a69e0af2d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a00717d4-f58b-466b-8cf3-1c0ee93fc0f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9c99eb-3b2c-4675-bc1f-3a2d3b16454e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e0a7f0-f0d1-45c1-aa46-4680ccf2b017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43d8319c-eeb9-41e3-86d2-847b25487294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b341b86-af7f-4447-b97c-0317eb97985a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8bff075-fe97-4d96-b709-ca6f8fcbb032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4519a2-d76f-4b3d-b70e-425bab163d20",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "671b48a9-4fc7-4673-97a3-33e2447160df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "884893ee-6764-495a-ba08-18acd1c8668d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb9b1c9-1d7d-45b9-8f01-d9e25d11c6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "dae18d87-f3bc-431d-9d50-842821596e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08062c9e-2988-4bd9-9943-170aabc6f911",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66994dfc-07a2-4ece-a251-a7a89f7ddf19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c119b3c5-c16e-4440-bd9b-756d3733b64f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7115422c-476e-47c3-bd23-4763693909cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d858380-7f64-42cc-86a3-f4ddb4aa3ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1bb8b4-e0b9-4fde-aa32-afa7b3bd8f6a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4024f4-0f0b-438c-a657-d24082fd3609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b6a6ee0-b960-42e9-8824-a48df4c2eb45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97cb682d-f2b4-4889-b2ba-30234e573ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44c866d0-07b7-4fe0-bbf3-dd29f63f0a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5174db2-1336-4ae9-857e-c439db094521",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2621449-d1d9-42f6-803a-0f3469473215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28103c7c-348d-431b-b528-61580827732f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b25de7-9bdc-41d9-b41b-6ec57324e9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3822f59-2400-4831-9dd0-e100584ffe06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a30938-4bbc-407f-a4cf-beebe092b6bc",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be73db60-8d82-4598-85d6-68adfa4bdc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83967cdd-b0ed-485f-8c6e-bfd1f544a79a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98fd8f36-d713-4d1d-a909-5909932f509b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa5934f-ed77-4209-96cb-a38be27d3dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e74cd72d-a38f-4b19-8758-636c6050cf4c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "959c15b2-3eeb-40bf-ba05-7f135f292d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aff9c96c-7a9a-4044-9e27-414a8fa7660d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886cc3e8-a36c-49b3-b506-f13d9244c690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "09a11069-0014-49f2-89c3-6be4033e333d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968e8dc7-a060-4033-af4b-b6b2bd58d569",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90592c4-9a68-4882-9675-1c92442a61cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "929ad8d5-12a2-468c-864c-d861a4870b88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f207fa65-da27-4c37-b314-dcea3b4eac80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9506d0c-72d2-4b73-919b-6b2181170451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f851f28-1bb8-4c35-b664-6062421ee241",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d601d18-1d90-4ee8-88e6-946a5c265bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc8cd69-5e97-43bf-a0ad-c38d9bf965fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3efa444-6158-4564-8783-780ba50ae1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6222b79-cab5-4a91-9001-f57b27c679d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a392930a-dcf6-4db0-9a85-46f9e50034df",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b625b4b-70f6-4b47-a3fa-4059b265df28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c924f7d-02e6-4b10-ae07-db974ea9f87d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924a12d4-7763-4ae4-96db-402a9d8d59e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c98411b7-b939-4e51-9c48-635593ee6438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e8a5e5-e2af-4412-8ed1-f3b4cc706e81",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c51808-0104-4470-96de-df9b0b7a2e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed91440e-ac48-4deb-bc12-8757a0c1a9e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495e207a-fb7f-470d-b745-651b6609098e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ced16ac2-bc63-4e44-a19a-b875d3639a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b99421-7c01-4b54-9cc4-f18dbf96da0d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66015a51-2bde-4cd3-bc4a-7e224f19b6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45eae165-026f-4d65-a27e-432a6c739e50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b33ce8b-86f4-4589-91d5-6438a9c38395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc3f138e-fc05-4496-99db-19cd78319ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2995a7b6-e8c9-44da-9f23-bc8ee4cd443e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa91a6be-6323-46fd-ab22-e7cc96916113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05e84783-36a8-49be-beed-d2862985725d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb05df4-515c-4834-ae1a-050694e80fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "55d3881c-6061-471a-b07f-584360307d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8c4144-13a3-4b88-b52f-b77cc22d8318",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ee4944-1c00-4d08-9c49-c83fcdd627d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d9528d-8ffd-4e7b-8fb2-1fadd3fe1a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e345dc21-c70e-4a11-a21d-a4f781ff052b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5a13873a-0b16-497c-a2b7-2622032fb558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c01321-67dc-4f25-8d93-ab95f7092459",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11b43a9-3137-436c-b260-fc6d04f5e6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "563b6659-2477-44b1-af0e-b7367659c86f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add45d5b-fa38-495d-a0d4-efe47c538515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "083404bf-acec-4969-86f1-5b635b707e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b632819b-ea75-44f4-b427-15cb0a7bf06a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4a51c9-bb81-4590-a685-23a8e8fb3b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f9b75b-445f-4a27-ae32-17f9a2e493d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8280153-d068-46f2-b666-37f293e8aae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "89cecee5-e3b7-4094-808c-445cecc45411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab8bd41-1857-480f-a8fa-4ad1338da416",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c669ef-abf5-45b5-bccf-0f379945cd75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "114fc2f0-028b-4fe7-a93d-351efd24694c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96511f40-37f9-4170-b8ab-be7004ddbed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "66a1b86e-76af-401f-8ce0-9de577c4accc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8f3a41-5f71-40eb-84b4-14db4115e339",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56f2a2f-0bd6-4e93-9156-3d0ef93b84b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "964fc341-83f0-40c2-88a5-b79914151885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be06971d-617b-430f-93b9-2b4abe832dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8448dcaf-fcb3-497a-940c-2869e26e96df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50532322-e9c6-4695-9946-04e65c420dec",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67081883-0c2b-4b22-ba38-95b9b0429ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ded42a-558d-4af1-b7dd-a9331e2fb403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d857c8a-f74d-4156-8ead-84048040dd9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb04793-02d7-4d36-be31-80737e73401a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e3a999-faff-46ec-b64e-b8dfa0526970",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a73579-cc89-4d61-ab2e-0ba4a3177090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "106da2db-65b3-4c23-aeb2-9cdb864e509d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d907aaf9-f434-49ce-a358-5b7b5f78dbed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7edb258c-fe25-4356-bc3c-e6289f039921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c224db26-ec98-41f3-9f66-2e147f44f8c8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "755ffb9e-e05c-458c-82cc-0df56c801e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd1eb81-923b-4751-b942-5f668db15a87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3df743b-767e-49d5-aabf-d4a4e32d147d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "59535dd6-5c07-49d5-817b-bd3e61f17854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954e4ee7-5fca-4aad-b354-89ef2447d7c8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4704dfcd-e00a-443a-80d4-26d73e94d1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da57a22f-8e44-4912-8c19-c9dea15ce1f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2aa520-9604-42a2-b0cf-ffc9a158fd07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "02156c02-f127-40a2-aed2-867c3a82b3a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c85495-8728-4712-897d-da3430e6e89f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8de7fed-b01a-47b0-afc0-f90b38c6a2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a894c2-72bc-47e6-8999-92927c04afd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1d6ee1-3e4e-4f3f-bf28-6f2b98d45769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e22cbb5-29a9-4925-b574-44556aafdef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33be675a-f30b-4465-bfbe-c05411413307",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3567b902-027b-405c-99b6-50e8482eb9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6d8edce-2630-4831-a16b-8db7ca97bb76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1ff43e-f1ab-4070-b56d-53115e357c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "922a9e96-30c4-4824-9a69-75fb98ddf5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95741ca7-59fd-4e37-a9cd-7beb98723af3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ad707d-9a9d-42aa-88d1-08d2119b1203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2681a7b3-f7a2-4612-bc35-14ebd215ded5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2535fb0-261b-4451-973d-cbce707e9cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d00eb776-752c-48bd-a280-7fe89bd6827d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff46aa3-4d64-413b-98f1-163da67b3c15",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6863a1-d25b-4037-a75b-5028030d5f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62834145-6a4e-4f8c-99ec-4331b25b7a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9981f0-e397-4c8b-9f64-4e0d8307d122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4164d4ae-a7fb-4979-9981-8c1d0a80cb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42750de0-17f1-4826-8505-60d9110ffe92",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7d31f8-8e94-4ab3-866d-5eb968aad55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a7e2c9-4d19-4cc5-8bbf-ab3113b52105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5b2249-8ecc-49b5-95c5-e74496f4fcaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "def4f9ff-e6a4-4b16-8836-1b51e7c4b3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102ea472-41a0-46c3-b77c-44446fe7afd9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33dd5ff8-3962-4d48-aa6c-4587c40af814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f40c92-a01f-444b-83f0-fc14942a541f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21de27b9-0b4d-4c5e-82eb-17683fcd6672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98de5597-51ef-4219-bf36-a1bcaf5a62ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a5064ae-ffa6-4126-932d-1aeed5d0929b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9795e1c5-207d-4815-9da0-2baafb60aa24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "809f4baa-a58f-42c5-b3df-a949f5401ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c46d634-3646-4719-b957-4d9307186828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c5988c9-d096-4429-a6df-4a15cc524bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd1b5cc-3679-4d3a-bc30-3f0492681b51",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "975e9edf-910a-485a-9b4e-cc004bf9c5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b891e6-dfa1-4ef3-9f51-c971104808e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c47f54e-9e87-4c46-8e7c-311d1e4cd03d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a428a109-fd68-4cb6-84ea-ba3d71d45c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cceca00b-2916-4b43-b35b-1b9e512fa045",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b1480c-5296-47fa-bd71-81897450dcd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb66ebd4-5b33-47ac-b396-f3b89f36b314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356bf13e-393f-4dd2-a61b-8b7dcdb97421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1511b48a-4620-4145-930b-ef5986d410df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e758689a-974e-4717-af29-5ac717d6b820",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f382c025-4b4a-41c7-8384-70c063d0410a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe6c7500-14bf-4d25-8ecc-ec3141fab5df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94457d29-daf7-4fc6-8861-84e2c368aad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "947cd11a-c767-46c7-b098-73d4de6474e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2d0efa-ba78-4407-bd91-5817eb30aeb6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "152fff00-4dd9-42b3-80ee-d35b52b67124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a813342-9cb7-4608-aa54-6018dba67a27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856d2d15-a815-453f-b255-b1117edae1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7eae2c5-59d7-4abb-a2af-0f96fb26ecab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9108f2-c04b-4863-b1ed-de00ea95a1e9",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a602ab39-6be4-49cc-9431-cac3bcccbf44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "015a6b0c-8f99-4fba-8206-9a0f5b4781b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462c1084-2653-49b2-90b5-732a773215d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0514b18d-927e-4f80-831c-c17196b6b165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f48512-c584-4c09-a9dc-065fc6a67de3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eddd193-7f13-4cda-985a-52be418c0efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d2253d-373d-4e7f-81e7-c8f138e7fa87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4a936c-2e6f-4095-8c90-de5300e7b7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22ca7b01-f9b6-4511-b8a1-828d80a6c3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7a68c4-f687-4781-b4e4-4c369ab50c55",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d43213-8e1a-4181-b6bb-1da63b0be384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d032bf-ffbb-4a67-b52b-9a34fe7d2788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a0a87f-e8e0-44e2-81a1-7067c1452eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5329ea1-2c89-4ddc-a508-bf4a9067f647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec1894d-9c34-43b1-8cf9-ed06a0e93790",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81095d4-8aa3-4411-b002-f10b92658f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c2a20b-33f0-4b4e-83f0-7b2586163b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fae8db1-752f-46cd-af68-5908a89340df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e6b231-6ef4-4510-96ea-dace6ed1fc78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581add18-089e-45cf-9948-03ea2bdb95e4",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffea28d-608a-4b51-917e-3e4fc8c08dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a54f8e1-9732-4e81-96a9-253992b3528a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf12438b-512c-47ca-a0af-16e61d0dbf25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "362e74b1-adb6-413b-a1fd-c4b864289db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbe5a70-1743-46ed-9593-21e31dc741fa",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e926dbd1-fdcc-4813-8d7d-1911f144fa9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56249e55-ba08-46c1-8a65-5309d7210554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055cfb1c-c239-46e1-bcc3-ecd8aa10763f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a783379e-3bda-4087-a7a2-71f87ec20d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306309a1-97b6-46f1-bc9b-a7d3143d3831",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e9bc4c-6b03-4d96-ad93-7c3665832c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9119862f-2d59-4071-a702-ffb791ed2966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1bfff2f-bd0d-4c7b-8ce2-0280145f93c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "897378a2-b2f6-4bce-913d-c8fc64d8467a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0152a742-e151-4916-801f-4fd31ef77188",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3438ac7c-3974-4778-aeed-3355d9426399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf8d4b9b-f8c5-496b-a4d4-8b24f78adc22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0fb2d97-2a48-4911-a63d-c8a9db5adaa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b65f661-1002-4bb3-a566-71d12ac1b633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246f1e95-790d-4f51-aa15-c676b7de55b7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6c3e95-9b47-41c7-b727-03420886c71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6e5863c-5a6e-4be0-8444-d407abf36d87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb313cde-82d0-445a-9dfc-e3babb78bc07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f91fece0-1348-45cd-948e-27de2bbb9129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d44aeb-b398-4f1e-8741-583240bd7657",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a67c4f2-a180-4f7f-b5be-3f561a806034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464691bf-3ae9-44ea-aefc-6b71838411bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4731620f-37ba-4763-8f9b-381af0538e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "887f3bb8-ed1c-4959-a7cd-ecef2c1939a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f3a23b-4fbb-4b3e-8b6a-72d9c091dbab",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1fbeda-ff3a-4095-97a7-c4ef3ff16d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42882dc4-e3e2-4244-9fee-b81378ce50c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "addf7f67-6f9c-434e-848f-2d1eaecfa226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ec3d4ff-fe1b-46bd-b99a-d1b8b6cff69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f50be1-bd83-471c-b850-8518f64338ef",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d335cd21-5c13-41d6-b731-c63ad5bd61c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e6fac8-fc5f-421e-ab82-b5d67813ecf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559d13de-f040-4e7d-8134-d23f74c0b641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c45a436-fd6b-4e1f-8945-e72607d3919d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07439bb6-3d54-4d64-bc6a-7fc5bf39c726",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a356f59-3c9c-4af1-8129-27c566993536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a2e4668-89d4-4e73-9027-d18e727beea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9835d61-0262-43ea-9782-91eb1fccbd46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1af7481e-a14a-4a33-9984-83b46abb28f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feac297b-a838-48b4-ba13-65079220645e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3ed161-a5f6-4777-a594-bdabe57b786c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a2feda-973e-4215-b9ac-993e84681556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "249bc7a7-7416-4b99-9ce3-cb0034ad71b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "64dd3be6-2408-4cf4-84f5-38daabb6bda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b424bd9b-d599-41ec-bf2d-6ef407d4b9e7",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a85b4e2-c6d6-46a2-a727-57b30cab01b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d93818fd-5e73-4a92-9a8b-2eea83fa721a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d49e1ee-71f1-4bef-80ac-d6dfa0f79d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "632c7835-4426-49be-9af7-d8097a0933a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a58b947-c39f-42d5-974c-8b9d8ab4bebf",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaabf98a-02ca-44d1-ae3d-d16c40d81190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e50a745-5dca-43ca-80b8-5903027097ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b282a7-79ad-4f5b-9289-f1966b3d8019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "acd91909-bf39-4d3e-b9c4-ce9ad2519abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e898c6-e423-430d-b6a7-04cd829d2904",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "200895f9-384f-44d4-a8d3-357743359082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fe9887cb-bc2e-4f14-95cb-bec78c429bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2bbccd-03c3-463f-9ecd-9522ff5c9fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc0e52a-b73c-4513-a50e-e71cf7a84546"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7dc94d3a-3b97-44cc-8375-417a9113b5e8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1c8895b-9321-4fa0-a891-9f08e3ed1873",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b562fb5-aec2-45af-b358-21eb6c1e1b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "def62adf-c0f8-4f4e-a362-20f97701d41f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f643b79-1807-4373-af3c-d11163134181",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "67d72517-fac1-441c-b1c4-4cf69d0eba4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e357255-2688-4023-b7b5-161a8f8d58e8",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64be50c-38e9-44d9-bc2b-eaf33f5d8994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f478eeb1-11ad-45e6-9fba-6367335cd825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "225d9e7d-9ea5-4dae-9e3d-aecf87fb4a4e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c662550b-38b0-42f7-b505-997acf1807fc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fda9092b-cb4d-41d3-b1cc-23b7ea8576a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ae154f6-bbd2-40a8-862d-c4353b83ae0d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "28b0d41e-f3cc-4f22-8fb0-6de7ba5ed410",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfcf35bb-c30c-4157-a2dd-afc6b7d5e025"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a29b6857-b039-43cf-a299-6bbd6487da84",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c98488d7-dcce-4f08-af18-e6aa5fe08e9b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "756e9c9d-9dbe-4659-848f-66cc29e50884",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "19646457-cd03-4d3d-93fb-126c1e02aec6"
                }
              }
            ]
          },
          {
            "id": "eb4f4d35-fe0c-4929-a2fa-9c676b5bcaed",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2472c267-c904-400b-8ddb-611095c63b91",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8db22bec-54bb-4b16-865c-f442e0718326",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "33cc01ad-69ca-4773-9b6c-4399939a9206"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b10bd735-1603-41e8-a793-888a54a695d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fa8108cc-4ef0-40b3-8edf-e36000cca920"
                    }
                  }
                ]
              },
              {
                "id": "52229922-ad60-4d4c-b7b0-a7941a433a4d",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9997017c-2c8e-4b2f-ad5a-2b27798ced3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "56c0ee2b-4c27-41a0-8bc7-b63eec56b090"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "516b035d-b53d-4190-bfb2-1babbe76183d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3211fa40-78b0-4fbb-8537-010ded1b842c"
                    }
                  }
                ]
              },
              {
                "id": "6511d009-d2e7-4e19-aa1f-0e5315c92fdf",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09eb2495-1125-49e4-b320-f58049d37ec6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "daab2db6-1c63-4bbb-8764-a344e861d136"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7fdea14-f0f3-405f-916f-20cf3ae06de3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0f2e1d4e-a1b3-42ba-a6f2-9ce22ee0a9df"
                    }
                  }
                ]
              },
              {
                "id": "f0e775ad-2c17-4ca9-ba96-4627fcd17578",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd3ec53e-48c2-4e9b-81a1-c33b912af31e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "23fc029f-6f74-434f-b1d3-4c7411b1b1bf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4fb93f16-c631-4005-9653-f25915bcbfc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "34aa1502-17f6-45a8-9636-2b9216e14fdc"
                    }
                  }
                ]
              },
              {
                "id": "0d173a2e-4230-4e5a-9ca9-97906e10bd10",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba6bc6bb-1b48-42e0-a982-4b9e4a9c21f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c1eaa89-a132-43eb-a50c-c10f1973d88d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec9cf1bf-8893-40cb-bf62-7c8501bb1c92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1c960f0b-dff3-4b90-8105-7635fae64d18"
                    }
                  }
                ]
              },
              {
                "id": "04ab72ef-1aa6-4a32-b082-c5a18fa51166",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac7d3833-57a9-43d8-8323-4406ebd5a13b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e9587ba7-6d3d-431b-8fe7-93d1e18555b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8c6904a-fb00-4780-857d-39878de1d573",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "634aa63f-fdad-4fcf-bb26-e83c039c01c6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f47383d4-a98c-4747-ab94-19a0a674c454",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "981f3bda-f4c5-453d-a7d5-cfb5338aa1bf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b7509de3-544e-4286-b042-df578dedb1f3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c296a52b-55e4-448b-869d-af6ab3003322"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d5cd64a1-95cc-4adc-a4c4-e5c8827a3316",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e8df646c-0f2f-4823-aa3a-d26e527358f6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec5b23b5-78ff-4231-b5c9-938137230257",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ec18271e-c1f0-4c28-94e6-a0486b6afa10"
            }
          }
        ]
      },
      {
        "id": "24f1cf7e-39ed-4b24-a9f3-4c9e114daf71",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "21e03d8a-d444-4543-98fa-116072fdd433",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0bfb7be8-00af-41c6-94d4-a6b29e72395f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9bbe7ffd-3ab2-49dd-b4b2-fb4b54065376",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6ceffc-b77f-4f76-b851-4a1c4a813640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9086153-bbb4-43b1-b7bd-df2f23504a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bcf675d-f76f-49f5-8890-af6c0a681406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4245b07d-7d02-45a6-a4af-a3d5fc705409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc52a8f6-0618-4794-a63b-5c343c4bc1e5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe12cd0-61f8-426d-84c3-d4d2d4e2cd20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "543117b4-f25f-4172-ad7c-46f4421d0d42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede517b0-48c0-4279-a923-ed13aad90a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b11631ee-6c3a-40fb-b0b1-43ac0e4cdef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e528cac-3b99-42ae-863b-a2dcd48081a1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c465b12e-d409-4db7-a79d-bcd05cef6e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5877e08-8e56-42dc-9993-572f132f338c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e262ad-c61f-40a1-9d53-774fc73fe59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a225b91-41e5-43f3-bc88-d0cf31369a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e972c8a6-e1e7-4e5e-998d-ef8d19205705",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757f1c84-d9c6-4924-968b-77fd09787206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31ef957-d0af-4072-90d7-76ba9eabc0bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b4cf2f-30db-4d88-a1b7-04bb8865d3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e25f3403-a3d7-4973-85de-db6457e6523e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e0e64b-36f6-4855-b1c5-c2fb9dea6ee4",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c762f9-e28f-43d5-ab98-100573f01938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "703a7e80-957b-4ff9-a29c-69df38c4e842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876b9acd-8310-4c33-b85f-771bcadcd6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d05ee6e0-4654-4eaf-8a0e-05b90126fcc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8b1391-c3f7-43e4-8834-e1285e557f5e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed85e243-c2d8-4b5f-857d-86e18e0a340b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0c9f73-7971-451c-b97e-3fa5586990cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190f1963-c9fd-48b7-9991-075358264d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e036a29e-6d0f-431d-9a32-106409744255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a267a49-face-4fde-ad67-17d88ac60f40",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ade7ad-c83d-4285-b719-330a12e923f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc5ecf9-05d0-4475-acde-6213032e756e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c0dd4e-bfac-42f4-9f52-3d1a1f5bfd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0acb3c3e-7bc0-4ca6-8357-592d3938f736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed120c5-70e0-4023-9a87-2acf5e3275d1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979f8583-8645-4cd6-b4ef-53460b4e85a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83f265d7-932e-4109-ab70-04bf233554f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4cbd45-a8f6-409a-b31b-56f4c16e7f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbaec2c3-1e93-4a78-adbe-d203c8bc41bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc623a34-3463-4958-995c-06ca5eeb785c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f7bda5-8340-45d5-8779-96647da70eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8acdc465-dcc3-4b16-a50a-08d891ca8320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8eec23-41ba-4a9b-a1c6-367315663f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a28c3bb-75cd-479c-8d5c-7d44c8ba2cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962f075d-5ce5-456f-9e4a-f70e4374815d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f62047c-d447-400c-9ef8-103d2926d2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1250f8be-e42c-489d-8188-92644c85655f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f2e977e-2793-4440-a87e-d3284ce4d4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c23fe34-cbeb-43b7-b246-e4b4feca982f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acce5a4d-5d96-412d-a468-2014e92219c5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad7c803-c634-4164-88ad-c53dcb244896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a6443c4-24a6-4470-9dbb-0b6ee8b9ff70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e8727c-2a69-4ca2-ab9f-894126a30a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f21c2d14-e66d-498c-aaf7-ceb4c86b3bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc0423b-ca72-4973-91cf-81096a7d812e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e1c93f-4853-4bcc-a833-ef38faa5d5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f915c5-d8ed-4997-8e02-60e4dcbbcd60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5025e45a-568b-472d-a10a-0c4e02bbb7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1023d526-bf8b-4bfc-aa41-03dc653ee0b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a798f2b0-ad1c-495b-8d9e-42c2f5bf1eeb",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e68dd3-411e-4acd-8f68-e58a3219133b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f661616-23f9-4f67-bade-4bc5687c3404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c202c8-db7d-48cf-bdb0-915d325d7e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "69ff0985-7c9b-43dc-8dd1-60033a704967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe7efd3e-d9a7-465c-a116-2ec39553cc2e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87a821b-15e1-40d8-80a0-e3a57256f08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "502de97a-e5c5-47ba-bd57-f39eb81034a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73d0dcb-1e5d-466f-a94d-7f31bcc42c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "796fa195-c89c-4486-8617-16aa8d23e384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d435beb-2f30-4862-8901-7f353ab62ded",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e781ab5-bab6-434d-8080-bd44bbecc9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7bbc5e1-2759-4fc6-97d1-358ec0734826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d6d896-9824-446f-aa9f-ab5c303087bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6465858-860d-4266-bfee-dbb148d01deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78ef129-075f-46c2-8b69-64b42c8750cc",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45fdc389-bf40-4df7-be1f-021629f5766c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70a4f501-4ccb-4144-97a4-3e703f9d83ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22468d88-57c6-4f38-b2dc-d4c76fcc6164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e855ca7-528e-435c-8e01-87643cf9a511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9547c56-cbf2-49df-80ec-9b5bbbdff410",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b768c37-535d-4232-aad4-25cc0bbd0ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de9fcb2d-1c6a-413c-919a-7205391dc8b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890c477d-5f4a-4771-a9dc-4c57861b6ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4549f42d-1822-4286-a3ad-3125cd9a707e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163c9197-7036-431f-9098-35e3aeb28473",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d30814-abc6-4e67-a436-691d66533a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a98d7ab-e5d4-4144-9ec1-570c795f7484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c4bbdb-aa4d-4a7b-9067-09274d37685d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "19fe5205-9c01-4235-8411-dafbc9786557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "221e9e03-a688-474b-837f-4b89aa92637d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18498fc5-b77b-4d7a-bfe6-6ac1c060ad52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9984f96-31df-46e6-a9a7-518b7c45b1d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd981e5e-6c12-42a7-9ebc-55c860501ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0994f381-5b70-4568-9616-b5ae3b1caf26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d805a3ec-0c11-4404-996c-fa09844a3d35",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "439a10df-3b82-4314-adf4-208dcc772841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82d450f0-ba27-449f-88b3-9d0f7bb31cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7663045d-05e4-4a2c-8026-f15f63e1e977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "820f1589-3b26-4016-ac64-a1bd9e6e6060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7860bdf-84a5-439c-baf6-fd718a80fe10",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e8d8de-943b-4f7d-a987-f3bf7d494d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955fc821-036a-4eec-96a8-882f808f1a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81885db5-7beb-49ea-af18-d9e39adceba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "538a35b9-ecf4-40f3-b2c8-a4b07b946930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38817467-9bfd-4ca4-8066-8712111d0ce5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c156f006-79ba-43b4-8c75-7a22292a7f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb3d4c46-427a-48e5-89d2-0a04d0e3f412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab179b64-a9db-48b8-9da6-bf1f2e63f690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbe193e9-f439-45da-8256-687d759c89e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6c07fa-aa53-4450-986d-baf012fe36e0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c37ccc3-d4f7-4b88-9723-6b7d2bde20d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5e91e68-17af-4fb7-9b98-fbb8a78fdb3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bfeb4e6-91f0-4af9-ad9c-824dd419d2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb12fa1-8c88-4ac5-ac60-56e0bbe411be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12c8974-b487-423d-9559-f4d53a7a7004",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85c1eba-ae62-4543-8526-f98322c5a065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e692e631-a0cf-464e-83f3-3348c389e38a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d11eabc-be21-4099-b129-72a863e6fa7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d86db5c7-8246-4a04-8ac8-554ba9503154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd61d1ad-dd5d-4b5a-bdb5-062a342a533f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c7f965-70c2-4852-9928-2b735527fdb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d57c2646-e440-461c-827a-ca0a021ed8f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243090c7-0ed9-406a-a1fc-e4560df994e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfc600bf-a846-4133-b8f1-36e06516d5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed57f90a-6332-44a5-8d78-cbe71c4b97e8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38804f3-f0ea-40d4-896c-f905517b8317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "520c786a-eda8-46f8-8e1c-05c90b3f7fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743fc8e6-bae5-45df-9e81-d3f4b3061dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "847ccc97-6685-43bb-95e8-efafb00fb765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35866d0f-6153-4b7e-b482-2e48b78866bb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3323f9-17b3-4739-89bb-ec7a82e1c151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d8014f0-9216-452d-a007-fcc9af3f9e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50adfde-30cb-4841-a25c-3dc6cbc78f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d4cfece-da7a-46ab-b897-704e65f6bd79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52323f6-7fef-4c23-b926-11cfeee261de",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fba862-3764-4b55-af6d-4b7bca567f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7853b0-905b-471c-b919-4059201ef3d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04237701-c264-431b-a51b-17d7fbd98d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4161805c-d43b-4352-bec1-da1bf8d6c4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4811dfcb-937a-42fd-8790-b0b4cceee3d8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8212ef6d-04de-497a-aa37-10367c874a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644e1ac4-de0a-4e5f-bb1c-1c02091a9803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8387a6-f4b3-479d-bf55-21923fdb3950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e90640a-763b-40b0-aa1e-382339697af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c303febc-d0b4-44c2-8a0a-d90efe9ab8d7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf196b85-f107-4aee-8bdc-060f3790dff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcafe3d8-b0fe-4620-a75a-0e0e96e3b7c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc5ca15-0f73-4f10-a3de-0e492c500176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0ee0271-885e-4025-a61a-9db3262b1250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e13e75d-e76b-4d90-b6da-fb5187986ddf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "472e5128-7475-49df-b7d9-a3ef3689ddfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18ca7072-8605-4e7e-b412-392822a18026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6adb26-a236-40ad-9b5d-09b5c7240eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "017a67cf-d690-4c77-94b9-c8f818c452f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f1e86fb-4fbf-479f-baf2-f101c93b3690",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29fa0c18-60f4-42de-a969-754435e5192f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7850f7dd-9c5a-4369-bbea-dde0d438cf2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948ad3a3-9ab3-40b4-93f4-6ebce535bf53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6db092d-330b-4e55-9e4e-793995c80697"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9be51ced-7224-4c43-a4a2-6fe43785088d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "68933483-3555-4c80-9fe5-f00d77c97060",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d8244b-43c4-4fc2-9dc1-523312a33227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a8adf5-5d0e-450e-bbd8-a21217a82d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c0e600-22fc-4125-9bb0-8b516ae7394a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b1de5569-6c57-446c-8b5a-db8d1fabb1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43442785-d540-497a-b179-22a612276823",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4d062a-bbe6-4e90-ac3f-3e14d588edb6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b0b7440e-2999-4e29-8f99-e594617b5b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3a1b25-f242-4b0c-858e-3544399cd54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23606ad7-e080-44c6-81e8-75a0288dca6f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19ffb433-f0e5-4399-bc79-60ffbb6db68d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc415427-650a-46d7-bc83-5820d311614a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a31ec5ef-8e81-4066-b516-e5c43830db81",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "defeea53-0a9d-47e4-8db7-4bbc26e42119"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b30e6b42-a157-4152-b666-97bf234a1313",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "193128ae-47e1-4900-a9ff-419e18fe8298"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f379cb02-020b-4230-95f1-77595235cf77",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "904253d7-785a-49aa-9627-2b08e8025b60"
            }
          }
        ]
      },
      {
        "id": "3ed266b7-e83b-4665-8eff-a22cddc6ffc1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b38b5535-259b-4432-92ec-5ed9eb2c6073",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bd88f34e-4abc-4745-8770-96cd872b4e55",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c48bfbbb-0af4-4ceb-bc0b-e811beb57bce",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47704583-39e4-4dc8-88a9-0ecbf089de93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfa5d86f-85aa-4a59-b87e-b25140ec22fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b8ad1c-d292-4371-b5c0-2176a2032b2e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd441a9-729c-4264-9730-f02b0cb0e106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16a447b7-78d2-418d-a86f-1d2ef0093b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9536c1e-1686-4dac-a8fb-be1616f60b5f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1078b5-e25d-46d7-9772-c644fbf67502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83810cfe-c010-473d-b547-2a12e3d4db45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "209909ae-c4f7-4f95-8c71-e76e62fa7e83",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c097914a-3a46-425c-b4e0-e445b06b158f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9758ae2f-b263-4635-b8c4-743da5a49a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3817f1b-2eaa-46d0-bb06-33fe1839351d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7d32bb-35ec-4490-b218-28f9340444a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f0e5c77-374f-4691-87e6-2c2659d9f271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7631c9dc-09e8-483c-8dca-610d327d5e0d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "746899d7-aab0-478e-9a20-3239ce235054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0360b2f-75f9-4986-9281-74add51aaa73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c286e2e-a9c1-4790-a5ef-bcb03e86ba63",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a204e1-3c4f-4618-b6c0-2b2c3c59b46e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17e2f355-9d33-475b-8735-51b4407c51b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ea68ed-e012-4adc-94a1-5ab13e1662ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "556f7779-9118-4965-b17b-39e315a5ce1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c18390-e178-4dd7-b854-282c19d045f5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0beed4bb-bc97-4911-880f-62d570f1d635",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "659604df-31cc-49f5-be4c-f5643160a41c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba19b5bb-49f5-4163-a3cd-e439af997fde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f6bfd66-189b-4146-b98e-e63c14351fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b96e3311-2344-43ee-8a7e-821dccaff924",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120df426-a9a5-47fe-bb8c-fc539a34de16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e915d40-0ea9-4f94-a04d-25ce8a616d2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb851bb7-6f77-48f9-aa4a-84f6bae5ad2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5bcc72-7e1e-4430-b89b-731b4ad66c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3648ae07-f394-4e8b-88dc-4f0d9b672bd1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a03605-dd07-4b2b-ba9a-00c2f0b530aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eb227f9-0316-4ab6-865c-fdc909e0433b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83018848-8565-48b7-bfa0-e3d1584f8201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b740fa20-c2e7-4c72-9006-73524de623ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033fccf6-de51-4d87-9c2e-4dfe82ca0a90",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af84c16-117c-415f-a65d-4b70af0fff7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f94eefe-d7c2-4c00-a0f5-b17426f508fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5838d7e-97fe-4212-803f-40044183d849",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cb6d471-e2b8-425e-a9f8-1f4858bd2a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575592ac-eef3-483e-b119-af37ab65fdad",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d31c78f-30b5-401c-8726-61f3ada39923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b21af899-915f-419b-af11-9194a003f867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8ac946-4974-4a86-adf3-0657c9e42e7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45cc713f-9607-4aa8-9509-585d67cced34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c8fd14-225d-4bdb-bf6e-8d7c61d74b7f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9ce0f7-f40c-421a-b96e-83be1b871bd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87e4bfa6-1f77-4a08-9df0-28ddb0670c92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1202ea93-2500-4bdd-9394-e925c93a4403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dd6a513-a05d-4f5b-9b85-1e5065db1034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3304ace-1733-4d29-aa10-5457c461ffcd",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14dd105-aa1d-4761-b527-52ceb7a40426",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97a75560-a486-4c49-887d-994487e372e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c8b820-cd20-4d27-bca3-f9566c11de2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec0e5bf7-acbb-4b83-ad33-345aee0cb1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2231107f-77e8-4547-82d6-a2558f20163b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5554ff8f-1216-4f49-93d6-71f6a6c1a772",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7364b1c3-207b-4432-bb89-d1b3c5c352a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "294f5d32-31a1-4ccf-8629-7d97649721f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e247e4e-190d-4e6b-ba04-b1c51784633b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be6c9061-f01b-436d-ad71-f0c8b57bfb60",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9cd1d0-bfb1-467c-a759-a0710b804b3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d212075d-1933-43cc-a8ce-345ebfae9d6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5607a2-151f-4701-b20b-cefe4d9b7323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f35c3a-011a-42c4-9796-f0107d793f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01421b88-200d-42c1-a2d8-f551fd8a9b46",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693dde1b-49ba-485f-9533-25c270fb3a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a63b3f2-306a-4bb9-beca-8ba3c936de60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1eb1b2f-6a82-48c0-84e7-4e318ba661e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be6248fa-3e19-42be-a7e0-bed02a23029a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd0f1a2a-928e-4707-a3cd-e63f1bc045b7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288424cd-3561-4072-bf49-dfac8be2ef99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb034540-69b3-4b46-980a-df9e35d2fb0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17777fcd-f71a-414c-a503-594d80c75550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e27617c8-7fee-4f41-9289-a91fd2b18d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58bafa1f-9e3b-4e52-9ad2-62134c11212a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebc2d04-b604-4854-9212-7dcfafc44020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f96e076d-d0cc-440e-9679-69f0e782b545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba1f045-9e99-4cd1-b8e2-c7a7eed31a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec19d5a4-ee05-4835-b321-6ff875c1239e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7145b6-185e-47a1-a67f-ceed6499a6c7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdad1fca-ea11-4f53-944f-c09481d8e2c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afcda8f5-73d8-4dbc-bb3e-9d0f0d2d001e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c916e8-9e81-4ec3-a819-f7c7d1d59f24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df411381-6d1d-4bf0-be6e-270ce3778f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b987b1a-acac-4729-95ec-d1e11c8f6869",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2467373-a83c-4c24-ae57-13c80f4c79d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b072f68a-019c-455b-9d54-125e0c232f27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f188d43-4eb1-43d2-ab2b-790624f488e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bd13b7a-61de-4ea3-80b2-4c70248ac843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c18a87c9-b4f3-417f-ad8f-0f2ce581c0a6",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3080975-0424-43ff-ad5f-383d2e71a34e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f868964e-2f35-4196-888b-a42f44a9ee51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "343f733c-6e75-43c1-b807-e9bc9861b82e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c92aa147-f7b5-432f-9855-caa78a734506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8291c585-47b1-4be4-b0b2-a12e3ff26927",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc4448e-6516-4be1-ab44-07dbf71e6ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c58d193-8011-4fa9-9a3e-6d6d52dd2ee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777fbe14-b839-4667-9af6-c33fd97e52d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0115517e-24f5-4f26-8a29-0bae59f48c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7e42b1-9985-464a-97bd-00ce01a0c211",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea120cfa-cdba-42f4-aedc-eedd0dd65e45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c74c364a-cc95-44e7-9f18-f037059cc1ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35295bc4-430a-4a3f-9eaa-41782c25bf36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26749bd0-dd61-40c5-a431-686da224704b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24a8251-8527-4fcd-9b45-70636d2f0754",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05130e9f-9511-4064-9b95-3d8971fcee07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f74d3417-07a3-48a4-912f-f33e80f4ceab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b95b881-79ee-4b44-9eb7-a11d1aaec28c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b486fd8c-3e58-4d85-b07b-a999ba370e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a0106d-d7ed-48a2-8a9f-4c5c15800235",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70902a98-2416-4489-9775-284403cfb05f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "996d8b71-8fc5-4dba-a108-58367b5af099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7991d26a-6628-49f1-92a8-ed1df78b0d87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c2a6c2e-8195-46de-9145-de6a3da9b8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3106cf2-bda5-4aa8-92d8-4b2a9d991d2f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2fefac-89ea-4681-abfa-cf8b0355b596",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77ce0256-27a1-4195-b9cf-de26a42fb208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd852e0-16f7-4bf5-bd42-d112bfcf987e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a7a697a-697e-427a-b7f5-424baded8d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144ceee3-f214-4d3d-bd3e-f4def0ca7296",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689ff44d-9c15-4b51-b221-8a749e08687f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abf2d97c-a50b-4186-8f9f-1c8d8bfcbeba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b182273-62ba-4f06-8506-aa1242aa84e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0deef14d-a80f-4baf-a123-f23815638533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75616fc1-fdcd-46df-b195-04202f164aa0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "121757e6-4594-447e-bba1-7b2148c70b00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cde4cf07-d347-406a-8a4c-a9f76ebb930d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c80f41-98e5-400b-83d4-7c2cab56adf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d84955e2-d758-48f8-8b15-466782831757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c1c305-2bf7-4d92-939f-3744abb27f1f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28930d3-168d-4019-86e9-66ec154f3c33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcfffc65-92e6-47b2-b58c-e2847712d3e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d6eac1-34cd-48c1-8d6f-622de6aed23f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f149336-05ac-45e0-adf4-98b9160926cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506d1128-57a5-4fb7-8d51-c568098abcac",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065b5128-e6d8-4ccb-8bbf-d6ea3f7c0abf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a4d72ba-e5e5-4b6d-9206-25a28f9c19c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc78fe8-84e6-4f47-86f4-84c05fee6c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51feabf4-3fd1-4d43-a863-ce30e08fcfa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53a5d99-060b-466f-a28b-803b404743a2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43771c68-c698-4c7d-a545-b6841d512095",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41de7ce4-ca05-485c-a264-8c4bbad4e27b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6131657a-4a30-417f-835b-5264d828d6fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c65b37-2185-482b-8d8e-65fce71c18b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7588650-c847-47ce-8d27-8b0fce9aa565",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93bb4c47-be88-4471-9134-ea3fa8cf42dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3585c69-1c71-4b88-9faf-a37c44b01e97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ffff5a-91e4-4ce3-9587-c72adf9599da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd77c18a-2cd9-4d73-9608-9c0cda53b38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e25a2e-a22b-4d6f-a72a-5ba60a60cb7a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd221da4-593f-4f12-866c-0c575cf43ff9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e56cd1eb-74d1-4d50-b294-bd8344c76314"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3164052-3dfd-4f8f-8d80-df15132e506e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d1319d-db66-493e-98a4-c7b9d795d988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba95ca78-f2fc-46e6-b56e-5d09f0cbd3a9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a6631e-0c74-406a-a128-6b8a391c69a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1973ee3-75b9-44ff-b356-b9abf6a11ce7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "718c5c7e-2a67-4264-8cce-c3977cb9aa0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff74b85f-6626-40f2-8975-e8093a2266a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e72353a-95be-4c97-ad70-c4861e24a865",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4931ab3-ddef-4f8b-bcb1-9054222e8596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71eea11e-e33e-4c7c-920a-131558cebb88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8882cd8-4898-4059-84aa-33ecadf202c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b3fe581-d25c-4ad2-b0f8-f9ace5280c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1940c18-cb2b-4bd3-aafa-e263dea92632",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9534ead9-d6b0-4b3b-8dbf-1ad2f48c2ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41646a60-8201-4cc9-8e33-193632702c3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75499b6-c30a-4499-a478-6b74465555dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ac35e03-b9fe-4890-aaad-931b6bf4e81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52fe497a-1a2e-4404-95de-6d6fb4782b76",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc73a22-6a92-4b59-b64a-7c5d8e4bb086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b87d79a-8682-4435-a5a5-69c8bd9a8095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6719eb2c-efb6-45fd-8046-fea0b74f9770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a87bdbb-3a35-4c05-a024-e7c4a1eced69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b29b26-740d-4f26-bc98-62cd55f27e6c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7bd8ac-bd2c-479f-8456-c95c4cbd0064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb09a2f1-e08c-4e75-a2a0-f044c44c3e90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c4335c-3afa-47e8-b22a-72faadadf80d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edc109f8-4510-4dcf-a02d-41fb55d570c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bdd4060-bf32-492e-b024-b91f1b995dae",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52106d2a-5a96-4f06-8d12-831e539ac5ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1e8e20c-745f-4a1d-a604-483eee9e8a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e634f3-3214-433a-a94d-5d3b31a3f788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f898310-ed18-41e3-af90-99887ae7a165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdeed838-be63-4f2f-804c-709b232cede0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcdb0548-660e-4d61-88b6-13a52db1ca2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "067577a8-f56e-4256-b343-e162c2725400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5e02ac-8100-4ed8-90a0-60f459a0cd82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1453578-cc45-40a6-9781-e7675ed92dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a908ae3-b5a4-4e16-b1f8-16c3a4a958b0",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f17ae47-84d4-4f94-b143-b7556e68baed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06631b0d-a5f4-4f35-83ca-db0b8fa9b10b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f968fed-12d5-40ea-9aba-d4b4f8ad360e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a5c6e3-6253-41b6-a0f3-2d0475cb39b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32cce623-fd3f-4da9-bd3f-14a8671b1e36",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128ef0e2-09aa-4760-abd4-bce23576ab97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f2a12c2-5e8d-41bc-ab0a-5657c153199b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5beb2b-5516-473a-8378-898b2234c50a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee35bb1-9bdf-41ea-ac91-9e95a6e432cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f495dc5f-fcfa-4de0-9b3c-c34db3273549",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a8a0e5-fb80-446b-8088-6b35da744792",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0848b7f5-a0cd-4441-85dd-f46d734d7ed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c96336-218e-4b1e-adcc-858d634506c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf5c8198-c536-43fd-9b3f-702dd5efc86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e97309-9bb2-469d-bccc-5c96a578879c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e18c7c-5b77-4206-a428-cc015eb06d5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50920d4f-30ce-4d2d-9c54-87cfffe5ca10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "799ddc7c-6f34-4aaf-ab94-993019b315c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17d936f1-2620-40cd-bcb2-0d605824526f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53054bc-325b-4ed0-8ba7-caf8a36aaff9",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b8ccea-e98e-4752-bd92-04e7a0c7ff7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d4b6200-c097-4f5b-a7f4-2fc0a96bb565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14f7050-1729-4e04-98eb-011b25fb87c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d62b32ba-4df3-46f8-941d-f2f80dea336b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68bd79e3-36aa-4d9a-ac9d-6f7c203980b2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf88931-fe89-46b6-8828-623a633b5740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0d10d47-8ea7-40e5-bf89-331942342ad6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1078d81-c4ef-49df-93a8-cfac7bafc77b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed4244ad-4180-4632-a179-e3a844733e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c865b7-776e-4518-a1bb-4af17dce2bd7",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a052d539-3d17-4d59-9f10-c25f10380650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb75e8f-d592-405a-90af-458e06d46a01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b260d39-23db-4b86-8716-e8ed014ac0d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72835b4e-d981-46fc-9a7f-ffdbb0899173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13cb02f0-4a21-4cb6-a02a-ecf5d1819ee4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65520117-ead5-4161-bf74-0a56ef7835f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7083da69-4d92-45f7-95bd-e86c13b4c343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1ad20f-b46f-4a02-9224-d13979d8dff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47e968ac-e2af-4698-8a2f-645e48a78c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171fac98-97c8-411d-8932-f382f1245bb2",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922e8ad0-bc03-4a8f-966e-c32518c4e6c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "919bb2fe-7301-4f1f-9fd0-42a22e564b61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16377519-2f69-43ed-a080-4958c4cc226e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb5979f-dcc5-4396-91dd-05f6d459cd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b581ae13-3062-4a7f-8860-de26066f2323",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e3a437-6026-43c1-a9fb-9ba48d78468a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d6242b-a5dd-4305-bab0-4134cd3a054d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "089dc95b-5227-438a-9d0f-fb233348b9d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbb3e198-cebb-4f76-84d3-30d4b501a5bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12fb3d2d-9453-41ac-b5df-3c776e13c6c8",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1407bf-9738-400a-9736-e72fceb51a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc2e0c37-f0ea-4106-88a2-35fd8a254730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "888594a8-609c-4dda-95b8-99a5e1113c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5bc8583-a2db-40af-9bfa-446373b6022d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce4d067-7aa1-4906-88cb-f2dd7a2ec52e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58a807f-ea8f-48ff-ad38-396d4807eac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "604cf92d-3b50-4d3c-851b-12237a33923c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff1ccf9-9ba8-46f8-9385-09ff8bde0925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "328361ad-fb81-40ab-8ee2-418df29ac8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0ae686-8c0c-4c11-ba8c-c4e83681ce26",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6a2282-f317-4ec2-a06e-13cd9c151812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f74a2a0-1f68-4838-8d20-812c1e15eda6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2307600-add8-4920-8d5f-1dcaba72e0ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c5b10a2-56e0-4e07-b998-29390db212b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62773f1-b973-482d-9635-4181e7137d49",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4148ce73-f7bb-439a-886b-fc2c3ca2e61e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8285608b-8a83-44ef-9903-554a56c81594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6342a861-60bb-4f5e-89da-f39b6af0c458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "229ef455-fea8-4753-a8a1-4eb4e15e4679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284fcc60-bd50-4371-96c6-92d79dbc5868",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea80506-b98d-4216-83fb-2b21ffefab42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb77f119-cff7-447f-882b-6c902e6b0cf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9e6b0b-3d07-4e0c-b8a5-db8aaf5929c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e34e1ee-0a9a-4347-be20-4d6c539cf20e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc7d7b4-fff7-4629-8121-d26f92d234a2",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4899dd16-1133-4416-9dfb-4b409e2d43f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd17ad1f-65fd-4908-a46b-5a753d522eef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d255dbae-6b56-4730-b23e-a24ad10d8f09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "892c8f8e-0c39-402a-a15a-a02267f6c4b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ed3a1b-3830-41e1-b8f1-d2503d589e2e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5183fbf1-e971-4b9c-a866-2d41843dbe5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5c9852c-f3d2-415e-a731-79e9957c0091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87791410-86ac-4b58-bc9b-ae769e5c06c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60a25ac9-5c42-4fc9-86f1-abcd9453c760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52aba756-a104-4877-a08d-68a1dbdc6b51",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b4f19c-4203-4ec0-aaca-36bc8f85ac1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "016252d1-429e-4ba5-ba56-ff75861e7761"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "969eb498-5014-4d1c-b5ce-15585fb843c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c869f000-b793-4e3e-b13e-676a869cfd0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e272cb3e-ce86-4eed-8a2e-afa92d96c584",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dccd9f3f-8832-45f1-acec-9f71b77b1977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d91eb1b-229a-4eca-9630-33453958606b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94171be-758b-46f4-a2cd-b1dc20debccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6687beeb-6ae2-460b-b528-6fb67d127286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3707dc8a-dc6d-4d21-961e-1bc412960c8f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae670159-bac8-4139-b806-bd1224b81456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "480a7dab-5259-40d0-8b86-adef678eeb5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1976de-13a0-474b-bc8c-7f7b33cf4b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40ffdf72-bc14-4ff5-b5fc-1a74eedbc5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8320b5-af2a-4b80-b5b2-ed42bb2ee62f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead4785b-82ad-4d91-af53-bfde949eac17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c03e915-36c4-4b34-9588-83ab53890a1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55d89fb-373c-4175-9907-145b6640145b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da0403b-0e0b-4ffa-872a-9c46a80e7470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc2dac4-6155-40a1-8bb4-390e16be93f8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe6aabb-30a3-4d0e-96b1-65b605bac55f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e533ebf-468e-4317-af50-af5ee55768c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae849a2-addd-4395-9526-ba52fd717541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e59476c-bc8c-4994-9538-91ce44657893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b38ce15-0b8a-4fa1-ae7a-02e5029263b8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749bf109-88fd-423b-a9de-531d08610a15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "614dbd36-5036-4331-973d-0242ee2b9975"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7fa8c38-fd75-48f7-acab-a4b72b4cb078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a047ddac-4705-4ca2-90f1-4643713ad31c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709a3bb0-b0f9-4d43-872b-9b856e57cb4f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b17021-00bb-4ca4-9ee1-df7779df85a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87b7b155-3f1e-4522-961f-32a39099b74f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b488131d-a6fa-4058-b48f-7bacd9139ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c65080ce-71f0-4d93-85a8-3ca62c909613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a0f1ae-e9bc-485d-88f4-c10284ef9527",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b8b4f5-dc4b-45e5-88a3-eafc9a3e9e9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "712066a5-93cf-4955-9a61-f49f726850dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "259a67e4-d7b7-4f6a-af45-ae79c3b56efc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8955906e-0fab-4747-a37a-ed946cdda1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650ab830-2275-4a04-bf46-3e13f7f06254",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865b56b3-ffd0-4c21-9207-6bfc527fb5f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e787f3f-c7a6-4508-8cf4-9426455c8c00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b243b9c6-0786-4251-9db9-d789e87885b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11bc2eb4-db31-40ae-a19b-0ecf657d457f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0825f4-890f-44ec-aac4-7c8cb401f60a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ff7165-2e42-4a5d-8e67-af8862d32396",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "672e8abe-8020-4ab0-b6b6-4f49a0296cd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b016319-7206-44be-a18f-f2c48eae44ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bbe1a8a-99de-4663-8a76-601da684fd80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06dbd70-bc06-46d2-87af-a5464c77ec24",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4046ddd2-3443-4606-82c3-62783ecdc371",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9aa58f09-f2b2-4abc-806c-72ef8a6e1177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f52ba9-cb31-4b19-9f41-27f9414fc6a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "183aca06-70e7-4a74-af19-3b18ea474618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b629eac7-84cb-46dd-8bcf-6f470a3947ac",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4651cf-1b71-41f1-853c-4086be7b4de3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2049930b-8258-49ae-acd6-752165fff701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe49384-233d-4cf5-9066-3a9687c47db6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca13ac8-43f2-488c-a854-e8167676f3d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20defafe-118d-4db2-b7b5-4be01a866ee0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9da7a1-c216-4db3-bd4f-7c262c3bea42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ee76e18-a7e5-4dcc-8717-b7ced0f3d951"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e8582c-c259-410f-8258-106ec1f9c78d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dba1edc-df4b-4fe7-ab13-08ff8df6b97a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5dcfca-f9aa-4ad2-8d43-9f46c0775cd5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d4b006-b743-4227-9fc0-b1c13d781651",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df0171b1-f1f6-4070-8ce5-5ded1eb0178a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4bcb07-6066-4a74-8d81-9e8fb45bd848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2960fdb7-7863-442e-8a56-88c27f48b704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a0c3dd-12aa-4e3d-9456-65c5ecab48d5",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff9ce21-baf7-4f88-a4f1-2d7c40caf9f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "733e4bf9-ea5c-4152-acdd-4ea10383b104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dece958-9990-471b-bf1e-e18f744d143b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edb0f183-1e5f-4845-b081-0837dec30453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055790c7-3536-4a8d-95b6-9cf7773f8924",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a88a52-4e7d-4f93-b8f5-833265dd0951",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa13a4a9-ccec-4048-a760-0278dfdecc01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8d750d-d0c5-4ec5-8861-6511fac6f49b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784592c6-c946-4225-85a5-1724c4b16b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1c60cd-862b-4788-bfad-af92c6bb1a90",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72244fe2-2d5d-41ee-b1cb-a1cf293fd51d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7cfc260-daa4-4028-915f-f6c1fa5ac59f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8484cbd-d57d-4554-8d06-cc0311944fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24d8e7a8-5c27-495a-928f-d6153bfc3219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e568db-b5f6-4f6d-9da1-0b2c0d826017",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100a56de-44c7-407e-877d-c9d241545e55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "374b13fa-e91e-4a85-9619-665b6e2a4f44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e6df67-fdb1-4022-a179-966a7a820a8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0356313e-9816-43ff-861f-47da748ca6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b9b74c-7024-4d5a-b376-c878e3556d16",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6535c25c-f4fc-4317-995a-a3587e2be131",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "578f2ae0-fd06-4bbe-b8ed-4579cd2b3287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8c3e8d-b6c5-44bc-b5c8-21500761905a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd7b8be-7a59-4fab-bad7-ea198207035d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d88e962-399e-43e8-b8a7-a1a40f826bd2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6bceea-6983-4c26-a9c4-5021a658ac56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af1c093e-b0e3-4a23-bd17-d3139a056799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc4d073-ee6c-4de3-897e-0d36220ab9c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "972c7527-e0b2-40df-b287-7b69f546a664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9ad3f3-234c-49a8-bffd-5051137b666b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c2eee4-dd50-4975-af82-a02499e8337b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84f45b39-06ff-45d6-902d-48985becffa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3950d5-650a-4a48-94b9-0b9575745bd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "807b1a2c-610e-41c1-81ca-471fea569983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c42479-cbad-4a95-9e34-6176474f0423",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ffaf237-975f-4893-ba8c-2cbdf9f0f073",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "110aa9cc-d46c-4174-ac14-85464a4c4309"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3fe0135-e4fc-4a4b-8676-777847bf53fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bc2a7d9-43e4-4066-8ac4-f07ddb4413c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c13b813-555b-48a3-a01c-98d0e1126e85",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "724dc5b9-2c20-4ff7-90c0-9da98babd0d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c576e7b-9140-4a3b-bb3f-d64e39f89763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e15692-6567-4a74-a276-1d480bddb669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc36796-5fb6-4ff6-b332-447a733e4145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14855f97-ce5e-459e-9180-13bfe2e0c570",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517a215e-d74b-4866-a545-f2123baf4d55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32c1c52b-644a-405f-aac3-07276d6e9805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3555c917-1843-401b-930f-2ce629ed7909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db577d35-f8d5-4c06-91d9-e13eaf184789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6665e6-f533-4e71-a12f-5becc832a0f8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd4a588-bac9-43bd-9013-76af58eecf70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ca623cb-b0f6-4e08-9062-ff50604596f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1dc9eb-bdce-4933-83a2-2c4d387b91d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "313931c6-ed2a-4243-a11c-03588bd7248e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a9fac0-15af-4cf9-92a6-303e4c295eb4",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5cdd046-4acf-49ab-ac4b-06e802c88af1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a43aaa6-b9da-4045-ac9c-02a04fbdeb77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf40a610-fec6-4d1d-8de4-b31d6a1f9993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bc1ba6c-8d12-4286-8361-deacad641f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae55ce5-ebd1-4524-bea8-bc1a24a4ce2a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f3bdb8-9d01-45e9-a5bc-5988c87d7d51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd0076b4-753b-4b23-b621-ecd413f7a67f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f81918-9571-4860-9054-71e4e8dd5fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1332a3d-4250-47ad-a667-0a63deabb31c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb92762-5fce-416d-9cbe-4e8310a6cbbf",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba38e066-35d0-4e9b-9277-5a1d264270d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4edd54a6-936d-4808-8150-94e729f05bd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b32fb76-3efc-49dc-b859-fa142da10be8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e32896-d703-4148-8ef4-eae4ec0f57f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3720ea6c-2b4a-4036-af03-97e7283b0408",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea8f22dd-4fb7-466a-b7af-20af844d3041",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b42906c-d421-4fba-b3ef-9cad016acabc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a17943-155d-4fc9-9e14-484b339c1026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "734dec03-0eee-49db-9565-95398085bec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752dc7ac-b17a-472c-846b-9acff2cedb73",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13496ea-91b8-4af1-86f2-2e4ecd336533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc741635-5296-4799-9914-a0863f93793d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e199ebe7-9234-45fe-96b1-ab62eb79f63d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fe78b71-2b34-49d0-b628-83b91e526222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e30fd03-0614-4ea3-8a62-4ac785ee1b57",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c2964e-638a-4a65-9924-7ef0435a6796",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b262b07-9901-4b81-9ef0-b5740e819790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e19d0e-bf58-48f4-b050-9ddee3ffd3bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02e8e51f-582a-4a88-8352-309371b9efa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef9599c-2251-4663-89fe-1d1fcaa3daf2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ebc464-2c20-431a-a4fe-37e8f0ed2678",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "746d1e69-3a82-45b6-9fb3-1c7a968f7d4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6076419a-f131-4d2c-917f-4cf2fdf8976b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf90ffd0-f2ac-4c17-b35e-dcce73151416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde2ac3c-e559-4a8c-a5c2-09972ecef9d5",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53fe86b-be3d-4bac-a0ec-244ac2a5812d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31efed1f-586a-4303-ac63-0e483e73c873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab31ad0-de5d-4815-81d2-352cff9dfab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40c9c76e-0ebd-454a-9bc8-fc31aec09050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f8a9f4-a6de-457c-b5fe-2a525f5a7e8e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fae73eb-bec5-48bb-82c5-ed0d15c01ecd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "129b7e7b-abb3-48f4-91bc-b7577bbab206"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06931dc-dae6-4710-8184-fc1466ce01bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "433cef1b-96e9-4d98-bb41-a8cfba593eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f32d6af-f878-44b7-804b-e4359776c18d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e95592-357c-4499-bbbc-f878d19fe790",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f1a0c81-2194-4c4d-bf6b-d78b5cebc5e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "780aef11-756e-4fc4-90ea-7cccf3a49c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c3327c9-aa59-42b1-8772-adbcb09158b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a0b363-6844-4c80-a2b1-f360fc269883",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ffaedf-034f-4c28-9435-f3c102ecb65b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6f5a87f-2976-47e2-9300-a87e11265789"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f503936f-0ee0-424a-ae0b-a02f95937a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ae659a-24e7-437a-8c12-63dca3397cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0fd5d24-8bea-40d2-8865-ab72227d1c5b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccc2589-3c40-4edc-9790-99be8e31035f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b158d3e-5129-41da-b677-94871a8e593b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8d26ef-202e-4274-ba47-c4571b4a9fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eeb4e49-58e7-4b98-8793-203ab8b3c657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6deb99-1e03-4103-bf7c-70d0ec741e90",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876d4960-bfb8-4f96-a10d-1b4ad627970d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2a15ae4-8100-470b-b9d8-53736d5d1a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b42c52-bfb8-448d-9612-6d0f4086f0b8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c61652d-a007-48f6-a23e-cf1ad77e4352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b77116-d90f-4382-a1a0-5593f2e8daab",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2788c79f-368a-4a3f-9d27-7c34be2d329b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26b0a3a5-8dba-41d8-84a8-fbce9bc9836d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bc1150-0194-4516-96e4-5c0e7b2b1527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a4a4bd0-7783-419f-8e10-3988295b46b1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a30fa16-2a98-4cb7-a192-c7aada953207",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4db3785e-3868-446e-bb67-b804330f0312"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7b55cde-c916-47e0-ab17-01819641131f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "033a55f1-05c8-4326-a41a-5cd0534c36fa"
                    }
                  }
                ]
              },
              {
                "id": "53d20187-66ee-418f-abb2-9872ebe6ce74",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c587cef4-497c-4fe9-ace3-8d3cc377c2e8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d89de4-4854-4e2f-a152-1d67858f1c2f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6e4e4688-f20b-4f41-9932-ec72604d758b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd705e31-19b9-4010-ba38-fee476ffc5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c02b316-ae75-4b2b-8f63-16d4edbf6c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4ddd9b-3dcd-43a3-ab30-601e60f83392",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d2ec0c-06e9-4109-9721-9aac6c8debd8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e359ad67-70e5-4ac5-a697-0a49ed241f75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c7c602-c3c3-4887-9270-0c26873201eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1db09798-83ed-4e9a-8d95-53ec9f69a98f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc81840c-9b44-46a6-8404-9dddba3cebc8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b84e7f4-d8f1-43ab-aae0-c8c2e319b0c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9550909-9cc4-4d54-8c4b-450e26432bd8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c250cb4-1524-4cad-a016-f46f24a097d5"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "f7a75c19-9bdc-45fc-a2a0-5f84e5d922bb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "26a56c4d-cf0b-4994-ac35-c1e7cd157d28",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "620165bb-b328-41d8-a210-acfe19e2e2ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eb1117e6-73b6-468a-ab83-ba83b8aec1e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5c15063-30a2-4ca0-b5c3-91dbd303c38f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ea67745-e68b-4102-abff-2fa536cc7724"
                    }
                  }
                ]
              },
              {
                "id": "e417b80c-1a1f-49b8-9626-70c5b852a40f",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5ab79f3-d596-49b4-a30d-5670eaff6b6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0bfb156c-51ba-4a37-bab0-c3193abb29b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9785871c-985f-4659-b9c3-3a015a1b6da4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be27ef41-215a-4735-ace5-02719cab49b9"
                    }
                  }
                ]
              },
              {
                "id": "68fd3100-2165-4364-99dc-4f74e175e0ee",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d990f796-96a4-4f48-aaaa-fa13a088e75d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "999b084e-56d2-4e67-92eb-bde6f574a49d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9683fbf-190a-4800-8c51-293ae3fff1ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50754db9-df47-4273-8319-aff290d06fb0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4164ca0-6821-4c59-8cb8-1ba73f7e204d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5a51e0f0-fc82-4b67-98e4-7826876afd3a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2b9f5dc-5c17-4c6e-8163-ecd35bb70c83",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "86a53a2d-8035-4a34-b058-f14a31991919"
            }
          }
        ]
      },
      {
        "id": "2b7b400f-be74-4238-a5af-a337265b8dc5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ef798004-c333-4f83-9103-fad0d4bf9017",
            "name": "Negative Testing",
            "item": [
              {
                "id": "74edc30e-601b-4ade-aae2-2588e9345457",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "812cbb4f-54c5-47b2-a2ae-109330533232",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8d5a18-4ba1-4a00-adf4-efb62c6a2180",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fe358d26-e129-4f26-9832-39a45f4a95ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d343fff4-4962-40d8-94e8-809481f08f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38dec5d6-f4e8-4227-8ef5-d7690c103d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b4f281d-b117-4569-ac34-1cf0441f1e8d",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98e96e5-24a1-432e-bae3-c014cda283e4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "34a31e26-4131-4186-823e-02b09a7cb22f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b53fe66-02bc-427e-9571-361756c0e8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0a8ad8e-0890-408c-9f9d-4c99e277473a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4285b685-3ccd-477a-9d61-13ea837b6a23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "504eb1da-69bb-4e70-b254-ecfbc7eae948"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56e91b5e-fb01-49b0-97ee-f69478182424",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0eeab9b-f645-4aa6-b480-8b3be2b8658b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4d2b637-54d3-4f6d-b06c-99d7a020684b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f4f3d88f-6948-4ef3-b8a8-8a554ee75ecc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "142fbe22-aa77-4920-9f58-832a7fbbccae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ed4a2a4-ca03-4e44-a748-4ef5b867b264"
            }
          }
        ]
      },
      {
        "id": "b9b6cdf0-22c6-425f-b4b6-03276add98ca",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ad8cba53-83b1-49a6-9faa-61ca8a6ac5f2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5a05a703-5585-4b46-ad2e-5335aea412ba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8a0b48e3-6335-4160-9371-6ccc2073c549",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744bcfef-4299-4294-ae68-14f6dc8c110d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "540802dd-0a49-419f-b5fa-14af5a93fdef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "329dee46-0253-4bf7-80ab-a0ac8b200323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24abcfae-0063-4e48-b557-b95786ccb53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00fb63e-9133-4a2b-8409-f32ab4c73e9a",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ad0ed2-0e9c-48d5-b019-f197f2ef45c8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dcc4a18d-6147-498d-9f16-d46332ea80b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eee32ca-6a33-48af-ac09-a61aed73bbb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5fa256c4-1700-4b0f-abe0-8ae659eb2ee0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "956a44c4-47b9-47cf-a584-2a57c76892d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce276c48-432c-45d7-854b-479df15b232d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0abac9c8-cd4c-4062-ac24-dc9515e47cdc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "154f4c83-15a9-4ef2-b7e4-430d0d4450f4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1646f161-32af-455c-82de-ea116ed77e56",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0457cfa8-c4ce-4f5d-ad64-6b227caaf664"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b03c176c-5c0f-471e-9003-d01578a6a22a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0a48291d-ba6c-4f28-8cc1-cace1708d53b"
            }
          }
        ]
      },
      {
        "id": "a8423a79-1280-49d5-a351-b1adff7dcd58",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "824cbd46-3a81-45f9-9ae7-3dee04a96973",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a79944fa-f3dd-4fbb-ac88-76e921210642",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b144c1c2-2300-4ea6-9164-adcf0cac7afc",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d2516a-708e-425e-9081-6173be6042e4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "73ca7de6-84b2-442b-a902-3a9fea5b4021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcef95b1-167d-4601-9591-7c7093587a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13be953d-08ec-4110-93d1-bd2d6c720010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d70782-b09a-4f3d-b47d-a6c9c54a150d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7e9779-c5f5-493d-b0b7-a795303504f9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5e5bd611-c689-4682-83c2-0cc6e2fe11fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbac418-720f-4974-972b-8c1d4f29b606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a39522af-4093-49ed-af29-ca2457309e4d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd002250-6b9c-4488-a969-28154bfeccff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e3e65bc-9456-4ad0-b182-a9488aacfbb8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "accd13dc-520e-4ac5-b96b-0350812fb1a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44cb84f6-7ef8-4f44-b6d5-8fb9cb9e4638"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7cd1dc16-1be8-4688-98be-582e22daad36",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9e98a518-4e78-419d-a3a9-08291f066e5d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b961b33d-9db5-4989-b602-5477aa80ec85",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6222e8b2-d567-4ecf-9a31-51c78b75fbd6"
            }
          }
        ]
      },
      {
        "id": "9e00c928-7a52-4a08-8779-0aaf70e5dd31",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "838bb41f-ec86-4bf5-b2bb-022487d1a1cb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "de88523d-55bf-4bd3-a4d6-12e770e88f3f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1796a041-003a-4a35-a6f2-6b1a26cd1e12",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3617f26-23e8-4a69-9788-79b37a9533ab",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31ebb13e-2f43-4d23-bf69-dffd826c0808",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 90
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 67.58461538461538,
      "responseMin": 4,
      "responseMax": 737,
      "responseSd": 124.86437470714344,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1668127875387,
      "completed": 1668127903948
    },
    "executions": [
      {
        "id": "49a15df3-5ce0-4310-be78-fe2c06d39562",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9d14284a-1af4-41e5-9dcd-d9f7bc85b7d7",
          "httpRequestId": "0681364c-cbd1-4085-8525-e682be9c8f1a"
        },
        "item": {
          "id": "49a15df3-5ce0-4310-be78-fe2c06d39562",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e45c85ec-768b-40ed-872d-bea9a5722fd5",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "41e62949-0b70-4064-a011-dd1f4240c05b",
        "cursor": {
          "ref": "ede2b0b8-db50-4d61-9d99-1dd75509752e",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4e9f2cd7-c8cd-46ca-b6d3-0ece11d1cb3d"
        },
        "item": {
          "id": "41e62949-0b70-4064-a011-dd1f4240c05b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ef315cde-785c-4697-8e18-3f515edf7987",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "b512774b-37d1-4cde-884b-ad0c3e85b6d5",
        "cursor": {
          "ref": "35f1704c-03e3-402e-aca7-b5a8bb459c34",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0f169a9e-9e88-409a-803d-69802498b6f1"
        },
        "item": {
          "id": "b512774b-37d1-4cde-884b-ad0c3e85b6d5",
          "name": "did_json"
        },
        "response": {
          "id": "692bf276-482f-4538-8488-18da6db125c5",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89cdf2ee-4833-4c76-9ce4-60114dd8ae57",
        "cursor": {
          "ref": "d6063e5b-2e8e-47e6-b5d8-256bc7435c14",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0d72cbbd-7398-4c10-a9ad-135bf10ec1f0"
        },
        "item": {
          "id": "89cdf2ee-4833-4c76-9ce4-60114dd8ae57",
          "name": "did:invalid"
        },
        "response": {
          "id": "5936da19-7643-4c7c-a524-64d0e4859eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89cdf2ee-4833-4c76-9ce4-60114dd8ae57",
        "cursor": {
          "ref": "d6063e5b-2e8e-47e6-b5d8-256bc7435c14",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0d72cbbd-7398-4c10-a9ad-135bf10ec1f0"
        },
        "item": {
          "id": "89cdf2ee-4833-4c76-9ce4-60114dd8ae57",
          "name": "did:invalid"
        },
        "response": {
          "id": "5936da19-7643-4c7c-a524-64d0e4859eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa0113f-b69b-4e0c-aaef-9749407b4611",
        "cursor": {
          "ref": "6b585a6d-34d6-401c-a9b7-4d444138e427",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d385b54f-578e-41ea-9cf5-8cceb91b3394"
        },
        "item": {
          "id": "5fa0113f-b69b-4e0c-aaef-9749407b4611",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "da6e2c1f-ec18-4d11-b2e5-7701bb92ed48",
          "status": "Not Found",
          "code": 404,
          "responseTime": 159,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f65b17-3d17-490b-9a3f-cdb5c587ad6c",
        "cursor": {
          "ref": "02184552-de74-48cb-a057-d9c6eaa4eb85",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a57d0008-b3dd-4bef-9914-eebd458aa6d5"
        },
        "item": {
          "id": "17f65b17-3d17-490b-9a3f-cdb5c587ad6c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bfa9ce00-550d-4957-8201-db5704e2eb69",
          "status": "Not Found",
          "code": 404,
          "responseTime": 7,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3b5957-4f9e-4a03-b19a-564140beb0df",
        "cursor": {
          "ref": "0115f2bd-68ed-44a7-93ae-86d20998dde9",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "16804522-7600-43a9-a039-31fa38dc3efa"
        },
        "item": {
          "id": "5e3b5957-4f9e-4a03-b19a-564140beb0df",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ed663cd8-2abe-447e-b5e2-e19a324b7ab5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a9d1083-3eae-4dfd-8410-6cd7f95e0ba1",
        "cursor": {
          "ref": "2beeee7e-778b-4e71-9019-dc4747d7299c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ed0d7854-84e0-4fa5-8119-8df1b848ffd5"
        },
        "item": {
          "id": "8a9d1083-3eae-4dfd-8410-6cd7f95e0ba1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8d3fe68f-026a-42a4-a904-e3f1feda3289",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a9d1083-3eae-4dfd-8410-6cd7f95e0ba1",
        "cursor": {
          "ref": "2beeee7e-778b-4e71-9019-dc4747d7299c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ed0d7854-84e0-4fa5-8119-8df1b848ffd5"
        },
        "item": {
          "id": "8a9d1083-3eae-4dfd-8410-6cd7f95e0ba1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8d3fe68f-026a-42a4-a904-e3f1feda3289",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3e9731-3875-4f82-b86b-3a5812d65654",
        "cursor": {
          "ref": "460fce0b-8aea-47cc-90bf-e5ea79999d2f",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0619be68-7627-4d54-afd6-f688b4e7c29a"
        },
        "item": {
          "id": "be3e9731-3875-4f82-b86b-3a5812d65654",
          "name": "identifiers"
        },
        "response": {
          "id": "2a373f98-a3d0-4260-82b6-f2c55093c4a4",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccaf2836-808b-45bf-a5a0-1a82c6899db3",
        "cursor": {
          "ref": "8d841176-b373-42f6-9a90-806575c8ae35",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ebec3970-6c85-413b-bbe4-0acedbd867ee"
        },
        "item": {
          "id": "ccaf2836-808b-45bf-a5a0-1a82c6899db3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "348ceab7-70a5-45e4-a27d-35b285190a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccaf2836-808b-45bf-a5a0-1a82c6899db3",
        "cursor": {
          "ref": "8d841176-b373-42f6-9a90-806575c8ae35",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ebec3970-6c85-413b-bbe4-0acedbd867ee"
        },
        "item": {
          "id": "ccaf2836-808b-45bf-a5a0-1a82c6899db3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "348ceab7-70a5-45e4-a27d-35b285190a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ed7e9c-3bce-43e3-a346-897063c930e0",
        "cursor": {
          "ref": "f429f6c3-7936-484f-9226-5ae4060ed7ed",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "cbf34420-4c56-4827-8390-80f99bea6032"
        },
        "item": {
          "id": "66ed7e9c-3bce-43e3-a346-897063c930e0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "530004e2-21b8-46bc-822b-ee793264abb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45caa9d8-c420-440a-9b61-c54c3c863ff5",
        "cursor": {
          "ref": "2fb898fb-ac58-47c7-b827-f97ab199cd8b",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a3bb55c7-9218-4773-aecc-ba95a4a2b092"
        },
        "item": {
          "id": "45caa9d8-c420-440a-9b61-c54c3c863ff5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9241d620-0e9f-4f0f-93bf-b6c2b24e885f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc892bb-684f-41dd-abfb-877e2a99b5bc",
        "cursor": {
          "ref": "a18b4380-1e70-40e3-8494-d4ba8bd259e9",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1420e5c5-9447-480e-bb13-45ac992b2a90"
        },
        "item": {
          "id": "bdc892bb-684f-41dd-abfb-877e2a99b5bc",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ca16a1b1-6869-4a5d-ad9e-d4db27dd7f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e08f62-95d0-4160-912e-9cd23ddbe08d",
        "cursor": {
          "ref": "ab3f12c0-dfa4-43de-a450-9add0b432166",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "55abc628-4a55-46b7-a209-7fd30e11c445"
        },
        "item": {
          "id": "22e08f62-95d0-4160-912e-9cd23ddbe08d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "dff46a00-2013-4c70-9676-0686107c78cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6352288-2e5a-4e9f-8b8d-451786f59738",
        "cursor": {
          "ref": "d919f3f7-ee6a-472a-8764-d01d9b78a341",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6f5a5905-0ec5-49bf-90f6-1dec5753779e"
        },
        "item": {
          "id": "e6352288-2e5a-4e9f-8b8d-451786f59738",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a389f5cc-da48-46c9-bba6-8d5601343c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339e4930-ea75-49b5-9286-97054211c075",
        "cursor": {
          "ref": "e92692cb-0803-4df3-8435-c2743b6c9673",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8167d59d-9edf-4cd7-9672-875b7771855f"
        },
        "item": {
          "id": "339e4930-ea75-49b5-9286-97054211c075",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "38f4bd36-ef6d-44a2-b550-2cc8927b5f67",
          "status": "Created",
          "code": 201,
          "responseTime": 517,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "7d0de82c-f592-404f-a679-96bae8dba8c2",
        "cursor": {
          "ref": "f45742f8-70ac-4676-bc28-c8f5e320582d",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0e3f9ca9-a7ea-4d50-93db-39bd18528261"
        },
        "item": {
          "id": "7d0de82c-f592-404f-a679-96bae8dba8c2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "dfc056e6-5190-4ec0-8785-b0f2d18b3edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d664b58b-04f8-4741-a304-32b2aba64782",
        "cursor": {
          "ref": "ed30be62-d012-49fc-a407-7bdc5d4c3af1",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4dce0388-7ce6-41ff-b8bf-12ce6c9fd41e"
        },
        "item": {
          "id": "d664b58b-04f8-4741-a304-32b2aba64782",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "bdedc4cc-2989-46e2-ae59-80c96e1e53a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a5b5e1-001a-4f24-ad40-c92800c125ef",
        "cursor": {
          "ref": "fabb41bb-0b51-457f-b0bf-43e4e95e2659",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4f2ea08e-5e26-43bc-8d94-4fae89142c7c"
        },
        "item": {
          "id": "c4a5b5e1-001a-4f24-ad40-c92800c125ef",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e01ed039-bd96-4138-b9db-e0e941b92c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a3faf4-4545-4c5e-b7c0-be7cbd08f7e2",
        "cursor": {
          "ref": "fbb52e98-2094-4b5a-b1e7-13f10c383b3d",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "26709f80-f941-495f-88aa-65d844f89576"
        },
        "item": {
          "id": "f4a3faf4-4545-4c5e-b7c0-be7cbd08f7e2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8c7ce67f-354c-43b4-b2cd-4cf31be53354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00259094-f06f-4767-8ef2-9809a55ba487",
        "cursor": {
          "ref": "bd91a5aa-21e9-4c9f-97fd-8d6c3ad3e57e",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "282b8f13-e8fb-4a66-a9c2-d6805c6acd20"
        },
        "item": {
          "id": "00259094-f06f-4767-8ef2-9809a55ba487",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0c9e4e5b-275d-4c78-bb99-d1a7b5d2e664",
          "status": "Created",
          "code": 201,
          "responseTime": 469,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e6c56677-8dc7-4ca0-80fd-f5c6fb531d6e",
        "cursor": {
          "ref": "43d64ac2-8e32-4465-bf9e-a5bc6a7fce2b",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "deef36b0-92b6-4689-be9a-6c91d1076e18"
        },
        "item": {
          "id": "e6c56677-8dc7-4ca0-80fd-f5c6fb531d6e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c2c17cb8-edc8-49f6-8886-9686d82a4c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb8eb14-0d2e-409e-88fb-1d4ada85258a",
        "cursor": {
          "ref": "b84717a4-2a89-4801-a821-2eb2bdf2f7d3",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e2137311-656e-4a7c-b135-78a4954f186d"
        },
        "item": {
          "id": "bcb8eb14-0d2e-409e-88fb-1d4ada85258a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "99106293-bd9a-4f1b-99d1-776cce687e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64edbe09-4514-46f7-86d1-00a9e44d912f",
        "cursor": {
          "ref": "224972ed-fd70-4701-8e03-8e135006e3fd",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e494d81d-4b78-4864-b8a1-193ea44ced47"
        },
        "item": {
          "id": "64edbe09-4514-46f7-86d1-00a9e44d912f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e74efbe0-b553-45c9-84bc-f2631ffe0476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f158405d-3943-4ab1-8638-3d762f29c873",
        "cursor": {
          "ref": "80f3a901-0955-4a7e-a8de-d770baf3b9df",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8b589777-00a3-473f-84a6-1d4c725d621e"
        },
        "item": {
          "id": "f158405d-3943-4ab1-8638-3d762f29c873",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3757fc1c-d348-48d4-aeb2-172fede428db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d58051ad-0cca-49e2-9d7c-d00431646e06",
        "cursor": {
          "ref": "4a7f1223-4738-42c6-b713-122d524a48e8",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e53582e5-a965-4cc1-b8a3-a0470d954c98"
        },
        "item": {
          "id": "d58051ad-0cca-49e2-9d7c-d00431646e06",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "77a1d898-74b6-4d07-b408-196332b91ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d497ea55-3e41-4a9c-afa0-a60b13df85b1",
        "cursor": {
          "ref": "956131fb-089d-4e93-b84a-8c9e21a48f6d",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9e45ad34-226b-4a81-876f-5d0c415ac283"
        },
        "item": {
          "id": "d497ea55-3e41-4a9c-afa0-a60b13df85b1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5b6253d5-392c-4fac-9a4a-1fea60faa337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "199a73d7-8c52-41c6-b1c4-5180c5069c6b",
        "cursor": {
          "ref": "e78fe2fe-b602-4a5c-9f96-09e3066d070c",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "242b3877-9f10-4b2e-93c1-d2b9f98d3e4a"
        },
        "item": {
          "id": "199a73d7-8c52-41c6-b1c4-5180c5069c6b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "dc50ace7-e795-4737-9062-3d74fdfc3ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd0d368a-5944-45ce-b0b0-b5c569a92272",
        "cursor": {
          "ref": "98fb7873-9882-46c4-8d02-60c10f7d182c",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "296ef1ce-2026-4fdc-b832-005d08ed5ccd"
        },
        "item": {
          "id": "cd0d368a-5944-45ce-b0b0-b5c569a92272",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f8d19082-fe45-49ba-bb77-aa2a998482d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32842820-ad16-434d-a2b3-f2470cb7f86a",
        "cursor": {
          "ref": "50585e26-0a2d-48f5-b66a-e7acfa64ee92",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "64dd8494-98cf-4a15-ae63-bf7165bbae86"
        },
        "item": {
          "id": "32842820-ad16-434d-a2b3-f2470cb7f86a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "98c94c4c-cbe4-4b9c-8a6c-9b35cfd00154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dee0142-9de6-4072-8616-df690abc4d75",
        "cursor": {
          "ref": "671fe614-c8b6-4b68-b527-75ca12d34857",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6ea80355-5082-476b-a443-9b8f64a7d2d7"
        },
        "item": {
          "id": "8dee0142-9de6-4072-8616-df690abc4d75",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a7199afa-d745-4c88-9152-479008f93563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "529f0b1b-c14c-4dc0-9f85-1f3dae630aad",
        "cursor": {
          "ref": "5c28d0df-ec76-46f4-b30f-ea85678010ca",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4d02e3ed-4ad5-4d4f-a821-fee1cb3858c3"
        },
        "item": {
          "id": "529f0b1b-c14c-4dc0-9f85-1f3dae630aad",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b0d4b133-7654-4e57-960e-8e781c205a8b",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "8dbbb2f6-efe4-49ba-b969-b79234add83e",
        "cursor": {
          "ref": "09ec83ca-7a95-434d-8d62-ecec35ce47c2",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6b907c04-70e8-45ab-8782-290fafaf68b1"
        },
        "item": {
          "id": "8dbbb2f6-efe4-49ba-b969-b79234add83e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "04202f76-a896-4fd3-89e0-af88cce9a22e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65321a7d-9c89-459e-a811-d35a763dc317",
        "cursor": {
          "ref": "82f022cf-5a27-4a07-8f47-9ba4ee66701f",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ce78008b-8448-4309-954c-9bcfc9c6f292"
        },
        "item": {
          "id": "65321a7d-9c89-459e-a811-d35a763dc317",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5aa8078a-fc13-417e-b1d1-c601b2b16cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b752bacb-78cf-4d84-a01b-869fa8635744",
        "cursor": {
          "ref": "bb2d6cd3-488f-4363-bdc0-845616d26ca0",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "94b35159-1874-4ce7-ad2a-fcfc34f7093e"
        },
        "item": {
          "id": "b752bacb-78cf-4d84-a01b-869fa8635744",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "96b699dc-da69-4e7a-9911-542dc1da5007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7167844c-cd68-411d-90f6-732007880134",
        "cursor": {
          "ref": "40cc86c6-af64-42f4-a5c3-22a21d5f8c37",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d406601d-b9d7-42ed-8938-036d3c807a6e"
        },
        "item": {
          "id": "7167844c-cd68-411d-90f6-732007880134",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "cba232ce-205d-493d-a747-6518d2374c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4e8683-798a-4515-934b-f66d54f51af5",
        "cursor": {
          "ref": "a9e831db-0320-41b5-b1a3-8fcd5e85d299",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c15b5fe9-05fd-4b2a-bbc7-dab12f7b7490"
        },
        "item": {
          "id": "eb4e8683-798a-4515-934b-f66d54f51af5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d984dbe2-0f56-42e8-a823-dab927acbcea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae51c0d7-bfff-45f4-a94f-9322bd6102f7",
        "cursor": {
          "ref": "9984417f-b69a-4f54-bdc0-abdeb9352ecd",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d982df56-4146-4716-9d7b-a86ec1b26f5b"
        },
        "item": {
          "id": "ae51c0d7-bfff-45f4-a94f-9322bd6102f7",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "dae19b1b-e8b9-4ec7-bf9d-85e2347e1c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00eb8e7e-d02d-4937-86c7-279327bbe4c2",
        "cursor": {
          "ref": "c6fbdc7e-1d99-498b-8c1a-6fcd88baec6b",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e06e787a-5e77-4b94-a1a4-4e5045e1cff7"
        },
        "item": {
          "id": "00eb8e7e-d02d-4937-86c7-279327bbe4c2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1da1ac64-5ba1-468a-b5a7-eaeade28eb85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789ab8a2-9c32-4cb8-997c-2f00cdc077f2",
        "cursor": {
          "ref": "bc7390bf-4f7c-44e8-b96c-f0b8db34088b",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "71afdd19-edcc-492c-87f8-d2db0f5434dc"
        },
        "item": {
          "id": "789ab8a2-9c32-4cb8-997c-2f00cdc077f2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "34949e17-d437-4af7-a0b4-d85c02e03f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9c933d-3fb5-42bb-bedd-ea5ffcd6c3f9",
        "cursor": {
          "ref": "3803423d-31c5-45b9-8af5-bb5467c63a42",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "25caa928-52af-43b4-8043-f0e54cb07308"
        },
        "item": {
          "id": "4d9c933d-3fb5-42bb-bedd-ea5ffcd6c3f9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "584edadd-b620-4297-a283-cf394c210e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0d01e4-fe93-4f30-9081-bed89016672e",
        "cursor": {
          "ref": "c86836a2-5829-49e5-897c-c7d7e7801a8e",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d9ee982d-fa14-45bb-9567-5b26f4852bef"
        },
        "item": {
          "id": "cc0d01e4-fe93-4f30-9081-bed89016672e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "25ff0183-e533-4eac-90ca-5511a7f8c02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f722a15-7eea-46f0-ba9a-4eee847b79c2",
        "cursor": {
          "ref": "853dfbbd-1d63-40e9-b54f-4cc2e2c53b63",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "69752b10-6ec3-4c78-9560-5dbbf23a1dc9"
        },
        "item": {
          "id": "7f722a15-7eea-46f0-ba9a-4eee847b79c2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "098feaa1-50a9-4fb3-9c67-13651bf079a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091dceae-18e1-4fc1-b0c0-d1d9e12e6f4d",
        "cursor": {
          "ref": "60b8dfe4-8505-4c6f-85b6-10449058e59b",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "34c6059e-1057-4158-a4f7-88cb0dc26db3"
        },
        "item": {
          "id": "091dceae-18e1-4fc1-b0c0-d1d9e12e6f4d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "cd485d65-cf79-43dd-9ea2-e1e740f6a38a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccbedc84-ec32-4eae-bcd7-f80439093139",
        "cursor": {
          "ref": "aa10964f-15ef-4887-9a16-de0ec07a8a06",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a58cce67-978c-4f99-adb0-a0d7bcd6f98c"
        },
        "item": {
          "id": "ccbedc84-ec32-4eae-bcd7-f80439093139",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8b272aa6-e8b5-435a-851a-c851018a5724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "72506901-d061-487e-83be-40f5a2d12b15",
        "cursor": {
          "ref": "25d2c8e5-a1d0-4fdb-b693-e113cda269a2",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8058928c-9ef0-48fc-abbe-d14066605355"
        },
        "item": {
          "id": "72506901-d061-487e-83be-40f5a2d12b15",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "72f0764c-529e-4e03-a63c-19113039a93f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3cc4612-f5d0-41a7-995c-f9bfc160ccd2",
        "cursor": {
          "ref": "30d8dd98-b209-4ac3-8c8e-a7f6b3d9563e",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "478a74f6-a92c-4464-92c5-c7c241e8e8fa"
        },
        "item": {
          "id": "f3cc4612-f5d0-41a7-995c-f9bfc160ccd2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "35918475-2cd6-483b-b3fc-efe118018aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a1d044-a1ad-4688-a0da-ef1679e8ffdf",
        "cursor": {
          "ref": "84f43f3f-e935-4b15-873e-c541c1c93312",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "fa90b3e2-f475-4039-97c9-85c1a51405a2"
        },
        "item": {
          "id": "51a1d044-a1ad-4688-a0da-ef1679e8ffdf",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "357c7431-c89a-4b2d-a3db-47428405687f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a5f653-6eb3-4064-b554-136768d97159",
        "cursor": {
          "ref": "4a6fb02d-8059-4455-a69b-0480d1c27722",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0399db36-fad9-4689-8d1c-715bd3a34f3f"
        },
        "item": {
          "id": "08a5f653-6eb3-4064-b554-136768d97159",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e58e6027-582d-49f5-a9d5-56460216d093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d187343f-eb79-48f1-bebc-ad3f4bc23d14",
        "cursor": {
          "ref": "cd9bc5b1-0e7c-42bb-bc31-65b4952b1c27",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "981d86e3-162f-4b2f-a348-fc70944c712c"
        },
        "item": {
          "id": "d187343f-eb79-48f1-bebc-ad3f4bc23d14",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "64640ee8-e243-406e-9f4a-aac94799442b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1144e673-bf67-485e-ae2c-e4e91526f62b",
        "cursor": {
          "ref": "d540a60d-6ee2-41a7-b7df-4a0b2c8063b6",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f56059bf-8a3e-43bd-9e1b-cd82ae0c1800"
        },
        "item": {
          "id": "1144e673-bf67-485e-ae2c-e4e91526f62b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "95513f09-17ff-4a7b-8875-f3b4808fef95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9c99eb-3b2c-4675-bc1f-3a2d3b16454e",
        "cursor": {
          "ref": "05ee1173-691f-4a81-a717-7ea5f5a20aad",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ef5079ee-387d-4275-b25c-d24ebf501343"
        },
        "item": {
          "id": "ea9c99eb-3b2c-4675-bc1f-3a2d3b16454e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "15fca3c1-92af-49ce-a20c-2de27e3622c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "af4519a2-d76f-4b3d-b70e-425bab163d20",
        "cursor": {
          "ref": "46312db0-53a0-45c0-a4aa-be308b8c071f",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f1807f51-4e28-4611-9003-1086d4099168"
        },
        "item": {
          "id": "af4519a2-d76f-4b3d-b70e-425bab163d20",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8932f5bf-66d2-4927-a54e-5fc10b3bca83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08062c9e-2988-4bd9-9943-170aabc6f911",
        "cursor": {
          "ref": "9d146877-e2c9-4f1f-85a3-76b1f27fcccd",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ee175639-dd7c-4dc0-bd18-bc48ebcca827"
        },
        "item": {
          "id": "08062c9e-2988-4bd9-9943-170aabc6f911",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "eef6b2ac-e8b9-45be-b416-8587bbd1db83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1bb8b4-e0b9-4fde-aa32-afa7b3bd8f6a",
        "cursor": {
          "ref": "f41720eb-418b-4f19-8e3e-cc10560fb51e",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bb25f42b-b488-4640-930b-a4b9d9edcf88"
        },
        "item": {
          "id": "7f1bb8b4-e0b9-4fde-aa32-afa7b3bd8f6a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "bbce5959-5f0f-4bf4-9fe0-96e3212d8727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5174db2-1336-4ae9-857e-c439db094521",
        "cursor": {
          "ref": "f3e6a88c-7025-4468-b825-c7727328314c",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "817cf610-eab3-4677-b760-b93737202e1b"
        },
        "item": {
          "id": "f5174db2-1336-4ae9-857e-c439db094521",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5d1f25f0-3882-4f74-a45e-37f66f34e42a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a30938-4bbc-407f-a4cf-beebe092b6bc",
        "cursor": {
          "ref": "2c9ce23c-dbbb-469c-877a-26596ca7d57a",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5cbd9f85-c022-4f83-ad99-9d50a6d4610f"
        },
        "item": {
          "id": "b2a30938-4bbc-407f-a4cf-beebe092b6bc",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0806bb8e-2000-47c3-b24c-93d1c908ff8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e74cd72d-a38f-4b19-8758-636c6050cf4c",
        "cursor": {
          "ref": "4b315db9-a006-480a-80e0-64e478b0337e",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ed26b431-7f8a-402f-b23b-f7474894aa4b"
        },
        "item": {
          "id": "e74cd72d-a38f-4b19-8758-636c6050cf4c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1616af85-9cb9-4197-908c-dc3e872b1a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968e8dc7-a060-4033-af4b-b6b2bd58d569",
        "cursor": {
          "ref": "3c7db518-bd65-45e2-9ec7-9c57adbd018d",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "11abc4a8-b511-4309-b2ff-3ccc117ae9bc"
        },
        "item": {
          "id": "968e8dc7-a060-4033-af4b-b6b2bd58d569",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "64f1d98d-63f3-45a6-b130-da33bf9faf99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f851f28-1bb8-4c35-b664-6062421ee241",
        "cursor": {
          "ref": "eed9399c-6ef9-4e55-8c65-c1c4558b94d1",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "08de5643-f77e-4571-9b21-64e9c8e8023f"
        },
        "item": {
          "id": "7f851f28-1bb8-4c35-b664-6062421ee241",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e5f8b2c2-efbb-48d1-b72f-6c300b33f724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a392930a-dcf6-4db0-9a85-46f9e50034df",
        "cursor": {
          "ref": "d8c0fe6f-2c61-4ca3-b3d2-1a9efdb03af3",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "dacb1661-a30f-400f-9e59-c33a880bcd21"
        },
        "item": {
          "id": "a392930a-dcf6-4db0-9a85-46f9e50034df",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ea355488-848a-475b-8125-e8c8c69e2905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e8a5e5-e2af-4412-8ed1-f3b4cc706e81",
        "cursor": {
          "ref": "e234c56a-2e4e-458d-961a-bcdf2275f4f3",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "35d18024-7abc-4dc9-bf47-d6f2276434f9"
        },
        "item": {
          "id": "10e8a5e5-e2af-4412-8ed1-f3b4cc706e81",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e60c5d19-4456-45e4-958d-e41bcdd39aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b99421-7c01-4b54-9cc4-f18dbf96da0d",
        "cursor": {
          "ref": "60f989c6-73a6-4f6d-a947-77807cc32c69",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "facc21e6-6ea5-407c-ae64-2556dc606ddd"
        },
        "item": {
          "id": "e1b99421-7c01-4b54-9cc4-f18dbf96da0d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8a96f02f-ea8e-4fb8-8f1e-7858c735cc12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2995a7b6-e8c9-44da-9f23-bc8ee4cd443e",
        "cursor": {
          "ref": "af031937-92db-4e62-96ca-64f4ea2561b8",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9676eaca-4d91-47c7-9e19-f230e04b064d"
        },
        "item": {
          "id": "2995a7b6-e8c9-44da-9f23-bc8ee4cd443e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "54fad73c-a91f-4917-9655-3f813c6d5a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8c4144-13a3-4b88-b52f-b77cc22d8318",
        "cursor": {
          "ref": "64f4d94b-adae-47c3-8c4d-cae8c9005466",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "880c673f-03c8-4a9b-a027-5f69c52d0665"
        },
        "item": {
          "id": "0d8c4144-13a3-4b88-b52f-b77cc22d8318",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "433894d2-945f-4112-a081-13f5ed5eb46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c01321-67dc-4f25-8d93-ab95f7092459",
        "cursor": {
          "ref": "f9135f52-7711-4d80-a1ea-95d35ae4bc7c",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "abc46632-c99b-40eb-a006-e0ea1f08fe40"
        },
        "item": {
          "id": "d5c01321-67dc-4f25-8d93-ab95f7092459",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "30be2aff-d1d7-4c92-a72d-f622504dc3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b632819b-ea75-44f4-b427-15cb0a7bf06a",
        "cursor": {
          "ref": "cf627fae-f071-4d08-9075-0aac842cb480",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "0b28b260-8a05-44ed-a1fc-183d4abbf97b"
        },
        "item": {
          "id": "b632819b-ea75-44f4-b427-15cb0a7bf06a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d44a691b-4916-4a30-a59f-219dff92de55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab8bd41-1857-480f-a8fa-4ad1338da416",
        "cursor": {
          "ref": "6f89d5c6-4d58-4ba2-9253-9ebe2ae24dd6",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7dfa6fdd-51a1-4f48-b8d9-9aadecb71772"
        },
        "item": {
          "id": "fab8bd41-1857-480f-a8fa-4ad1338da416",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "41126db6-ad24-41ac-aa45-ae3e21c83a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8f3a41-5f71-40eb-84b4-14db4115e339",
        "cursor": {
          "ref": "3d47625b-cccb-4d55-9bde-4d307e1921fd",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d67cb228-9c1a-4e8b-9148-797f4e8d66a0"
        },
        "item": {
          "id": "5e8f3a41-5f71-40eb-84b4-14db4115e339",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0352075f-45c7-44c6-9f06-edef0edc29ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 325,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50532322-e9c6-4695-9946-04e65c420dec",
        "cursor": {
          "ref": "4cecdcf0-a647-41be-8b04-6c25e2131a69",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "77ebc890-11de-4000-bba3-5178b35931ea"
        },
        "item": {
          "id": "50532322-e9c6-4695-9946-04e65c420dec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "78bae0c6-3cb1-4c40-802e-16f095c8f327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e3a999-faff-46ec-b64e-b8dfa0526970",
        "cursor": {
          "ref": "13959e91-54ce-4c9a-a8f4-bfa801e69b3a",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f567c1c4-0cae-43bd-ae48-d6036f719ef7"
        },
        "item": {
          "id": "21e3a999-faff-46ec-b64e-b8dfa0526970",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "df9aacd2-37b0-44ba-bee9-b7ab6ae67e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c224db26-ec98-41f3-9f66-2e147f44f8c8",
        "cursor": {
          "ref": "df8908f7-80c8-4710-95f7-24569a368b2a",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e3f3f319-a50d-4f6e-8a14-f8771cd06bf2"
        },
        "item": {
          "id": "c224db26-ec98-41f3-9f66-2e147f44f8c8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "21c9719c-1ab5-4ad9-bc27-c33fb0cb45db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "954e4ee7-5fca-4aad-b354-89ef2447d7c8",
        "cursor": {
          "ref": "57ccbd35-b455-43da-8b6d-1393decf934c",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "58bf7426-d36e-41c0-8c7e-e08b47265bb5"
        },
        "item": {
          "id": "954e4ee7-5fca-4aad-b354-89ef2447d7c8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d6f565a6-cfc4-4973-ba16-fd3f7b45954b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c85495-8728-4712-897d-da3430e6e89f",
        "cursor": {
          "ref": "80f26de6-db5f-49a7-9f61-0b010efee211",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "25e89a18-3ecd-485d-b1ec-04578a1b407b"
        },
        "item": {
          "id": "22c85495-8728-4712-897d-da3430e6e89f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b4b6fc0d-16a1-4ec7-a8ef-fe11c3203f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33be675a-f30b-4465-bfbe-c05411413307",
        "cursor": {
          "ref": "7cb8985a-caa0-45b2-ac23-fa3e8ac8337b",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "43faba84-2bd2-427e-91e1-152de922d126"
        },
        "item": {
          "id": "33be675a-f30b-4465-bfbe-c05411413307",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "289424ab-7c11-42d6-a2c8-cfe1315fc6cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95741ca7-59fd-4e37-a9cd-7beb98723af3",
        "cursor": {
          "ref": "1d54cdca-5d25-485f-9d04-d37c6e7280ea",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8eb307bc-db44-4100-aef0-e6f8d7cb3026"
        },
        "item": {
          "id": "95741ca7-59fd-4e37-a9cd-7beb98723af3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "59f1ccf1-c762-449c-8186-3bcc0fe83e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff46aa3-4d64-413b-98f1-163da67b3c15",
        "cursor": {
          "ref": "5c6d6b13-f7e1-4b50-bbc0-8e3b8a2d4bc3",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "339fc026-ce81-4c3d-8033-4a07a00b18a4"
        },
        "item": {
          "id": "fff46aa3-4d64-413b-98f1-163da67b3c15",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3d326af6-7359-4876-935c-11fb10e2f030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42750de0-17f1-4826-8505-60d9110ffe92",
        "cursor": {
          "ref": "3aca41f3-f993-40b3-bd09-401523d1698d",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "13ef1d04-4b59-4e70-9e06-7f434c0186e6"
        },
        "item": {
          "id": "42750de0-17f1-4826-8505-60d9110ffe92",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c83261e5-9664-47d2-87e3-6283e77c0577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102ea472-41a0-46c3-b77c-44446fe7afd9",
        "cursor": {
          "ref": "89cf3d8f-9505-4902-8ab9-73e8582180e3",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d73dc5fa-80cb-4daf-bea9-ca8359592585"
        },
        "item": {
          "id": "102ea472-41a0-46c3-b77c-44446fe7afd9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "53bc57e6-5de9-4150-87f4-f45063705f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a5064ae-ffa6-4126-932d-1aeed5d0929b",
        "cursor": {
          "ref": "a8dae793-a50e-466a-b958-e3b85760ecbd",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f434b615-db38-4b5d-926c-0960161d9579"
        },
        "item": {
          "id": "0a5064ae-ffa6-4126-932d-1aeed5d0929b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "54a73392-0988-4630-a281-a363e6b16b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd1b5cc-3679-4d3a-bc30-3f0492681b51",
        "cursor": {
          "ref": "37ac290e-a279-479a-a3fd-ed8c1d1b38a4",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0b64cb7e-7c91-4590-94db-88e0d99fdfb6"
        },
        "item": {
          "id": "5cd1b5cc-3679-4d3a-bc30-3f0492681b51",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "caeabb08-5eac-4b8a-a207-d200532e530f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cceca00b-2916-4b43-b35b-1b9e512fa045",
        "cursor": {
          "ref": "6337c783-af7c-40fb-96ad-1d9aab47eb1b",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7744857f-8c25-4e2d-94c8-0eaba59f95fd"
        },
        "item": {
          "id": "cceca00b-2916-4b43-b35b-1b9e512fa045",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "293cde19-4b89-4516-9345-e518be98f30e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e758689a-974e-4717-af29-5ac717d6b820",
        "cursor": {
          "ref": "9685d2d8-b121-4478-ae64-b077ccd345b2",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a67257bf-5d4d-44ff-8dd0-966a8ec722eb"
        },
        "item": {
          "id": "e758689a-974e-4717-af29-5ac717d6b820",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "954a4f6e-e7e7-4daf-872f-45700426d217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2d0efa-ba78-4407-bd91-5817eb30aeb6",
        "cursor": {
          "ref": "b4a829ca-f8cc-4103-a379-33b24fd8dd13",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8afc145f-d202-4044-bfa7-cdbab5424548"
        },
        "item": {
          "id": "0a2d0efa-ba78-4407-bd91-5817eb30aeb6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "5fa583ac-dbf3-400b-89cc-cdc4554d5c3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9108f2-c04b-4863-b1ed-de00ea95a1e9",
        "cursor": {
          "ref": "99848bc8-5442-44db-8e11-e6cdb8de6739",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "95ca8cca-c4cc-48aa-ae7c-8548d4d3e06d"
        },
        "item": {
          "id": "2c9108f2-c04b-4863-b1ed-de00ea95a1e9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "acc95254-cc1b-4595-b7fd-926611056bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f48512-c584-4c09-a9dc-065fc6a67de3",
        "cursor": {
          "ref": "00ad8d9c-4607-4cef-8ef5-c2362369a974",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "243d1741-e76b-4bd9-8beb-a1a5dc3707c4"
        },
        "item": {
          "id": "53f48512-c584-4c09-a9dc-065fc6a67de3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2485fc45-6040-4fb6-9891-b1b133d612c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de7a68c4-f687-4781-b4e4-4c369ab50c55",
        "cursor": {
          "ref": "e03e2175-835b-4e0f-8d2e-661344a271d7",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "10080260-bee3-4327-8907-725bf7dfa925"
        },
        "item": {
          "id": "de7a68c4-f687-4781-b4e4-4c369ab50c55",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1a0d883a-5287-46c6-9360-a78d2f0d994a",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "eec1894d-9c34-43b1-8cf9-ed06a0e93790",
        "cursor": {
          "ref": "c09cdabb-2632-4ed0-a25d-9b5b6ebdb885",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e9a7c79d-8610-44a2-bf33-cdb9c7fa687a"
        },
        "item": {
          "id": "eec1894d-9c34-43b1-8cf9-ed06a0e93790",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d7be84f9-41d4-45d9-81ec-cf8e744c0286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581add18-089e-45cf-9948-03ea2bdb95e4",
        "cursor": {
          "ref": "435c6024-3f51-4b5c-8b0b-ff8e34601bff",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6c8e3d98-81fa-43f6-961b-977ea9c6b5ec"
        },
        "item": {
          "id": "581add18-089e-45cf-9948-03ea2bdb95e4",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0404cf73-26c7-46e1-8882-33fa25b363fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fbe5a70-1743-46ed-9593-21e31dc741fa",
        "cursor": {
          "ref": "5e3a1726-e82f-4484-a032-5d95c2460613",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d221081e-5090-461d-a34b-6a934a3b8c8c"
        },
        "item": {
          "id": "3fbe5a70-1743-46ed-9593-21e31dc741fa",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ffed1cc5-f53c-43f4-a670-a5bb24e9f7a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "306309a1-97b6-46f1-bc9b-a7d3143d3831",
        "cursor": {
          "ref": "0a390048-b8e3-49a1-9e51-fa3bdcd28af3",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9484aff3-fb4d-4792-ab55-2517fad59794"
        },
        "item": {
          "id": "306309a1-97b6-46f1-bc9b-a7d3143d3831",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3f321a9f-7a9d-437d-ab4c-b446b4fcd1b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0152a742-e151-4916-801f-4fd31ef77188",
        "cursor": {
          "ref": "4a9d7c2f-9c55-47e7-aa13-a9e5c2229040",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "806dd5f9-bf39-42af-ba9d-5a8a3ec9c3dd"
        },
        "item": {
          "id": "0152a742-e151-4916-801f-4fd31ef77188",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "798ce3d1-d85b-49eb-87d8-bd699ecb557e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246f1e95-790d-4f51-aa15-c676b7de55b7",
        "cursor": {
          "ref": "c2e1499c-f84e-48dd-88b7-0e06983a64bd",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "eaf5b350-356b-4322-94f2-316810fff021"
        },
        "item": {
          "id": "246f1e95-790d-4f51-aa15-c676b7de55b7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "31b405cb-671e-4f39-827e-a4ccc5791498",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "e7d44aeb-b398-4f1e-8741-583240bd7657",
        "cursor": {
          "ref": "563b1539-2c2a-4338-9c29-cd2fab5ba4bf",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "298de8a0-53f5-4056-ac07-607f04d0bc06"
        },
        "item": {
          "id": "e7d44aeb-b398-4f1e-8741-583240bd7657",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c4a89137-1da0-40db-80e7-36754e125f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f3a23b-4fbb-4b3e-8b6a-72d9c091dbab",
        "cursor": {
          "ref": "34683a4c-2e4d-481b-8a04-848f9a66fe5e",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ce9331d1-77e7-4755-b39e-4502674f974c"
        },
        "item": {
          "id": "c2f3a23b-4fbb-4b3e-8b6a-72d9c091dbab",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d7657a3b-12c0-4394-8d3d-759ca9bc9adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f50be1-bd83-471c-b850-8518f64338ef",
        "cursor": {
          "ref": "2e1de55f-54e5-4b7b-a958-ff978ffca373",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0bfdf58d-a51f-4cbb-a54b-73071f9a8301"
        },
        "item": {
          "id": "67f50be1-bd83-471c-b850-8518f64338ef",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0cac2ffd-e226-42c7-a3a6-285fc25404da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07439bb6-3d54-4d64-bc6a-7fc5bf39c726",
        "cursor": {
          "ref": "805eab4c-197c-434c-8c59-8044b8438be1",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a458ca39-39b0-4960-825d-9867f16f0509"
        },
        "item": {
          "id": "07439bb6-3d54-4d64-bc6a-7fc5bf39c726",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c4954ce0-2ded-4022-8f2f-6eb79ec83a09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feac297b-a838-48b4-ba13-65079220645e",
        "cursor": {
          "ref": "b7b5aa51-ece8-40bc-881e-924cb91ec571",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "46982eb0-c532-40d0-9968-07c2ff41fdfc"
        },
        "item": {
          "id": "feac297b-a838-48b4-ba13-65079220645e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "33235c81-9430-4024-a32a-56e91071543a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b424bd9b-d599-41ec-bf2d-6ef407d4b9e7",
        "cursor": {
          "ref": "a89800c0-2bab-4706-8473-495b421af42a",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d3c1e3af-5b63-446b-95a4-74cb7db49b51"
        },
        "item": {
          "id": "b424bd9b-d599-41ec-bf2d-6ef407d4b9e7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "80f14e01-8dff-47e6-87ca-eaf5baaf894e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a58b947-c39f-42d5-974c-8b9d8ab4bebf",
        "cursor": {
          "ref": "ded0f87e-3e50-436a-805b-28eab88a4d7c",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5e9274e5-6169-4b10-91e7-f4a28aaee6e3"
        },
        "item": {
          "id": "5a58b947-c39f-42d5-974c-8b9d8ab4bebf",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f71e691f-e57d-4ac0-af80-458c8b4e6c47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e898c6-e423-430d-b6a7-04cd829d2904",
        "cursor": {
          "ref": "d66b9834-7933-4d04-9cff-cd27dea67c2e",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0d48bd7c-a326-4d5e-b0e0-5ce88f8f58f9"
        },
        "item": {
          "id": "16e898c6-e423-430d-b6a7-04cd829d2904",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "91840297-5ace-4251-8174-77c558f69960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c8895b-9321-4fa0-a891-9f08e3ed1873",
        "cursor": {
          "ref": "450ef86f-ee56-4543-bff8-5fd47a96689c",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "826245d9-0aec-493c-8fb8-9fb4dc38f9b4"
        },
        "item": {
          "id": "e1c8895b-9321-4fa0-a891-9f08e3ed1873",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "db997151-b7ae-43bf-9ba7-c6c58d6076ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "2e357255-2688-4023-b7b5-161a8f8d58e8",
        "cursor": {
          "ref": "1b0129d4-5388-4b68-bf01-381037d4bccb",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "157a9ebe-5ac8-4f74-bafe-57028e807a26"
        },
        "item": {
          "id": "2e357255-2688-4023-b7b5-161a8f8d58e8",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "58df5907-6b05-4d63-b598-b103495ea30e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "2472c267-c904-400b-8ddb-611095c63b91",
        "cursor": {
          "ref": "8b55e0a3-9259-432c-8dbb-c69a3f5721c5",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c1fd3f1f-040b-4eed-a794-7a1be71e6107"
        },
        "item": {
          "id": "2472c267-c904-400b-8ddb-611095c63b91",
          "name": "credentials_issue"
        },
        "response": {
          "id": "666c5602-5f83-4563-98ef-ffb2cc950dc2",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "52229922-ad60-4d4c-b7b0-a7941a433a4d",
        "cursor": {
          "ref": "c9e1c7b7-82c2-436d-982d-555b5db05f78",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "10498541-6244-419c-9fda-60138064a1d4"
        },
        "item": {
          "id": "52229922-ad60-4d4c-b7b0-a7941a433a4d",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "1524e75f-dae6-40ea-b33a-6141707d9950",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6511d009-d2e7-4e19-aa1f-0e5315c92fdf",
        "cursor": {
          "ref": "27627b45-f3ce-4882-a10f-8e254796c738",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c2bf7cf5-5a06-4135-b48d-943747fda97b"
        },
        "item": {
          "id": "6511d009-d2e7-4e19-aa1f-0e5315c92fdf",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "84eab2d6-cc83-4249-896e-d6a59f0729f1",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e775ad-2c17-4ca9-ba96-4627fcd17578",
        "cursor": {
          "ref": "69c9361d-d92a-42bf-a785-3312d2efded3",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e4ec6f07-cce4-428c-ab6e-de699b8f9fd9"
        },
        "item": {
          "id": "f0e775ad-2c17-4ca9-ba96-4627fcd17578",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "84b64236-69e8-453b-b686-ba769860df3f",
          "status": "Created",
          "code": 201,
          "responseTime": 413,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d173a2e-4230-4e5a-9ca9-97906e10bd10",
        "cursor": {
          "ref": "3ad3711c-6c04-4d09-9835-9866d3ce4f4f",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "55ca8599-31c2-42fc-b1f5-7fafae461e89"
        },
        "item": {
          "id": "0d173a2e-4230-4e5a-9ca9-97906e10bd10",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4d56ad75-b0d0-4a67-8a97-0aa01a0688f8",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ab72ef-1aa6-4a32-b082-c5a18fa51166",
        "cursor": {
          "ref": "f9967f6f-9b86-45ca-82ff-91cb24c0da05",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "776973ae-f2fa-4f35-97fe-5120c5a1e65e"
        },
        "item": {
          "id": "04ab72ef-1aa6-4a32-b082-c5a18fa51166",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2df761b7-ac4b-4fbf-972b-0eed483a73ad",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bbe7ffd-3ab2-49dd-b4b2-fb4b54065376",
        "cursor": {
          "ref": "2d8dd4ac-4dbf-4664-954c-421c000f824e",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9f56fc25-6642-48e2-92aa-1c8dd17d0864"
        },
        "item": {
          "id": "9bbe7ffd-3ab2-49dd-b4b2-fb4b54065376",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "795d3c05-069d-47dc-92ca-d516366f9618",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "9bbe7ffd-3ab2-49dd-b4b2-fb4b54065376",
        "cursor": {
          "ref": "2d8dd4ac-4dbf-4664-954c-421c000f824e",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9f56fc25-6642-48e2-92aa-1c8dd17d0864"
        },
        "item": {
          "id": "9bbe7ffd-3ab2-49dd-b4b2-fb4b54065376",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "795d3c05-069d-47dc-92ca-d516366f9618",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "fc52a8f6-0618-4794-a63b-5c343c4bc1e5",
        "cursor": {
          "ref": "e37c722d-0684-4801-ac32-012ffbfc5e50",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "509ec03e-91c7-440b-8fe0-4bdac608df30"
        },
        "item": {
          "id": "fc52a8f6-0618-4794-a63b-5c343c4bc1e5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "85dc44fd-7494-478b-840a-bff477d34cd8",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "9e528cac-3b99-42ae-863b-a2dcd48081a1",
        "cursor": {
          "ref": "07fd4dbc-1d1f-4c83-bfb8-c0da9c527dcf",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "308c33fe-8d7c-422c-a68e-50d12ba3b46d"
        },
        "item": {
          "id": "9e528cac-3b99-42ae-863b-a2dcd48081a1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "bb8f3b63-a263-4f59-bc31-9a75990688ca",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "e972c8a6-e1e7-4e5e-998d-ef8d19205705",
        "cursor": {
          "ref": "4f27e324-c449-43ba-89b0-31bb26f034be",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "85f3c0d4-7ed6-4b3b-9f19-c76fc4a408d8"
        },
        "item": {
          "id": "e972c8a6-e1e7-4e5e-998d-ef8d19205705",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a9cc70f7-af65-4851-9e6a-3d4feb0bf93a",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "b1e0e64b-36f6-4855-b1c5-c2fb9dea6ee4",
        "cursor": {
          "ref": "ccbbb9ee-40f3-4e3c-9d01-ff5004b67d52",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "85f21e4b-38bd-4eec-a2c8-24ae68c3c5b0"
        },
        "item": {
          "id": "b1e0e64b-36f6-4855-b1c5-c2fb9dea6ee4",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7f800dc7-69f8-4f2f-86cf-ff7cea17957d",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "2a8b1391-c3f7-43e4-8834-e1285e557f5e",
        "cursor": {
          "ref": "2932d88b-9e3c-469a-ae4d-b3234b871676",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7fb08058-c6ae-4ab7-ad05-298a4c16e45e"
        },
        "item": {
          "id": "2a8b1391-c3f7-43e4-8834-e1285e557f5e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e4fd2ffd-e48d-4376-9a37-393fb2f3f52c",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "8a267a49-face-4fde-ad67-17d88ac60f40",
        "cursor": {
          "ref": "6e685228-b269-4b73-8406-7cefa1a47be6",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "22f1193c-c91f-4926-8b39-3818014bee78"
        },
        "item": {
          "id": "8a267a49-face-4fde-ad67-17d88ac60f40",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a65719dc-f340-4b12-8199-64df02dfce73",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "6ed120c5-70e0-4023-9a87-2acf5e3275d1",
        "cursor": {
          "ref": "37b3be44-bf87-4a33-9715-ebe52da49f63",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "efe791c2-0ea6-44ef-a260-ea8dee89e99e"
        },
        "item": {
          "id": "6ed120c5-70e0-4023-9a87-2acf5e3275d1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "dd40a182-b6ae-4719-8d9c-d2eeb676ecb8",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "dc623a34-3463-4958-995c-06ca5eeb785c",
        "cursor": {
          "ref": "d788e18c-a00e-4369-84d6-b230a6e751a7",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1e536698-6956-4c19-b1a6-1597235e2a5d"
        },
        "item": {
          "id": "dc623a34-3463-4958-995c-06ca5eeb785c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e8507511-6a80-4023-b8a6-ca1b6077513f",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "962f075d-5ce5-456f-9e4a-f70e4374815d",
        "cursor": {
          "ref": "bef42cab-723a-449a-96aa-bdd4a3c2d6a7",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "be99ab49-8e3f-4d8d-ab2d-07da1dee0410"
        },
        "item": {
          "id": "962f075d-5ce5-456f-9e4a-f70e4374815d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "67a965a7-7a82-437d-b8e6-5172d7447572",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "acce5a4d-5d96-412d-a468-2014e92219c5",
        "cursor": {
          "ref": "5544d6bf-1c65-48ed-82de-6af04245ba09",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1ac68dd1-8918-4889-bba1-95da7c49fd03"
        },
        "item": {
          "id": "acce5a4d-5d96-412d-a468-2014e92219c5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0331daf9-98a6-4b4c-988f-0010fd2076d5",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "3cc0423b-ca72-4973-91cf-81096a7d812e",
        "cursor": {
          "ref": "45c2f9cd-8418-4dec-b5f1-b150e53c8888",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "484359ce-215a-409a-bf8d-86f25dac09df"
        },
        "item": {
          "id": "3cc0423b-ca72-4973-91cf-81096a7d812e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4446cef4-090d-4d00-86d6-0db6cfce8139",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "a798f2b0-ad1c-495b-8d9e-42c2f5bf1eeb",
        "cursor": {
          "ref": "d212ff7a-78f7-46f7-82e9-befb54d74e23",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0156d61d-aa8c-4097-9d5f-b4aee905956b"
        },
        "item": {
          "id": "a798f2b0-ad1c-495b-8d9e-42c2f5bf1eeb",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8f94eed7-2efe-49ed-87f4-73833517dcf5",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "fe7efd3e-d9a7-465c-a116-2ec39553cc2e",
        "cursor": {
          "ref": "e06d90ec-a3b4-45fd-a2c7-4c658a0a6d74",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a3bba85b-70c0-467d-b75f-3a2ce1d62bc0"
        },
        "item": {
          "id": "fe7efd3e-d9a7-465c-a116-2ec39553cc2e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "610efe01-2518-4f9e-908b-54fdd2f61e9a",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "7d435beb-2f30-4862-8901-7f353ab62ded",
        "cursor": {
          "ref": "1de9046b-867c-4675-8fca-c2da067b3b73",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1a6c4965-abf4-44e4-b319-fa2d614df3e7"
        },
        "item": {
          "id": "7d435beb-2f30-4862-8901-7f353ab62ded",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c9a17451-8cc3-4742-8d05-ce1ad46d642f",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "b78ef129-075f-46c2-8b69-64b42c8750cc",
        "cursor": {
          "ref": "e75fd54b-736b-478a-9281-c42b22faeb1d",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "54293dec-0cbe-4e74-a9d2-8b6e8be9cb46"
        },
        "item": {
          "id": "b78ef129-075f-46c2-8b69-64b42c8750cc",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6a1d7426-3bc0-4966-a88a-ff5269f8d262",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "d9547c56-cbf2-49df-80ec-9b5bbbdff410",
        "cursor": {
          "ref": "f8ffd088-f3a0-4c16-a86d-40ecbbe94553",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "dfac1a99-e07f-4d2a-ab26-1d1436d66557"
        },
        "item": {
          "id": "d9547c56-cbf2-49df-80ec-9b5bbbdff410",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bb017210-3d17-4a32-b5a1-fbdd6c722179",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "163c9197-7036-431f-9098-35e3aeb28473",
        "cursor": {
          "ref": "c14b7f93-5326-4054-8977-abd94c04e9a4",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7b3358e0-ae9e-4732-bc61-1db469a4dc88"
        },
        "item": {
          "id": "163c9197-7036-431f-9098-35e3aeb28473",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1d28df1a-b9b1-4f6c-9362-e67aee13c255",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "221e9e03-a688-474b-837f-4b89aa92637d",
        "cursor": {
          "ref": "dcf25cba-18d5-46bd-9db0-cd22add4e284",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ad85b2a3-e74e-4336-904f-38962e131b6d"
        },
        "item": {
          "id": "221e9e03-a688-474b-837f-4b89aa92637d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3f8c95ac-a314-4ef6-a49f-95c5714c7520",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "d805a3ec-0c11-4404-996c-fa09844a3d35",
        "cursor": {
          "ref": "910f3fef-7438-436f-9f0e-4d843c25a4fc",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "01f21908-0309-4b5c-a9a2-24899e2330e4"
        },
        "item": {
          "id": "d805a3ec-0c11-4404-996c-fa09844a3d35",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "37931cf7-009f-4ea9-8e2d-4d30f052b564",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "e7860bdf-84a5-439c-baf6-fd718a80fe10",
        "cursor": {
          "ref": "07157133-7e8f-41df-8a6e-218604bf57c9",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5c45196e-974d-4ac4-995f-e9c42b385b1b"
        },
        "item": {
          "id": "e7860bdf-84a5-439c-baf6-fd718a80fe10",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b29a27f1-9ca8-4fd3-87b1-52d048dc0cc5",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "38817467-9bfd-4ca4-8066-8712111d0ce5",
        "cursor": {
          "ref": "e203bd62-7979-49bd-a11f-c1175bd05234",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fcffa140-7db1-4523-8741-8ed02c4d4ace"
        },
        "item": {
          "id": "38817467-9bfd-4ca4-8066-8712111d0ce5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "71600571-05bc-49c1-8939-43f14f48dc5d",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "cd6c07fa-aa53-4450-986d-baf012fe36e0",
        "cursor": {
          "ref": "bd603975-c7de-41b1-a7b2-3d4332e7d514",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a2d446c8-07b9-4184-a423-a493d986b987"
        },
        "item": {
          "id": "cd6c07fa-aa53-4450-986d-baf012fe36e0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b41ffc5f-d151-4888-8d15-bcae898ad52a",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "e12c8974-b487-423d-9559-f4d53a7a7004",
        "cursor": {
          "ref": "34b22dfa-0b3e-46a4-928d-659f1f0a853b",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "02e99401-02c5-4ca7-9951-0d80359186dd"
        },
        "item": {
          "id": "e12c8974-b487-423d-9559-f4d53a7a7004",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a2c026dc-9ca0-45c4-8dbe-09fd53f1fc38",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "fd61d1ad-dd5d-4b5a-bdb5-062a342a533f",
        "cursor": {
          "ref": "2dc9eeab-416d-47f7-9562-229d3d050b1c",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3b0277f2-f134-4b2c-a947-7dd396d280a9"
        },
        "item": {
          "id": "fd61d1ad-dd5d-4b5a-bdb5-062a342a533f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5c45ff89-0ff9-4f9d-9dc2-b56707f4d28c",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "ed57f90a-6332-44a5-8d78-cbe71c4b97e8",
        "cursor": {
          "ref": "308aae4d-ab99-480a-9d66-554efa7b4517",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e6d313c6-3e96-4d49-ae58-954fa41e9281"
        },
        "item": {
          "id": "ed57f90a-6332-44a5-8d78-cbe71c4b97e8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2ecfbd7b-43d2-408e-92f8-4376928c43fe",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "35866d0f-6153-4b7e-b482-2e48b78866bb",
        "cursor": {
          "ref": "e2424779-dedd-4769-a650-8a7ef2b7c99c",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "70264027-2a05-4b41-ac35-bdbd83e20a05"
        },
        "item": {
          "id": "35866d0f-6153-4b7e-b482-2e48b78866bb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4a7a98ee-dd42-403b-b327-c64ecc8f0428",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "d52323f6-7fef-4c23-b926-11cfeee261de",
        "cursor": {
          "ref": "fa7b4cf5-9d48-4373-ab55-5ba6d1c8998a",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "15256dcd-40e0-44d4-bd3c-d0ff2e320415"
        },
        "item": {
          "id": "d52323f6-7fef-4c23-b926-11cfeee261de",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "448dbc56-dd0a-42ea-a367-ba3d5d98d9f4",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "4811dfcb-937a-42fd-8790-b0b4cceee3d8",
        "cursor": {
          "ref": "9cdf8758-413f-43e5-b305-86303f202374",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0f5ccc12-2bef-4c90-bacf-df35fc2186eb"
        },
        "item": {
          "id": "4811dfcb-937a-42fd-8790-b0b4cceee3d8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "394cc2d5-d7bf-4b92-8333-efc6ea7fd62a",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "c303febc-d0b4-44c2-8a0a-d90efe9ab8d7",
        "cursor": {
          "ref": "99027c03-99fd-42e0-971a-76c2ac65d8bc",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "228fee06-f5f7-4b51-9a4a-ce8d7bdc9fd9"
        },
        "item": {
          "id": "c303febc-d0b4-44c2-8a0a-d90efe9ab8d7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0ff7405d-08b8-4fa5-b871-9f0bb99d49cd",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "4e13e75d-e76b-4d90-b6da-fb5187986ddf",
        "cursor": {
          "ref": "ac9c672d-2c09-4d41-a9a7-9453a4f79e1b",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3401f1bf-ddfb-4ecb-a1f4-8e566a00f64f"
        },
        "item": {
          "id": "4e13e75d-e76b-4d90-b6da-fb5187986ddf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "91377f11-1829-4499-b7a8-9dfa7ab20ad4",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "9f1e86fb-4fbf-479f-baf2-f101c93b3690",
        "cursor": {
          "ref": "6a0da0f4-6b3c-4120-bf37-b5dc1f6aea63",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "78a109ca-46a5-4e9b-82a2-5a74e25f8bca"
        },
        "item": {
          "id": "9f1e86fb-4fbf-479f-baf2-f101c93b3690",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "10e242f9-02a9-4487-9705-4f746a87678d",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "68933483-3555-4c80-9fe5-f00d77c97060",
        "cursor": {
          "ref": "724f2099-3849-4cd8-8756-e9ae2548c99e",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e9d101d7-98e7-4fe9-8496-851227db74a5"
        },
        "item": {
          "id": "68933483-3555-4c80-9fe5-f00d77c97060",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d1ab775a-abcc-4f69-bba6-d2dd0a920dc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43442785-d540-497a-b179-22a612276823",
        "cursor": {
          "ref": "ec6862fc-c9df-4272-bb6d-6bbbdee3a8f8",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f6e39027-ec4b-4c83-a149-c7085f27e824"
        },
        "item": {
          "id": "43442785-d540-497a-b179-22a612276823",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "a5ea417c-975c-4d0e-b443-5f776e5a9d1c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48bfbbb-0af4-4ceb-bc0b-e811beb57bce",
        "cursor": {
          "ref": "fa47fd56-bf54-4a4b-afbd-4a873968485c",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e4c62943-ddc4-451f-825d-ad750eac474d"
        },
        "item": {
          "id": "c48bfbbb-0af4-4ceb-bc0b-e811beb57bce",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4ecd0f8b-4c81-4ffc-af49-aaa2c859f52f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48bfbbb-0af4-4ceb-bc0b-e811beb57bce",
        "cursor": {
          "ref": "fa47fd56-bf54-4a4b-afbd-4a873968485c",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e4c62943-ddc4-451f-825d-ad750eac474d"
        },
        "item": {
          "id": "c48bfbbb-0af4-4ceb-bc0b-e811beb57bce",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4ecd0f8b-4c81-4ffc-af49-aaa2c859f52f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b8ad1c-d292-4371-b5c0-2176a2032b2e",
        "cursor": {
          "ref": "4d09271a-59a7-49e6-8a50-5f3c2f0865f8",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2b78f008-fba0-4263-883a-a3e0cebcfb47"
        },
        "item": {
          "id": "61b8ad1c-d292-4371-b5c0-2176a2032b2e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c86b3836-904f-4fba-9a8a-3ace18093e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9536c1e-1686-4dac-a8fb-be1616f60b5f",
        "cursor": {
          "ref": "2e123799-78f4-4efe-9650-a784462d2a9e",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8bbca367-dc94-4841-b3a8-795bb24deea2"
        },
        "item": {
          "id": "c9536c1e-1686-4dac-a8fb-be1616f60b5f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6c674cb9-46bf-46a0-9396-8b20a4313010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "209909ae-c4f7-4f95-8c71-e76e62fa7e83",
        "cursor": {
          "ref": "eca36920-a61a-4be3-b1d1-27257d0065cb",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b3b805bd-ea68-49c3-81fd-f67cdac468ab"
        },
        "item": {
          "id": "209909ae-c4f7-4f95-8c71-e76e62fa7e83",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6769650f-501c-4749-aa1d-3dd666f2497b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3817f1b-2eaa-46d0-bb06-33fe1839351d",
        "cursor": {
          "ref": "06433f44-ea09-411a-ae9f-78bd48d6d88a",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "296395d0-1e0d-4d5d-9c6d-41a9d667bd0d"
        },
        "item": {
          "id": "e3817f1b-2eaa-46d0-bb06-33fe1839351d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9448a70b-3589-4a75-9b72-b4cd699fe4eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7631c9dc-09e8-483c-8dca-610d327d5e0d",
        "cursor": {
          "ref": "8920521b-2e88-4b1b-a9fb-73450914df67",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "045fe589-23ff-4498-82d0-b2c4ac3c06fe"
        },
        "item": {
          "id": "7631c9dc-09e8-483c-8dca-610d327d5e0d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "69c0c23b-20be-4cef-b35d-cfeda609fd46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c286e2e-a9c1-4790-a5ef-bcb03e86ba63",
        "cursor": {
          "ref": "06bf447d-0919-4b4e-9b84-4475c3de801d",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a773531a-6a30-4ff4-9682-e1d3e247f524"
        },
        "item": {
          "id": "9c286e2e-a9c1-4790-a5ef-bcb03e86ba63",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5df73cc0-925d-46b8-a2a0-508ed484ff97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 547,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c18390-e178-4dd7-b854-282c19d045f5",
        "cursor": {
          "ref": "bb9a97ab-b6e8-4636-a748-28192ef381ea",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "bb737291-f66c-4170-9d2f-71b1a760a9f3"
        },
        "item": {
          "id": "05c18390-e178-4dd7-b854-282c19d045f5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8aab0ad6-a7df-4e07-bd52-2595ed678d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b96e3311-2344-43ee-8a7e-821dccaff924",
        "cursor": {
          "ref": "b1be12ea-a4a7-4572-a7f2-d6e46f10b385",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1370cfb2-fe4d-4de8-917b-39ce9eb74379"
        },
        "item": {
          "id": "b96e3311-2344-43ee-8a7e-821dccaff924",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8a1836cb-7b16-4cf9-9f56-c63a317759fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3648ae07-f394-4e8b-88dc-4f0d9b672bd1",
        "cursor": {
          "ref": "c01b3868-9614-45bb-b513-ff1d2dc7a020",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "51ac46cf-b776-46a2-bf2c-d99fe35ca305"
        },
        "item": {
          "id": "3648ae07-f394-4e8b-88dc-4f0d9b672bd1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4d4d14ad-fe0a-4afd-bdf2-e1a5a4cd3bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033fccf6-de51-4d87-9c2e-4dfe82ca0a90",
        "cursor": {
          "ref": "b7523852-323a-45dc-abb1-926f8c3a41af",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "66ec84de-c168-4415-bbc7-d0673a366ea7"
        },
        "item": {
          "id": "033fccf6-de51-4d87-9c2e-4dfe82ca0a90",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "518f8d9a-77d9-415e-a955-3b3726dba5d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575592ac-eef3-483e-b119-af37ab65fdad",
        "cursor": {
          "ref": "3b2a8607-9588-449b-8d71-9647a7f7dddb",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "839a98e4-f311-4582-b025-5eeb994026df"
        },
        "item": {
          "id": "575592ac-eef3-483e-b119-af37ab65fdad",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "de30eefa-74ab-44ae-bc63-4a20a74df05a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c8fd14-225d-4bdb-bf6e-8d7c61d74b7f",
        "cursor": {
          "ref": "b3ece9af-8f14-4013-afa8-3dbe63303e5b",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a545c1b2-3694-45df-924f-8b4de4aba511"
        },
        "item": {
          "id": "e1c8fd14-225d-4bdb-bf6e-8d7c61d74b7f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "31752af9-ff50-435c-a92f-9678ff970d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3304ace-1733-4d29-aa10-5457c461ffcd",
        "cursor": {
          "ref": "f0e6cc3b-e937-4ee4-baf0-048375b92dba",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b958819a-6b88-4611-95f7-5a0529a9b281"
        },
        "item": {
          "id": "a3304ace-1733-4d29-aa10-5457c461ffcd",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "cf2397f9-581b-4506-b0f6-36e85312bd4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2231107f-77e8-4547-82d6-a2558f20163b",
        "cursor": {
          "ref": "bd107a4b-9b29-4b08-ba0a-298d8f00bf62",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b5d7e846-e965-4a69-99c7-48b656c2af14"
        },
        "item": {
          "id": "2231107f-77e8-4547-82d6-a2558f20163b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "55c4229e-0885-41e7-a346-ceef94aac196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be6c9061-f01b-436d-ad71-f0c8b57bfb60",
        "cursor": {
          "ref": "792c66a5-cdc7-45b1-ab13-8a5dd0eb6e98",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "079c3fed-9432-459f-89ed-83371f8ae644"
        },
        "item": {
          "id": "be6c9061-f01b-436d-ad71-f0c8b57bfb60",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5f46dfb9-e007-413e-85c9-80e97fe650aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01421b88-200d-42c1-a2d8-f551fd8a9b46",
        "cursor": {
          "ref": "68b6aed0-78f7-4563-b376-0c2912ea0d14",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "02b258e5-6628-4d96-96a5-03e916e2af44"
        },
        "item": {
          "id": "01421b88-200d-42c1-a2d8-f551fd8a9b46",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "693c12d3-bfe4-4686-a8b9-b52c6138c154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd0f1a2a-928e-4707-a3cd-e63f1bc045b7",
        "cursor": {
          "ref": "c4f05f92-5b8f-46ed-8295-01fa7c38f54e",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8b1536e6-558c-431e-92d0-12f7671af953"
        },
        "item": {
          "id": "bd0f1a2a-928e-4707-a3cd-e63f1bc045b7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e97eea21-5337-4552-8721-55ad0f9aeedd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 294,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58bafa1f-9e3b-4e52-9ad2-62134c11212a",
        "cursor": {
          "ref": "86789a6e-63c9-44e2-8b49-b71ab286a30f",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "779b6dee-66a4-4c54-b8d4-c71f879bd435"
        },
        "item": {
          "id": "58bafa1f-9e3b-4e52-9ad2-62134c11212a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "11215eaa-cf17-4ff1-96c4-ca7b980c0367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 443,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7145b6-185e-47a1-a67f-ceed6499a6c7",
        "cursor": {
          "ref": "015ac7eb-8949-4efb-9674-4b0887e0e587",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "28b67aac-0e32-4b32-8b47-17d5160b7296"
        },
        "item": {
          "id": "6a7145b6-185e-47a1-a67f-ceed6499a6c7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7da48fd5-5f69-4e63-bc86-31e64f05acad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b987b1a-acac-4729-95ec-d1e11c8f6869",
        "cursor": {
          "ref": "b642d54d-ffe4-475f-b9e7-381d54c0f153",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a2fa247f-4b35-4de2-8679-491a05e0a3e5"
        },
        "item": {
          "id": "1b987b1a-acac-4729-95ec-d1e11c8f6869",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8c8b4cb2-16ab-4e53-970f-db52c7c82121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c18a87c9-b4f3-417f-ad8f-0f2ce581c0a6",
        "cursor": {
          "ref": "df846c6f-fbcc-4e93-9179-650b44e22851",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0a9eaaa2-602b-4c1a-afb6-4bd88f6eb062"
        },
        "item": {
          "id": "c18a87c9-b4f3-417f-ad8f-0f2ce581c0a6",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f28553e7-1f4b-459b-a1ab-fc0b44f31c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8291c585-47b1-4be4-b0b2-a12e3ff26927",
        "cursor": {
          "ref": "d1962d59-a154-462b-942c-80d8d27251de",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4edd625a-a73b-451b-bf2c-9683177076a3"
        },
        "item": {
          "id": "8291c585-47b1-4be4-b0b2-a12e3ff26927",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "e88ea322-7f8f-4ef8-b64e-d23528a526b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7e42b1-9985-464a-97bd-00ce01a0c211",
        "cursor": {
          "ref": "db311e86-b5e8-491c-b55f-7ff91a732070",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "22d226d9-d768-48bf-9bd1-995ddac95340"
        },
        "item": {
          "id": "ea7e42b1-9985-464a-97bd-00ce01a0c211",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b9009e50-d443-451c-9028-314ca7635449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24a8251-8527-4fcd-9b45-70636d2f0754",
        "cursor": {
          "ref": "420c7bb5-ee12-47ba-8944-64a51d69c983",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "74a2d255-dd0b-4c6a-b0d4-c0e2ba3fa22f"
        },
        "item": {
          "id": "f24a8251-8527-4fcd-9b45-70636d2f0754",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "17107dd5-febb-4df2-af68-d616ef2700cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a0106d-d7ed-48a2-8a9f-4c5c15800235",
        "cursor": {
          "ref": "2ce5746d-cb52-4aa6-acac-0172a7383c74",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1ad62754-3040-42d0-bda5-468a05f88283"
        },
        "item": {
          "id": "55a0106d-d7ed-48a2-8a9f-4c5c15800235",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "67d363e2-f9b6-4fd5-90c4-612c3628ef64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3106cf2-bda5-4aa8-92d8-4b2a9d991d2f",
        "cursor": {
          "ref": "0866846c-2b98-4ef9-b504-fa8124097030",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ff3d4cd0-9923-480a-8bbc-a196c702a9ad"
        },
        "item": {
          "id": "c3106cf2-bda5-4aa8-92d8-4b2a9d991d2f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ca38e544-c779-4737-a15c-3e4d234445b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144ceee3-f214-4d3d-bd3e-f4def0ca7296",
        "cursor": {
          "ref": "7736d274-76a7-416c-ac38-7449d2f4f554",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "10bffcf8-88c6-4829-988c-b8709c552d69"
        },
        "item": {
          "id": "144ceee3-f214-4d3d-bd3e-f4def0ca7296",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "aa19f50d-c3b1-4ff7-9216-e860536b18e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75616fc1-fdcd-46df-b195-04202f164aa0",
        "cursor": {
          "ref": "ab02b31a-4069-4c78-ba3f-480c8061a889",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "082650e6-f93e-4b61-9233-6d4360766200"
        },
        "item": {
          "id": "75616fc1-fdcd-46df-b195-04202f164aa0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bb28f4f1-7c21-4df6-88d7-2780942e0081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c1c305-2bf7-4d92-939f-3744abb27f1f",
        "cursor": {
          "ref": "08e358ea-64a4-4df9-9b01-549726190618",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6c23bcbf-d13c-4076-87b9-734452c94a15"
        },
        "item": {
          "id": "26c1c305-2bf7-4d92-939f-3744abb27f1f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8d0334db-6fce-4eff-aef0-24a471e41e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506d1128-57a5-4fb7-8d51-c568098abcac",
        "cursor": {
          "ref": "06d68567-a9f9-4106-8abd-3703b377c1c7",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a7cc90c1-1a00-4e5a-a1b5-936fa34965e7"
        },
        "item": {
          "id": "506d1128-57a5-4fb7-8d51-c568098abcac",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b56c4d29-abca-4319-8086-713eb1510e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53a5d99-060b-466f-a28b-803b404743a2",
        "cursor": {
          "ref": "26ad2b32-2012-4c53-b5f0-c634394ca256",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "28b8c6f1-9659-40c2-9ac8-452e5fdb28d2"
        },
        "item": {
          "id": "c53a5d99-060b-466f-a28b-803b404743a2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f3e2ef6a-4c4f-4858-a174-19a091e3b91d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7588650-c847-47ce-8d27-8b0fce9aa565",
        "cursor": {
          "ref": "0afece43-8c59-401c-b3fc-4cb9ed50b72b",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "37a2118f-9421-482c-aba7-0a70f3ac04ab"
        },
        "item": {
          "id": "b7588650-c847-47ce-8d27-8b0fce9aa565",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f4483c93-7160-4687-827a-d5dbc7850524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 390,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e25a2e-a22b-4d6f-a72a-5ba60a60cb7a",
        "cursor": {
          "ref": "ad0c043a-e081-4c9b-96c7-53df8d2415fb",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d4cb1469-9e94-43ea-8e13-c319e617a842"
        },
        "item": {
          "id": "d5e25a2e-a22b-4d6f-a72a-5ba60a60cb7a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c5038dab-473a-42ac-9edc-a5fe2ee913d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba95ca78-f2fc-46e6-b56e-5d09f0cbd3a9",
        "cursor": {
          "ref": "5c2af200-b559-4ab7-a2b0-858a42c92cea",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c9ded4cf-4ca0-487a-b183-20307245567b"
        },
        "item": {
          "id": "ba95ca78-f2fc-46e6-b56e-5d09f0cbd3a9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fa1bb920-4161-49d0-a1a0-16dc80129bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e72353a-95be-4c97-ad70-c4861e24a865",
        "cursor": {
          "ref": "ba360847-c441-40f5-a846-225dc34ab259",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0c9edc0c-7f4a-4e18-ba0b-dd05c7f9c60f"
        },
        "item": {
          "id": "3e72353a-95be-4c97-ad70-c4861e24a865",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ef87ba6c-cab0-46da-add3-590a7aad8db7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1940c18-cb2b-4bd3-aafa-e263dea92632",
        "cursor": {
          "ref": "9026a193-5854-49be-9751-0de7507aac2e",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "84cbc5b7-bcab-45d4-89ed-ed6bf372fac5"
        },
        "item": {
          "id": "e1940c18-cb2b-4bd3-aafa-e263dea92632",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2b6a3520-808d-4609-a813-e16324909265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52fe497a-1a2e-4404-95de-6d6fb4782b76",
        "cursor": {
          "ref": "71c1d0f3-8335-4828-a4c7-456b7f7872c5",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "80fa33bb-d91a-41db-8a34-3c4f0ae9ef80"
        },
        "item": {
          "id": "52fe497a-1a2e-4404-95de-6d6fb4782b76",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b596b72e-39a8-4e0e-8f13-9aa7fa92e8a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b29b26-740d-4f26-bc98-62cd55f27e6c",
        "cursor": {
          "ref": "f635e03f-a89e-43fb-b33a-51a71bda6357",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b10721d1-d2fd-49e2-8726-a4d9500340d7"
        },
        "item": {
          "id": "08b29b26-740d-4f26-bc98-62cd55f27e6c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c015aaa1-97ec-4dc0-9eab-5f8697f54128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bdd4060-bf32-492e-b024-b91f1b995dae",
        "cursor": {
          "ref": "a79143ab-55ae-4de2-b9db-90c7dec4c1c1",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0900ed63-7b61-4fd0-8586-65b662b3f77b"
        },
        "item": {
          "id": "5bdd4060-bf32-492e-b024-b91f1b995dae",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "207238f1-013a-4adb-b11b-64341f58bd50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdeed838-be63-4f2f-804c-709b232cede0",
        "cursor": {
          "ref": "4930c683-59b9-4c98-99fe-b2db9672ac7d",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7e53ef1f-4f99-44fe-b05b-bd288f7d2ecc"
        },
        "item": {
          "id": "fdeed838-be63-4f2f-804c-709b232cede0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "884a3af3-1b81-4739-b3d5-6c8b076c36e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a908ae3-b5a4-4e16-b1f8-16c3a4a958b0",
        "cursor": {
          "ref": "102a5167-6a05-4de1-be3c-75f76ca888ec",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a4cf4d2f-7f71-4082-8046-0e09bf2d53b2"
        },
        "item": {
          "id": "0a908ae3-b5a4-4e16-b1f8-16c3a4a958b0",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fa2bfa81-d012-43e7-8e8f-3d8ee629f791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32cce623-fd3f-4da9-bd3f-14a8671b1e36",
        "cursor": {
          "ref": "cb2caed3-738a-482a-942b-dbceb1ff6cd2",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1431dbd4-6f73-480d-8663-5dd5bc37bc8c"
        },
        "item": {
          "id": "32cce623-fd3f-4da9-bd3f-14a8671b1e36",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c3038474-1e78-4ee3-977c-a98fc5f823a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f495dc5f-fcfa-4de0-9b3c-c34db3273549",
        "cursor": {
          "ref": "5b2f220a-5883-4313-a3ae-7a7db44e27ef",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "0cd80267-4507-4f08-b543-0d658a4e3c03"
        },
        "item": {
          "id": "f495dc5f-fcfa-4de0-9b3c-c34db3273549",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5e897744-2b48-4fea-9e25-32d7442db368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e97309-9bb2-469d-bccc-5c96a578879c",
        "cursor": {
          "ref": "f6acfde2-991f-4fac-a051-8e980fcc02b2",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8982ee08-6e92-47ed-9af4-0cc0d6392e99"
        },
        "item": {
          "id": "a5e97309-9bb2-469d-bccc-5c96a578879c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "50c987af-5d3a-4706-af06-1ae7d7328272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53054bc-325b-4ed0-8ba7-caf8a36aaff9",
        "cursor": {
          "ref": "d0aace91-a7af-40d9-9c32-1b7e44773855",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "085a38b4-0711-4f0c-aa7d-ce7beee7a729"
        },
        "item": {
          "id": "b53054bc-325b-4ed0-8ba7-caf8a36aaff9",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1336c97b-286a-4988-83c3-98dd0fc6e3d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 649,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68bd79e3-36aa-4d9a-ac9d-6f7c203980b2",
        "cursor": {
          "ref": "21072a71-0ab8-4150-b680-e0747f16d28d",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "70ffe4db-182d-4afd-88a4-0cfc3a1ded8f"
        },
        "item": {
          "id": "68bd79e3-36aa-4d9a-ac9d-6f7c203980b2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c2538f89-b49d-4e09-aa01-a62ec4fb52d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c865b7-776e-4518-a1bb-4af17dce2bd7",
        "cursor": {
          "ref": "fb43974a-8bd6-4722-92a1-98f37fd3e829",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "79a29273-3372-477a-bf24-1fe9c0df3089"
        },
        "item": {
          "id": "82c865b7-776e-4518-a1bb-4af17dce2bd7",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "27c27fff-85ac-472a-800a-ed0c0a75cadc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13cb02f0-4a21-4cb6-a02a-ecf5d1819ee4",
        "cursor": {
          "ref": "b1b66a69-3d26-4980-8c19-0bf84733401f",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "056641ad-5d93-461b-afbf-e9cce029140e"
        },
        "item": {
          "id": "13cb02f0-4a21-4cb6-a02a-ecf5d1819ee4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "069d866b-f938-434e-863e-14d6cbca519b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171fac98-97c8-411d-8932-f382f1245bb2",
        "cursor": {
          "ref": "ee29b6f8-0196-4f5e-9d99-380cbf492ad6",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5d6b10a5-2344-4148-813f-0314d7ada950"
        },
        "item": {
          "id": "171fac98-97c8-411d-8932-f382f1245bb2",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "02ecd923-96b6-4515-ac5d-167d7bc3e7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b581ae13-3062-4a7f-8860-de26066f2323",
        "cursor": {
          "ref": "c166e6b1-c482-494b-b253-ae1e763aa3af",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9d6ae933-09a8-4d10-acca-357536926985"
        },
        "item": {
          "id": "b581ae13-3062-4a7f-8860-de26066f2323",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f3781acf-462e-4d3c-8604-3590f977690d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12fb3d2d-9453-41ac-b5df-3c776e13c6c8",
        "cursor": {
          "ref": "4c9eda01-623f-4b54-8690-3734fc572585",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "46681337-9ffa-4b36-8f7e-2ba2833f1c4c"
        },
        "item": {
          "id": "12fb3d2d-9453-41ac-b5df-3c776e13c6c8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "380d8f38-9980-4f51-a73d-feae9c2b3e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce4d067-7aa1-4906-88cb-f2dd7a2ec52e",
        "cursor": {
          "ref": "d0718b0e-e87d-4648-83d0-c406a712fad4",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "43af29a6-5905-4b17-9e0d-11044f8190bb"
        },
        "item": {
          "id": "2ce4d067-7aa1-4906-88cb-f2dd7a2ec52e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9cc4f475-44c1-4a3c-b7d5-0469ab8859a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0ae686-8c0c-4c11-ba8c-c4e83681ce26",
        "cursor": {
          "ref": "f42277c9-2fb6-41dd-aea4-29347f6487a2",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6b6d8167-893b-4090-8329-bd130adfa171"
        },
        "item": {
          "id": "eb0ae686-8c0c-4c11-ba8c-c4e83681ce26",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "93d962db-5354-4ae2-be66-2a90aafa21ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62773f1-b973-482d-9635-4181e7137d49",
        "cursor": {
          "ref": "1b7f586d-ae3a-4e92-a5e6-a1c3fc718058",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f09ebaa1-089f-4a84-aec4-086b18dccf01"
        },
        "item": {
          "id": "b62773f1-b973-482d-9635-4181e7137d49",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8c2829f2-479b-4e53-b208-b607f795ceeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284fcc60-bd50-4371-96c6-92d79dbc5868",
        "cursor": {
          "ref": "8fb9e539-d1fd-4838-b2d7-80fdb50b6dd8",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9835d694-5223-4a9a-9832-bcaaf715feea"
        },
        "item": {
          "id": "284fcc60-bd50-4371-96c6-92d79dbc5868",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "65b8c9cc-35f1-4193-ad36-6993a418fa23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc7d7b4-fff7-4629-8121-d26f92d234a2",
        "cursor": {
          "ref": "f55a7b1a-d3e4-4577-a4ea-5b82bfee684c",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0d651e1b-7da5-4cbb-bfc3-98854e80c89b"
        },
        "item": {
          "id": "bdc7d7b4-fff7-4629-8121-d26f92d234a2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "dc786da8-c462-44d2-b082-e4de81a57644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ed3a1b-3830-41e1-b8f1-d2503d589e2e",
        "cursor": {
          "ref": "fc8ab901-3a53-4d70-a8fb-3a7e76f1b6f6",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c6f38573-1cf7-410a-9b97-95b7d9f1dc84"
        },
        "item": {
          "id": "11ed3a1b-3830-41e1-b8f1-d2503d589e2e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3f18b74a-d010-428b-829c-631ecda2c940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52aba756-a104-4877-a08d-68a1dbdc6b51",
        "cursor": {
          "ref": "a4360657-c797-409c-980a-687b4ac64d3b",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9c2742bc-690d-4946-b22e-8b74d4b1cc21"
        },
        "item": {
          "id": "52aba756-a104-4877-a08d-68a1dbdc6b51",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2b706f54-2a52-4ae9-8b3b-6d885d3b2dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e272cb3e-ce86-4eed-8a2e-afa92d96c584",
        "cursor": {
          "ref": "84b6711e-b05c-411d-b14f-ff3a6b4e636c",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c44bf2b9-c422-4bff-a525-f899cefdf47b"
        },
        "item": {
          "id": "e272cb3e-ce86-4eed-8a2e-afa92d96c584",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b8a3c522-a824-40c8-8dc0-25dc48793494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3707dc8a-dc6d-4d21-961e-1bc412960c8f",
        "cursor": {
          "ref": "26a32381-a12e-4630-b942-272307173d6c",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "afadc95f-c6b5-420c-84f3-2961aa477f7e"
        },
        "item": {
          "id": "3707dc8a-dc6d-4d21-961e-1bc412960c8f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "099c43d1-12f2-4be1-bb9b-953d3cbd61e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8320b5-af2a-4b80-b5b2-ed42bb2ee62f",
        "cursor": {
          "ref": "356f55cc-1601-4d05-a86b-a1e5b9cf93da",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9e050fa6-8ea0-4904-8a2e-5bb0eeb21a0c"
        },
        "item": {
          "id": "fa8320b5-af2a-4b80-b5b2-ed42bb2ee62f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "32a7df94-9a5b-4b62-ae9d-db45edd1f074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc2dac4-6155-40a1-8bb4-390e16be93f8",
        "cursor": {
          "ref": "32601c03-8169-4c21-8d95-19fb5ac1c2b6",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e0f6e03f-f252-4dee-8177-fc5052958b73"
        },
        "item": {
          "id": "7bc2dac4-6155-40a1-8bb4-390e16be93f8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "943abcb7-2786-4301-90ba-ad07c32d3209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b38ce15-0b8a-4fa1-ae7a-02e5029263b8",
        "cursor": {
          "ref": "68c1e216-a678-4b3b-9598-eb1f91c8ffdc",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8a640e2d-fe9c-42de-9d05-f5513841ebba"
        },
        "item": {
          "id": "1b38ce15-0b8a-4fa1-ae7a-02e5029263b8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9eba6d89-feaf-4b7a-b63e-c2eb9fb4e6cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709a3bb0-b0f9-4d43-872b-9b856e57cb4f",
        "cursor": {
          "ref": "17264894-f36c-4129-ac57-b3028111fcba",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f1042a36-5fe9-41d3-ac77-25af85fd8b4a"
        },
        "item": {
          "id": "709a3bb0-b0f9-4d43-872b-9b856e57cb4f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "14fa09b1-436f-4a9d-b598-916f2c0085ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59a0f1ae-e9bc-485d-88f4-c10284ef9527",
        "cursor": {
          "ref": "bf26d851-0f5a-4bf1-95bd-b901a28bf24c",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8cecffcf-52b2-4fe4-b590-caf3d8ea330c"
        },
        "item": {
          "id": "59a0f1ae-e9bc-485d-88f4-c10284ef9527",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "43f68165-d216-4606-b7db-75dff62a2722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650ab830-2275-4a04-bf46-3e13f7f06254",
        "cursor": {
          "ref": "722dc7b0-4aea-4a78-b543-57eebfa4c911",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "eea3510d-5f48-4bf9-898a-dc68eccd5e4a"
        },
        "item": {
          "id": "650ab830-2275-4a04-bf46-3e13f7f06254",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "acb892fe-a650-4f0f-8f01-b7552264f6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b0825f4-890f-44ec-aac4-7c8cb401f60a",
        "cursor": {
          "ref": "4fd061d1-7d14-4bfc-8d30-ab1ad669c182",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bdbaa62b-5b6a-429c-b211-0a8bbb05b8df"
        },
        "item": {
          "id": "7b0825f4-890f-44ec-aac4-7c8cb401f60a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e93fafa9-9b82-40ce-a1b5-179a7931bea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06dbd70-bc06-46d2-87af-a5464c77ec24",
        "cursor": {
          "ref": "e834bd30-d85a-4b68-a412-974fcbe8a5e1",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "41072289-8319-404e-8661-261fe12ec690"
        },
        "item": {
          "id": "c06dbd70-bc06-46d2-87af-a5464c77ec24",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "101da347-0282-4fca-9ce7-76cb5114dd4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b629eac7-84cb-46dd-8bcf-6f470a3947ac",
        "cursor": {
          "ref": "8a3c6e98-fd40-4f2a-8d40-08bb736a6afc",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9cbc40e9-0455-4623-a80b-4c24aa001acb"
        },
        "item": {
          "id": "b629eac7-84cb-46dd-8bcf-6f470a3947ac",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9b435f21-5a09-4cfb-b333-d317a31ff9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20defafe-118d-4db2-b7b5-4be01a866ee0",
        "cursor": {
          "ref": "4465c8f3-64e5-4e9b-90c3-db4b135e1cad",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3545aed2-af5d-4640-872e-946fa3415c1c"
        },
        "item": {
          "id": "20defafe-118d-4db2-b7b5-4be01a866ee0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f489633b-5d88-402a-a082-7be5d40f83cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a5dcfca-f9aa-4ad2-8d43-9f46c0775cd5",
        "cursor": {
          "ref": "afd33548-413b-4c3f-925a-70cae98704f7",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b5f9cd51-4d7f-4ba2-8f11-6fb86236ef94"
        },
        "item": {
          "id": "3a5dcfca-f9aa-4ad2-8d43-9f46c0775cd5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "af7db36c-f35e-42ee-b109-3028fae09a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a0c3dd-12aa-4e3d-9456-65c5ecab48d5",
        "cursor": {
          "ref": "e6f214b6-4525-43c1-9ec2-b74e7c4ca5e6",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "472320fa-6538-4602-b40a-891568beefc5"
        },
        "item": {
          "id": "87a0c3dd-12aa-4e3d-9456-65c5ecab48d5",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4076072a-9939-443e-8ef5-6377bc63d244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "055790c7-3536-4a8d-95b6-9cf7773f8924",
        "cursor": {
          "ref": "94e5ba6e-d5f4-4b20-a4b6-bc4672e5447b",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "29000791-0e71-4a8f-94f1-044f82128270"
        },
        "item": {
          "id": "055790c7-3536-4a8d-95b6-9cf7773f8924",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "948ebeef-d549-4657-bfd1-ea97e0adb220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1c60cd-862b-4788-bfad-af92c6bb1a90",
        "cursor": {
          "ref": "abb96079-b094-42c8-8ab4-fb3aa5cf6747",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "399a0273-e03b-4e99-a3de-89f033cb97b5"
        },
        "item": {
          "id": "cd1c60cd-862b-4788-bfad-af92c6bb1a90",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8ab2ce9f-f946-41a1-a3e5-fba0774af025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e568db-b5f6-4f6d-9da1-0b2c0d826017",
        "cursor": {
          "ref": "c3d2fa47-de9b-4be6-8c0b-18b78d0ba5e5",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f1392557-9ccf-43de-be16-d167c83e3d70"
        },
        "item": {
          "id": "f3e568db-b5f6-4f6d-9da1-0b2c0d826017",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0382885d-877d-47a7-841a-9a637997d765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b9b74c-7024-4d5a-b376-c878e3556d16",
        "cursor": {
          "ref": "561e7925-d1fd-4b52-88bc-4ca31b8c1fbd",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "bc9fcac0-b981-492a-9f0f-4a745b0ab63e"
        },
        "item": {
          "id": "f8b9b74c-7024-4d5a-b376-c878e3556d16",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b0c4524f-b369-4c73-9a66-b22466f858d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d88e962-399e-43e8-b8a7-a1a40f826bd2",
        "cursor": {
          "ref": "026b6036-61d3-4620-ac36-7b594b58056e",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "cffad90a-8fee-48dd-b770-a6a7a483842b"
        },
        "item": {
          "id": "2d88e962-399e-43e8-b8a7-a1a40f826bd2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bcb16b0c-664f-471e-8801-b2c45ea02f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9ad3f3-234c-49a8-bffd-5051137b666b",
        "cursor": {
          "ref": "1f19d49b-8a76-4d30-920e-4b50e3283522",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e77c47d0-3d43-452a-ba76-4f39086d2b6a"
        },
        "item": {
          "id": "bb9ad3f3-234c-49a8-bffd-5051137b666b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "88f4d865-50bb-464c-b353-6027099899ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c42479-cbad-4a95-9e34-6176474f0423",
        "cursor": {
          "ref": "ce45b2e3-4a06-4fad-bfed-31cff36aaa1f",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2179a8e8-2ce4-4b62-bae2-14bb537f5c8a"
        },
        "item": {
          "id": "91c42479-cbad-4a95-9e34-6176474f0423",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "70ef3019-557e-490e-92cc-d06ab3e1b49f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c13b813-555b-48a3-a01c-98d0e1126e85",
        "cursor": {
          "ref": "a6137049-8591-47e7-8eb5-67c7391bfd2a",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c8731f06-d909-4037-9671-7106eed34b58"
        },
        "item": {
          "id": "6c13b813-555b-48a3-a01c-98d0e1126e85",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d633bebf-fd9e-4106-9c45-1fb442bba96b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14855f97-ce5e-459e-9180-13bfe2e0c570",
        "cursor": {
          "ref": "98bff9b7-bf76-40d8-b547-17efb77b1ddf",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "42de5d77-7dcb-42af-89f5-dc72c1acc555"
        },
        "item": {
          "id": "14855f97-ce5e-459e-9180-13bfe2e0c570",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "45d7b2a0-61eb-4c8e-acc4-08c30746daf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6665e6-f533-4e71-a12f-5becc832a0f8",
        "cursor": {
          "ref": "98de6d49-5440-42a8-b6df-35fcca5d0e62",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "609ba244-b2cc-43b1-8887-5ad7a3eda2ca"
        },
        "item": {
          "id": "7d6665e6-f533-4e71-a12f-5becc832a0f8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a405f46b-9e21-448e-91ff-3e601b3db419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a9fac0-15af-4cf9-92a6-303e4c295eb4",
        "cursor": {
          "ref": "cbf57ca4-9645-4b95-a96d-29e903c73553",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6130c192-5c9f-41a7-a5ed-f740e0141c4b"
        },
        "item": {
          "id": "11a9fac0-15af-4cf9-92a6-303e4c295eb4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "26785958-5439-4a21-a946-3931c0858f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae55ce5-ebd1-4524-bea8-bc1a24a4ce2a",
        "cursor": {
          "ref": "d316fc1a-9c18-42f3-986c-9bfd29648dd7",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "434f21b7-f0b0-4fa1-8ca2-ce7d193447ba"
        },
        "item": {
          "id": "aae55ce5-ebd1-4524-bea8-bc1a24a4ce2a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a59e530e-11b6-44b8-b0f0-1fbde0b2f868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb92762-5fce-416d-9cbe-4e8310a6cbbf",
        "cursor": {
          "ref": "109eaadd-bf03-4a38-8795-ad530ff76d70",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2a682b8f-d128-4431-a35a-2f574c83b085"
        },
        "item": {
          "id": "aeb92762-5fce-416d-9cbe-4e8310a6cbbf",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a7bb2d49-09e5-4c00-9e9e-714e95dc68cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3720ea6c-2b4a-4036-af03-97e7283b0408",
        "cursor": {
          "ref": "5fa7b5a8-b0ce-4364-a6e7-7da316036406",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6db37f5f-9104-4727-8cf3-727e09d95e7f"
        },
        "item": {
          "id": "3720ea6c-2b4a-4036-af03-97e7283b0408",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "33b6d181-4708-4b3e-bf26-8a759679116f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752dc7ac-b17a-472c-846b-9acff2cedb73",
        "cursor": {
          "ref": "b4573f39-2017-4a1c-9b45-9259fdb089e3",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "83ad924c-5df1-412a-8d9c-191379f1f0a4"
        },
        "item": {
          "id": "752dc7ac-b17a-472c-846b-9acff2cedb73",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "eccdc4dd-8227-49bd-b3eb-1b97ed2aa84d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e30fd03-0614-4ea3-8a62-4ac785ee1b57",
        "cursor": {
          "ref": "3d71a2fd-8e65-44a5-844f-ef0d9ed38582",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "667c6569-4a5c-447c-8e1f-5726fe5de3f7"
        },
        "item": {
          "id": "9e30fd03-0614-4ea3-8a62-4ac785ee1b57",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d60c98c2-b428-4603-bca7-786ca8a92707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fef9599c-2251-4663-89fe-1d1fcaa3daf2",
        "cursor": {
          "ref": "ddfdc153-d55a-4c53-9603-e8ae86d98352",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "18651053-230a-4b69-9c56-59abc46b967b"
        },
        "item": {
          "id": "fef9599c-2251-4663-89fe-1d1fcaa3daf2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1b25ff58-e3df-433a-ac49-4abfbad39920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde2ac3c-e559-4a8c-a5c2-09972ecef9d5",
        "cursor": {
          "ref": "6f7028b6-aa9c-491b-8d40-7eebd808507f",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "670ffbb4-4e1e-48b6-a359-1e39b89e936d"
        },
        "item": {
          "id": "bde2ac3c-e559-4a8c-a5c2-09972ecef9d5",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a932b8e8-ebcd-4dd1-8f21-25961ef7f109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f8a9f4-a6de-457c-b5fe-2a525f5a7e8e",
        "cursor": {
          "ref": "26f86f05-c0fa-490a-ac36-59b609552149",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c3a066a2-fb62-4957-b3f9-f548035ffb0b"
        },
        "item": {
          "id": "67f8a9f4-a6de-457c-b5fe-2a525f5a7e8e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3e038aa0-cdf6-4ac3-b774-a3e6a86e8f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f32d6af-f878-44b7-804b-e4359776c18d",
        "cursor": {
          "ref": "bd4857c0-07d5-4424-8950-8ee9db2255e2",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1c6f2fc8-4271-4fba-8d2e-2310c1621896"
        },
        "item": {
          "id": "8f32d6af-f878-44b7-804b-e4359776c18d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2154380b-7a61-4999-87ad-cb140f537379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a0b363-6844-4c80-a2b1-f360fc269883",
        "cursor": {
          "ref": "536bc9b2-500e-4db0-ac34-c26653a6e8b3",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b70a8b5d-421d-43e4-94a2-fd81b7c9e8f0"
        },
        "item": {
          "id": "f3a0b363-6844-4c80-a2b1-f360fc269883",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d3c9e7d6-6651-4276-8b3d-1a8d8bbcc938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0fd5d24-8bea-40d2-8865-ab72227d1c5b",
        "cursor": {
          "ref": "ed6b6697-c424-49d7-947f-27161aeb6c01",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "86bcf7ad-2080-43ad-a25c-e9a24e9b3e5d"
        },
        "item": {
          "id": "e0fd5d24-8bea-40d2-8865-ab72227d1c5b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3592cda3-83a2-41ee-85fc-23a8c48b2f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6deb99-1e03-4103-bf7c-70d0ec741e90",
        "cursor": {
          "ref": "8cb2eed0-1dc2-4281-a2a7-ba793f2bf85b",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f78e9b4a-8880-4397-822c-5ad1f922c885"
        },
        "item": {
          "id": "3c6deb99-1e03-4103-bf7c-70d0ec741e90",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5cff9582-519e-4fa8-a30d-176819616a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b77116-d90f-4382-a1a0-5593f2e8daab",
        "cursor": {
          "ref": "95735f19-cc0c-4b1f-8228-c7b9ab57a381",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "78e46f94-8644-451f-a3b3-49b17f4a678e"
        },
        "item": {
          "id": "f7b77116-d90f-4382-a1a0-5593f2e8daab",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "55a0cb31-8f54-4e59-94c2-138a7b746be7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c587cef4-497c-4fe9-ace3-8d3cc377c2e8",
        "cursor": {
          "ref": "d6f64d0f-36c0-4652-8e40-067dfd691070",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b1b323a9-48e8-4736-8873-3eca0b54c3bf"
        },
        "item": {
          "id": "c587cef4-497c-4fe9-ace3-8d3cc377c2e8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "19e55498-208f-43b4-8c6f-c1e18aa206c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c4ddd9b-3dcd-43a3-ab30-601e60f83392",
        "cursor": {
          "ref": "236db989-4dd3-4d69-9f62-55a12ccf4d6c",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "65f10648-abed-419f-be84-4cb7344c5ba0"
        },
        "item": {
          "id": "7c4ddd9b-3dcd-43a3-ab30-601e60f83392",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f2cdb4cb-20a9-4baa-b0f1-a32d5135fee6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a56c4d-cf0b-4994-ac35-c1e7cd157d28",
        "cursor": {
          "ref": "9da4e038-35ba-4e21-9cee-cf8b9f19defd",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2386a4a0-4036-405f-b490-57274a45f71d"
        },
        "item": {
          "id": "26a56c4d-cf0b-4994-ac35-c1e7cd157d28",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3f557285-93ba-4897-8804-14d93505df84",
          "status": "OK",
          "code": 200,
          "responseTime": 463,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e417b80c-1a1f-49b8-9626-70c5b852a40f",
        "cursor": {
          "ref": "4f9a4db5-3611-4bed-be2c-227b7c3f20b1",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "173bc330-7280-4b9d-9ca0-d8c700a94c99"
        },
        "item": {
          "id": "e417b80c-1a1f-49b8-9626-70c5b852a40f",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "5e747db8-272b-4c6c-971b-976acd1969d5",
          "status": "OK",
          "code": 200,
          "responseTime": 465,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68fd3100-2165-4364-99dc-4f74e175e0ee",
        "cursor": {
          "ref": "67741748-0a70-472d-88b0-de08783bb7a7",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "037f19d5-8b33-465f-9a9b-b3f582ed56bd"
        },
        "item": {
          "id": "68fd3100-2165-4364-99dc-4f74e175e0ee",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e2273e71-98e5-41a7-b9ce-57b219511dbd",
          "status": "OK",
          "code": 200,
          "responseTime": 737,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "812cbb4f-54c5-47b2-a2ae-109330533232",
        "cursor": {
          "ref": "c24f4b98-18a2-4ff6-b1cc-1bfc4d326d90",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8e9aadf6-66c0-4536-8f8a-494697c00d87"
        },
        "item": {
          "id": "812cbb4f-54c5-47b2-a2ae-109330533232",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1772e41a-ce88-4ef9-9457-3c1878defefb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "812cbb4f-54c5-47b2-a2ae-109330533232",
        "cursor": {
          "ref": "c24f4b98-18a2-4ff6-b1cc-1bfc4d326d90",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8e9aadf6-66c0-4536-8f8a-494697c00d87"
        },
        "item": {
          "id": "812cbb4f-54c5-47b2-a2ae-109330533232",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1772e41a-ce88-4ef9-9457-3c1878defefb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "812cbb4f-54c5-47b2-a2ae-109330533232",
        "cursor": {
          "ref": "c24f4b98-18a2-4ff6-b1cc-1bfc4d326d90",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8e9aadf6-66c0-4536-8f8a-494697c00d87"
        },
        "item": {
          "id": "812cbb4f-54c5-47b2-a2ae-109330533232",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1772e41a-ce88-4ef9-9457-3c1878defefb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b4f281d-b117-4569-ac34-1cf0441f1e8d",
        "cursor": {
          "ref": "7e5d98da-e236-4ed3-9adc-7dbfadad1c7c",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0bce60fb-09ee-41ec-ae36-0c38fadfeb5f"
        },
        "item": {
          "id": "7b4f281d-b117-4569-ac34-1cf0441f1e8d",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "3fd9c571-0f05-48a1-a447-cac36f98b206",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0b48e3-6335-4160-9371-6ccc2073c549",
        "cursor": {
          "ref": "aa19fe01-ab3c-4788-b5ea-9826afdcef9a",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "83f1bdd6-1482-4897-9216-bb35bddf4007"
        },
        "item": {
          "id": "8a0b48e3-6335-4160-9371-6ccc2073c549",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d30463c0-3570-4707-ab43-c05978f4e45c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "8a0b48e3-6335-4160-9371-6ccc2073c549",
        "cursor": {
          "ref": "aa19fe01-ab3c-4788-b5ea-9826afdcef9a",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "83f1bdd6-1482-4897-9216-bb35bddf4007"
        },
        "item": {
          "id": "8a0b48e3-6335-4160-9371-6ccc2073c549",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d30463c0-3570-4707-ab43-c05978f4e45c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c00fb63e-9133-4a2b-8409-f32ab4c73e9a",
        "cursor": {
          "ref": "f7ce385a-cfa8-401c-b277-f4e4c8df494a",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0bcc41ee-f05f-4260-bc30-e72dcf5fcc1b"
        },
        "item": {
          "id": "c00fb63e-9133-4a2b-8409-f32ab4c73e9a",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "92072e12-5ef1-4d37-b5fd-5be6a94bc3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b144c1c2-2300-4ea6-9164-adcf0cac7afc",
        "cursor": {
          "ref": "11d84763-2347-4fc9-b794-d97aaf985344",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "44c914ce-6072-4f08-9d61-457a08934c03"
        },
        "item": {
          "id": "b144c1c2-2300-4ea6-9164-adcf0cac7afc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0f46d6aa-a6b6-4dcd-9b58-0e2da82f9c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "b144c1c2-2300-4ea6-9164-adcf0cac7afc",
        "cursor": {
          "ref": "11d84763-2347-4fc9-b794-d97aaf985344",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "44c914ce-6072-4f08-9d61-457a08934c03"
        },
        "item": {
          "id": "b144c1c2-2300-4ea6-9164-adcf0cac7afc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0f46d6aa-a6b6-4dcd-9b58-0e2da82f9c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "66d70782-b09a-4f3d-b47d-a6c9c54a150d",
        "cursor": {
          "ref": "67470a68-6735-4601-8957-35c0b5eb29cd",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "98a69d7c-f0d9-48be-9dbf-cb1c3ed7b977"
        },
        "item": {
          "id": "66d70782-b09a-4f3d-b47d-a6c9c54a150d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "721a6373-6f46-4bb0-84a1-04b7125afab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}