{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f8451b8b-f1cf-407f-a44e-c1a1acdf2253",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b72c506c-5e59-4659-a9f7-b4fbe79bead4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b9af38aa-9322-4034-88be-ef5f2eafa97f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4a3d255c-d80e-4dd7-b1e0-f929592b5789"
                }
              }
            ]
          },
          {
            "id": "1d0de77b-3111-49c4-bd8a-8416d73fb2f0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "188ab0a9-a51f-4c44-b0cb-7b0142e5ef94",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b30124df-667e-4a3b-8702-a2fbc8de19dc"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f78066a0-4236-4436-b35f-f3baba74aac5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3b4b8ae3-a040-4495-9e84-c4d8762afbc9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8e542b9b-eb6d-448c-bb8c-debade251bf6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "374bfa2c-60b0-49f1-ae96-9c7d2ea28610",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "32c07ba0-dab1-48e7-838e-260022bee1a6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d7ca6acf-0476-46b1-af04-5eba6e6f5b6e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "65e1cc08-1d85-468f-a754-138a6484228f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6fde4db8-0c08-414e-8d04-ec266d10f097",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cff452eb-2558-4068-bf37-f2fef12a747a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "883c1ec6-f9f5-4e6d-93b4-de771c76f335",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "80208188-26ca-44b5-8afc-b46e2e3f9517"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a179e76c-1a25-4aa4-a0d7-fea0f230b00a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f9f2632a-93cd-4a67-a62c-3a4c9d03fd68"
            }
          }
        ]
      },
      {
        "id": "0e8bb092-b9cf-4d2e-ab7b-aec5c485e963",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e23630df-a779-4fff-af40-e5db776af8b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a0ec21b8-9bd4-4ea3-8c30-aaadd4f62f5f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a85c9639-6ed8-4bbb-a058-3bd8008fcf90",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3c69d7-43a8-40e0-b2da-84461f52663e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0cfb1aa-f304-4f72-924e-31f78bb18ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce313eb-f1be-4889-a393-0e7183eaa720",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8de5002-45c6-4a45-a362-a9984e203808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b7b6db9-d0e8-45e3-946b-292eb9166280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec4aebc-bbf2-4329-848c-05c7147b06db",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c119048d-9555-42e8-8b10-2e78a2b6e242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4bbd5c73-0aaa-4a8a-8d21-f8a13a9a0ba8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5f44c0a7-2954-40ea-9746-6a2218cde1aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dfa03319-bade-4fd2-9c72-058658374f78",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55fdee72-073f-4c43-ab08-ae5108e959af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0658509-d241-46d6-9f48-781e0e7ac5ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec41863-a7d8-4aad-b43a-eeb942d4941f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7534827-7069-4eed-b08b-7b8c69a652ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0e63da-51a5-447b-afef-1eec35733fc4",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2914519c-32f5-4418-9472-21b1e3560ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0b297ee-ce5e-445c-89c7-689c78c041b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21499d2b-88d5-4741-ab2b-a315736c2370",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "8dff7be4-73cf-4bb7-a9f2-9d8a181e8b38"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "da8d81bb-a986-40bc-9861-b10c9821a49c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a70cb89f-ec17-44be-a984-008d74503f41",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "37d60dbb-d9de-4c27-97d4-baf662511451",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "580776de-5d5c-4c5e-8715-960c58d6d09a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db295c22-c70a-4536-91f7-449bec54a0ba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "3a2c404e-d8dd-4c09-8d84-5fa55c7b3717"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc1e96d4-35df-48af-b82e-a770e9fc3af0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09891d84-ff20-4c19-b530-8d0310fcb3f3"
            }
          }
        ]
      },
      {
        "id": "e1a25061-3107-44d3-b9a1-36be92b4eff9",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ac1d32ab-38b0-4058-bca7-ee54edd5324d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cf5ff4b1-4ab2-4061-8c65-e8c7a763f339",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f59a0214-fe59-45c1-a7bb-6362adb25513",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2f6d9a-ad88-4e00-9b07-d1c7e5281be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a75309-6c6e-43be-8cec-140ae49b4e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8963618-b121-46f4-a6eb-bf94e9ccab20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef3690c3-e637-443c-a4d1-13299738e145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72c7c0d-f1bf-4611-9978-908a0dcebceb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a056c66a-4865-4349-94f8-8a8974d0fe4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ac411e-bc24-4548-bf14-a921a9dc4f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fae510-3bcd-4b81-84b5-c8c5e787a259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78bbfb19-538b-4cd6-8249-20f474d8f789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e202ae-3288-45fd-8d61-9fca0acfb96b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66630353-d086-474c-bf0b-38f99e4f2564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5d2abc-4a89-4892-b709-75b1c19f80d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40075d94-25b5-4698-9fa2-6dc31f4bbc24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "064d4c86-da43-4857-8e4f-6f4cc0e2985d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18c9a20-d5f3-4d19-ad6d-bfa1b26dc563",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de03727e-7a1d-4d3d-a276-9b99f56308e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8645d86-4e36-4308-aa8e-b42f8eade41a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67fafa18-730b-4e28-9e81-9f3d2cafed4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "134e7f4b-92f5-41ba-8a89-bfc42e315cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3415f2a6-a662-4de6-baba-f13bd9200d32",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ffaddb-0392-4bec-b038-aaeaae90c6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4600261-8b92-40ad-a67a-e54591ffbf49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc6c34c-2c40-439b-ab10-8393aec1d826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f7b80f8-36f3-4655-9a84-6933b8c2fda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8b62e2-eb6c-4b2b-b63c-d90604617093",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c4bde7-7f37-43df-8202-06cdb1f89bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd1de0ad-f04a-456e-8504-26a93337fe9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da886ab-a982-4aa3-8450-e399d6bb4bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2203ea38-f5b8-4c02-b7ae-30e338061ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b67d363-bcfc-42e5-8967-10cba8802f1a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb05fc3-29de-41eb-a590-03c81ad9e547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b66ffc3-2574-421c-a430-6f3bd49fa31d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c5bd6e-dff4-43d2-9221-5a26777e3b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4dd2e062-5dd1-40f6-a842-bc407d8a9451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b822cdff-f2e0-422e-a5cd-c5402d036a69",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9c76bc-abd0-40d1-93a2-be0b51b35b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1203ae7-4226-41c1-b060-ef60c7f947e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019e0489-984e-4672-862e-c861aa5e8c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21c6a1e2-f808-4527-8e02-7fb185cee5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57bb28e9-2ad9-43c4-9494-b9b9583e382f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2e5e5d-da19-466c-9a6f-df7fba5ce7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cbabf76-ca3c-4324-bcfa-596f5f97281e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92005d05-b327-43f5-88e5-9e4855131bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20ec4b3e-655c-4b14-9539-87897b41700c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "865b4834-4359-4977-b2bb-2fb9bda6464d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3a5b31-17c1-41a3-80b3-c71c1b53db67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "497824d5-a8bf-4d2e-86c6-2c60241d85bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc37a8f3-84d9-479b-9b2c-0052ad633a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45552920-ca10-493d-ab08-65c967050186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8d2bf8-1325-4dfd-88d7-5ba144979135",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd2ff22-19dc-49f8-9b10-9bb42225c0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a1fa336-331f-44ee-8901-ae7d55e55b55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b4800f-497e-42c9-8830-0e0f1f364a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5bd5f1ee-22ea-4a25-9824-e191482636ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf4e514-8c90-4260-8155-d2e94a53f564",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f79c65-53db-41fc-b377-a4c0c66d6210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dffd27a-d38c-419e-840e-3bd7d0f7e361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f070f822-16ab-49ac-aef8-6c77e5f46229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ad24d13-1da7-49b8-8ff2-0ec82ba0e980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f7aafd-e270-497b-af06-41fdf428cf37",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5987dd5c-0b04-4915-ac84-c70c037acc23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6425b0c5-7f99-4aaa-8597-ad7dc8646434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf3fd97-eb4b-406d-91d1-7b2b0f207bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e53aee58-651f-4d9e-9f82-edc16ca84e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69044cd3-6461-4e1b-873f-79036b163848",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797bca03-7282-4f42-9bce-b98d454363aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62070851-2444-4a39-be66-ed1f481c93d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e204a1a-7dfa-4212-a9b7-e0f7a97810c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef76d16e-73b7-492a-96b0-4ead5dd3d974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16a9d1a-60ee-4187-80e4-ea0550a23edd",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99bb1f9c-b653-4e07-8f9e-64ab1ac3fbf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "663de5e2-e775-432f-9423-48db6c1eea05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a17670c-7703-4ebd-9ea8-7b42ab817bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d15b1834-44a2-4bde-9357-c0db2cdcee81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6187e694-cdae-4c13-af85-a4ffecd76886",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6111eb2f-e54e-4ff9-a7c0-5994d835f0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb0e0d8f-c663-47e3-b494-097a1c66cbcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f6e310-4803-4d98-a5c9-6fae4c759f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "008ef07b-313f-48c9-b992-c0fa7015a07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a676fca-869a-42fe-a22e-e50364487289",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2023b493-9c0e-4088-9535-73cf151ceef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "410ce91f-4479-44ce-8bec-f4e4ed0c9416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac7070c3-2498-4815-a8ff-d39ef87db829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "357d94d5-b70d-4970-b971-4b4c680ccf5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9dde94-c24b-43dd-94f0-fda13d017ff1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2561e79-955e-4823-89d6-da69d42996eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f497fe2c-ed90-49c6-acb8-f3954c097611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff5cb61-f40c-41f5-8b0c-527ace51c476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "188f189b-fd0d-4a8e-9854-25f8688d3bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b472b7cf-9ffb-497a-99d6-9afff2fb3919",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c80ddf-16b3-42cd-a99a-b8965b7d6667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f149ce8a-f3b0-440a-85a0-6ea0cd0054ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3717d0-59c9-417c-9b40-52225b707aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca8e8fa-4dc5-43bb-b96e-988e360c34a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37667d5-51e8-49b8-bb3f-ef63f4b60bb3",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77d630b-720e-407e-855e-36038473a527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2fe2ffd-f037-469d-997b-c4016cba3fa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c2b188-f9df-4fb7-8e88-0b720989dd88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b84a926b-15cc-4330-b6b8-a892688a17e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee66d2c-4b22-4ea4-9d22-7e84cc60e236",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea4f3a4d-3631-4b08-83a9-706f7413a457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5ea4998-6b9b-427e-9516-bcdbb1a95dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1ee24b-cf51-4fa8-a800-d9020e631dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "216f41e0-e480-4fae-bab2-7492e192f0a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ecf634-5935-4ea4-9f67-533972cdfee8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e3d0ad-ae60-490a-ba78-f7256a5e9c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa0d755b-ca15-4798-bc21-36a800bc851d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ef41cd-998d-4384-9d7c-66ac134f90fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b776452-35fb-454d-9d94-b58db9bf7dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcf456b-7085-408f-9b27-8ae058453232",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3598d833-12f6-4502-9b4a-ab38c1f60b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434034a9-a94a-46c5-b2b1-ce0d79c8a5b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d788790e-32d2-4b2d-85fb-f87126f48fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2160aa4d-b579-449a-abdc-7f2cf8e49b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a9bf542-ff1a-4c9d-8423-ccb716891aa2",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3f6d2d-88e8-4ced-9027-70e3a49c576e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f679a7e7-14be-49bd-8654-2e2e34693403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91d96d7-2b08-4133-90d2-c53f96b5d73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9323d007-9eb5-4c97-b43a-72ef7f8a31e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "036449c1-4e96-4c83-80b4-8c61ce2d314f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fba7079-e079-4add-a157-4858a670fab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7317775d-5570-490f-859a-95cea5a346bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8d93b4-e405-4149-a9ef-7bbe0b3047e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "56898c53-211c-4d79-b95b-6b2ea9ec0487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43b24d4-b84b-4916-95a9-38bc253e6b76",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ad386e-46cf-4d88-9c2a-10598f8a03ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e1ca97a-933f-44f9-a03b-dad1da799eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c53fd7-da91-4d2d-8396-dcfdbb5f10d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9849cc34-be08-40af-bab9-06ca75ee69c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69f5369-9e23-4285-9eb6-b3984f18b088",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "467cf6d5-5841-40cf-bd5f-1a223045a694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3067641-6611-4d3b-bf4a-8f45deb4a6d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d56d0f5-e9a3-4ae1-a72d-bd9e43910fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf7f36b7-6c1a-4469-9610-fcb9480335b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0e096d-073b-4996-aab8-09f2bd3066a6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe69021-8bbb-4617-b31d-616c68fccc45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30b62222-610d-4dda-a954-45a13aeb4d3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a9eb92-854b-4508-a2ee-a95424f8f167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4553d80d-8e69-41dd-97aa-3b3429a099b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d82bc32-30fb-4398-b05c-dcb5bb1373a7",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4824e2b-f1d3-418d-8ff9-5cbadf3262de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2bcd79a-e26d-4b45-acb0-2dcb2c3f97f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bfd3b3f-9cd2-44d2-93ca-1d1c2bc6e34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04acf1c6-4a88-40ac-a634-9e1fdc9a1574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c5518dd-9c19-4c7b-9217-9456e16467c2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0debe49-04c2-446e-a107-ec3b9b139832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4bf470c-4e7c-4f3b-b45c-6fea903858db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4bd19d9-8ab3-4b74-989d-d7e3cafc9ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "80b0c5e5-3aff-48bc-bf93-422fd951014b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7cbcbfe-c7f2-49cf-86f1-c4153dc64e75",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f212a39-627f-4b7b-b989-87007e8ceed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9724b776-4eb7-4f7e-a61f-82bdbbede3b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50b93df-0502-4c1a-86fb-c51595479f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fbaca6e-b51e-4177-8c53-fbe83bbab4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a9fe96-2c60-4658-a7be-29d45d91612d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e585f6f5-1f17-4418-a0b4-da737cb96cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46c45dfe-b736-47f9-afd5-12128b9f238b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f949625a-d093-45d1-aaf4-064065e153c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d535be0-a971-4236-a56b-db9822bc3808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af35f2a3-aa05-4acb-a25e-50572e330fe1",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39da1e3-459a-490e-94fe-5132008eac98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1533c6ff-0de3-45f7-b4e1-76f2aa881038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d1c5f5-ce0a-4576-bd1f-4e151cb202f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54a38531-3197-449c-8074-c087306d34d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cbcf616-33ec-4d4b-a95a-0fdf3b7bbc46",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2cef6a2-8cad-4eef-8978-1452c7be81d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a33012b-99e2-488f-89ac-695d9634a34f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bfb872c-e17e-4ef9-a5bb-312cb570f3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a25bf1d-618c-4fdd-b19b-4467dc7e01ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5632e01b-ad11-423b-9b66-1ad9cc8c4ad7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4beee5a4-c0af-47c0-932b-ee6e9dc68dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f06f96c-cbba-42fb-b579-717f1363178d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea60a8fc-39a9-49b7-bd97-9046c142cf7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "310ff9b5-4a10-4691-8519-8a3800f1cd54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3817bd4b-b99d-4b58-ab18-b5afeddecc6d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0fe6c05-608c-44d6-87e0-2626ef908b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7d0b2dd-a705-4c4b-93e4-56782217bf81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bced21-a89d-4b97-8e43-138ce595f723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b2e6b315-d281-438b-ae03-7258ba6627e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb244a8-40a9-403e-a0b5-08427106b101",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e16eec9-76c6-47fc-a25b-8e9b1a0b1e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59c83382-35a9-4bb6-95ee-e06802fc332f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a4aabc-bbca-4d0d-b8c8-fd85a316e03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d294753-3914-4e23-9709-36cb944f2aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b00c7d7-a519-466b-8244-8aa7f34a320c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ecc64b-8f0b-472b-9332-17549b5e1712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd4c46a9-3fc2-4654-ab36-5f16a5461213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e1638b-a05b-43a0-9e79-721aa7064203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8b16112-d8de-4faa-b0d3-88504d5fb681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302e4b52-4f24-4104-8ae5-dddf82e62e71",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80c1dc3-779a-433b-8e85-688559f0e24a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14889cc9-6a32-4373-843c-748ffb20c0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5532f3-0135-49a0-be72-d2e589b55684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "428e41a0-3222-4e46-b12b-2ae002943adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546ea513-b2a2-435d-9d85-aecdfd0ce6fb",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abc4226-5240-468e-8a77-7a19568d674d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17b7516-fe67-43eb-b1c4-736d4639b405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62a1493-ca71-4ffe-96b4-a7201562282d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9452f474-0bf1-490e-a660-8b9337ed9ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259088c7-6314-4ccc-93ef-1b7c4f1162e8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2449725-c0f4-4744-bb02-809b2c219b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "756db744-92ae-4121-a519-0a2509378939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe01f4ff-9326-461b-86ed-99a1e862accb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5118de72-f372-4dbe-9bdd-948e785b4cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b77725-c493-4a3c-8528-e737dfb4619b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05410c52-c3f6-4fbd-b3e9-905e49424f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47c56953-4448-4ed5-823f-6cf38ea1dfb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fc02a5-e99e-4a18-b43b-d9c591dd26fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "01f851eb-a76c-4249-8f6d-911ada6b04c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e95cb2-a3ab-4995-ac82-637547654682",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70e42cb-64ba-4fc5-8b2f-0a6ac2b1e1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b49334-869f-4aa0-b93f-9b4a24979e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f6723e-d475-4760-8485-39749014a54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c288fd23-19c0-4449-a42f-05e5277efa5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af46d79-28bb-4f70-9082-4009c819da19",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a712489b-1cff-4482-9911-ae456257cb2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "063d5c1c-239c-40d0-9bcb-c5ad082964b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a08b13-04e5-421b-a623-62363b5b8d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2dcf176-59ca-48e7-96a0-e27c92dfa2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8273b863-78ef-45b3-b78e-86fbdc5eece4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8816c13-b599-4fb6-97ce-5fb846be0f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3076af9-b98a-473c-b303-a07ca03aab0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed643239-7359-4539-8ffc-b752ba46b19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "69b29370-498e-45a8-b52a-25da9c384b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e2a1f1-42ae-4566-baea-0cdb400fefa4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1d2812-7ac1-4d75-9f3e-fa908de8d77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5a762b7-8b46-402b-9a86-b1793bcfc9ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b104d39-e381-43c9-aba7-0b8a792abad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d401c9b-203a-4464-98bf-f420b94e4357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b14ae92-5001-4e5c-bdad-59e9791928a7",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9096a6-6359-4e33-a0fa-7a5983c7c220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa34854-4900-46d8-a0d6-c0623d48ab24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130ca753-46d3-4451-b490-13d4fca7248c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fafc2b3b-8735-424a-999d-43b998093ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2480b62c-b3e1-4cee-9804-930a5b12615a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10f6fed-ed9b-481c-bdbd-76c18ea20218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a343e1-adda-4d74-8b87-def7fd4410d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ddcf194-ea54-4a2a-bd1a-e353d0347637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "04c55cb6-13dc-4ecf-9108-4b330d8b500a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2764f5-fd99-4a3a-be6f-32c1779828cd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9058dd4f-c67f-4120-86f4-0737f83736ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce85dd0-bafc-4f4d-815e-648b681165d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67f1801-0f76-44b9-a784-978ad6e8db73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a20668e-3587-41f3-bef3-5554e6e4f6f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c54e6a71-f2db-4fd2-9be3-8014aa08c561",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b680e6-938a-4afe-8314-39cac0dc7c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d35baf-f386-4177-8e6c-213630480ef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c7dba4-30ce-4c9e-a3b7-37815d4f305e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d0289232-18b8-4f6c-9208-5486b2a1e020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "478c3b56-b83c-4d72-82bc-50eb9d180e7e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7215421-2d74-433b-bc6b-c4d774792c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f23596e2-475c-483e-9e26-df781e813aa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da167c6-0eb3-47d4-a307-63f6acb4e5e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f7102f4-1a1a-4f95-96f7-29411a88d213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e117ac-ac1e-4ae2-91f1-6071b8dcacad",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f311b56-476c-43ee-854a-2417304dc49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d45af7a-350a-4dcd-a2c4-9044078fc818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cdd2827-efd7-4e19-a0c7-e902b04fd421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "88135d61-5d53-4a56-a403-8caf142e5465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a10ac26-423e-467d-811b-c473710e3cac",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "820b674d-96cd-4c93-870a-0b54fffb77c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cea8bac-9cea-4d88-a232-f77a55cbd13d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef251521-f983-4fac-ac93-9bdb4d529827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc7a853-51b9-4297-9c10-6e94b7a986fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82cd781e-b2b5-48b3-8f17-b0db63a75afc",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6e29f4-ad69-405d-92e3-3df374e0fcc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b43d79-875e-47e0-8dc7-6f2f15b8850c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae7e914f-12ff-4945-b5c3-f1997dcdc388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d28240cc-0644-404e-a610-f87de1ebf076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85b3771-0cdc-4e4f-8956-b156d10c99f2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03938942-8447-4f9d-9607-eed38c36f3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4dcb037-a686-4753-9b3d-9d87cd929dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e108e1de-7765-42c8-aafa-cd9b5f88344a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4610bc40-dfed-48aa-927a-24ef6acb3185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a95415e-513e-4258-8bbe-724dac95d2c8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6878a6-acee-4e9f-bc1d-19432699cb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0abc83d9-57f1-4852-8283-e455a0179915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9aaaf4d-141e-417a-879a-cf48a439fbda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6b6d84c0-5814-475c-84fe-8c2bda2bb78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582dbb34-47a1-4979-b844-e2d83e0460af",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670b82ee-8277-47aa-bdf7-c9fdcf8a62dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27587c28-58a2-4611-911b-557105532216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee30e17-8768-4e2c-b191-0e75c1fec241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "46e46e90-b5b6-4e92-a5a8-0b30bb2329e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f07088-3982-4558-90cc-b6925facd058",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4773d502-bbf2-416a-98d1-927462360464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ac1cbe-07a8-428a-be39-41f404256610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80fff900-6e92-4a6a-a40d-087d7da28689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "755f8e92-453c-4378-98a1-0bc464cf8101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b517b188-d34a-493d-b105-74a163bcb577",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08aa2602-6c45-47c0-8228-f7f46618bf28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2360bdb-4077-4be1-b762-326d5a759840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2a2dd1-6c00-43db-99d6-f2bb9fa52b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c397a37-716b-4816-9a7a-6b7180f4a6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92a8d8a-ab56-4bc3-8dbf-55d046d45ffc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c8aa6e-f835-4054-baa5-2332af0ee22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5862a611-b2b1-41b0-8efe-f43adb3a443a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e44873-939c-477b-8999-f7575a40beba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f602918-c3ad-4d3e-91e3-e2b66cb8dd0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e880bc25-78aa-4540-b1f8-248c65186f14",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "473275cf-29b0-45bf-94d3-438c8fbece2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7403b8a4-8660-43de-834a-eed405b67efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82021b6-139f-4a81-b4f0-2aec71c5760c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc9c405d-bf0b-42c4-927d-cf30f5a818e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc34a90d-153e-4967-b062-f4d715688ddc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cb7d65-1a9e-40f2-b6eb-1e6fc8a319e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f2eee60-2494-4b93-9f10-f68b4394f976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26024093-995d-45f0-b2b4-6dbcf10e5781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa628aeb-d300-465d-9b87-6289bb725b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f68588-1bd0-49b8-9a96-ef480d5c0dcf",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ab5604-bf23-4f9a-883a-63b0d1b47195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f703bdd6-8d99-43e0-a2ff-cf5c99aef3ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da7c925-3a0e-4c2c-86c2-e481d849f73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "11c7b714-82d7-4289-b979-629f7e12dc34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68dabd8-f767-44d2-b448-bb7235bb42d9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be2c7f1-b1a0-4bb9-a498-9ab066344d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0dee829-b2a6-4d01-9ebe-762f6bc086a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f141ea39-76e3-4b35-ba26-0e49e2024192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "936c2e50-e33c-49c7-a2a0-c3460b7251c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e247cf-b2bd-45a5-ab0e-ae9d460289c3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4f38ab-1d08-4774-827b-b8d9c258178b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7977fd0e-665a-4d53-92e3-45f53d2a8eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d8a49e-da5b-4806-8606-1799880f7c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "59e34cbb-44f9-4e91-bd02-f3a72867d404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb37677-a1e0-4e91-a9ca-5a61b92284bb",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2ee77b-9ee2-4432-9dd8-38997c9fc501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "110b2c57-e4e1-45a3-8b65-f578bfffa7f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461940f2-8fa9-45a8-88d6-33841ad95b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8cec039-0f14-4780-a294-c9a05c2ed5ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e14bb3e4-368a-4edd-b7d2-e1ef749fc7ce",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "635ba516-158f-4c34-94bb-f891eef9f06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae3966a-d219-4925-b303-4e4ac5944d1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd6e664b-d594-4aa4-9522-e8fd0bf2aa46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b511d89b-de0e-45d8-9dd4-89094e0ba5ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0004138-3752-47e3-979d-7861bf599f8f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d483b657-0d9f-48bb-8182-38a9a5cfd987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f2a35d9-11f3-497f-8268-30ac07e2506f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2cd25f-d727-4bc9-b0bf-e0adf15b2066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3061f9cd-c90c-4bfa-b820-575bb30c000d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5845f6-218d-4246-8a83-c45de2ddd445",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8965933-4944-4c4a-b222-56894ea90f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "187f87fc-0a2e-4605-972b-9e2b9bc5861d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac75bd0-8671-4e61-8b6f-70f5d3cc1c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "07760dc3-b10c-4c2d-807c-73fedba6d78f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc543c3-ded0-4562-b8ee-001c54568002",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97a355d-727b-4b4f-b4d0-bb6d6539b002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e5334a-002f-40d8-b954-28f1ce4e785e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e75e922-ddd8-49eb-88a3-92a204dc9b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "26aa5652-e459-4394-b7d6-f9961ceeab86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cab8966-19b5-4f2c-b191-0a60de2dcefe",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8339871a-9f49-4063-ad94-cb5dd61a0160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4a45f25-202b-4ecf-a171-dcca09bdbae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a757bc9d-89f3-492c-b049-883b3ab14ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "361528b7-0268-4e4f-9bc0-3d75e17b1b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9cd941a-66f0-4ff4-b1e0-aeffc40c6ffa",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05bb385b-6153-4689-8c17-08e39e2410f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ede91482-7315-4491-9e36-d0cab1fb45c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf34ce2-0106-4128-b454-f9f1295773f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "16fb537e-baad-44ef-8826-4c38d2e622e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d35d325-fd09-46ca-ba73-eea9233c0bd7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c435385c-fe9f-4a2e-be23-d01ca27f9afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4256a9a3-d892-4c9d-b48e-1b95e98d8127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c3f673-546a-4d34-93b9-effec1677f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "55053e63-91c4-41b6-a263-11717f93df40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e376a79b-1918-4df1-97ed-850857c6ffe6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91d8363-bf38-4b99-b99f-22832b3d24d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e06c002-7ee1-4b0f-af7d-469ba5d7802e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac29143-38b8-4e4e-81c0-3e0a2fe9891f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4c869361-9886-487e-b23b-94c3ef60b415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c50462-ae16-44bf-a61c-34af236a90ac",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4b82e3-7b15-4217-84d0-7c1c42056453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b6fff05-df28-4dd9-9cfe-7fe943fd877d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a3d64f-f222-4f63-a93c-3546ec5dcaa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ea78989-0135-499b-a2a3-b6e89dcce465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80bf809e-4ab6-4a4e-852b-1b1fdf5bad0b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "334cb152-776c-41f2-a2df-27c7ef68033c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6455ac12-f294-4723-b505-8b7d9fcc0f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420a0e44-dd9f-4a2b-b0c5-a11677c4b981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "263c292c-336f-4fd9-8c47-b0369bb8a327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1acefe6d-21b6-428b-b21a-c81b07c8f2c5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e67ff4-a4ef-45a8-b9ed-290548b761c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd01edaa-4132-43bb-a017-075eb5fd13ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a440e6e6-ce15-40c3-baca-b3d8c3312ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4b5410f-0ae7-4376-946f-318a92d171e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be01f8aa-b98c-4aca-a17e-32dbeb3eb90b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbbda378-fa4d-4b6c-9b58-5376591f10b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c45cf334-8ffa-4ae9-99e8-409cd9f6624d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4415ef16-365f-4faf-a127-df3d9d50a1c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7905a39-e340-4016-b35a-ab88b3f1ec7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b3f90e-a0f9-4d21-b01b-3e9b9ccd506c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30eabcca-ca92-4b2d-9e18-cdcd60b7c7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "014ead2c-972d-4b41-b9f0-e1501b0ee18c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cca503-13f8-4f4e-999f-134ac48b1886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "095e5806-90cf-46ee-8b72-60e62207a44a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2150b8-a20f-441a-8c8a-f79112ed8e2a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feeb82ac-5e8e-49f0-92e0-7f5351a1ac7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2562e75-6ecc-4c79-936a-c30cbcb7076e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6bfc2a4-34a4-4063-bcd5-5938faa6bd49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f1f551-c006-463e-9b75-13f474bcbd93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b10ce99-3b1d-455e-be0f-d294208312a7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f1263c-8495-4f3e-a7eb-23c44e432c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b66512-2a16-46a5-877e-a4f8d494e98e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3439f378-76fa-44ca-a0be-bdd3de310ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "201fb9f1-7cc8-4ac9-827b-8fc0c46aa9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3391349a-060a-4b39-b776-578e94fff05f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5e00fc-7f26-45a8-a85e-2755c860c781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f3e4a61-ce8c-478c-ba50-6be9e0629da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c5c754-a9ae-44a6-b979-e6a3cf0d1690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b529ba1b-8f7e-4755-b8c2-62bf62d02e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3e7aa1-e8c3-4ce7-817c-39c0d3f21f22",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec64e65-bcac-419f-a26f-3f04baa3599c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68cbb2d6-6c32-4e78-9cf2-bb6f788db171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee56f55-2537-494d-abe6-9dc330493e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd8502a6-df13-4c94-a07b-9ee3ea8b2682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976ef379-8a2e-42dd-8edf-6515cb4b302d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4eb43f1-a325-4f1e-aa5d-2bfb5fdbb935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b60fedd-6cb9-4536-b3d5-99ea348819e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdba824b-a350-43a0-859c-c483218f1c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d5b6c85-1540-4a7b-9d30-fed7f34c6a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb943517-5c6b-4853-a37e-edb26d1c21ab",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe7ca47-16e4-40e4-bb2c-e4bacd3d958c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60debbb7-7b1f-4b80-9b5b-3e59b4568f53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7965f4ed-caf4-4650-94dd-eb5ac855dd0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e5f9d6ae-63b5-4099-82c1-f0ddc7df42e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370e3436-3c1a-4856-98a4-e86cb44fe4f8",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c95341-4f5d-48e3-a4b4-004ed34fada6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40cbbcb4-074f-40e4-baf7-941baf0c4f55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e72aa04-d99a-41ec-b7ab-797010162d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cea0fcd6-8a68-49d7-b414-2869586521fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecee4e78-035c-46cd-a832-49b08a27a7be",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6dbf70-b047-45b5-8e0e-490bf9442ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b9c35e8-1ce7-45ba-b064-8aed68e4c3a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa922563-7842-464c-86cb-c1c9391ec34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc52026f-189c-4538-aa4c-ef20d0522fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca12f59a-aa56-46af-87b1-b103b1edd8aa",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ec8604-05bb-449e-ba5c-a7c2c15236c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36974061-bc1d-40a1-be26-70170f1ff621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5547f0-61f2-4836-b8e8-0ff7f9539a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "809bc8a3-3424-4687-991c-443efa14e783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1748fa-9c9e-459d-bee1-aa3a77263d51",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db227b41-eeb3-4e3f-867c-b2ec260c6953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e3b9e4-b986-488d-9977-1ed95a55e2f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7edc99e8-0d5e-4c61-9fb9-6deac5584f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd4eab28-6106-4094-a4b1-7415463cd590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4819ec8e-750b-4f0e-a273-74e1610d8f8e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2c98ab-8967-4ee4-aee2-fefbb8712899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3019dc-e7fd-478e-ae67-546221d387b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32fd1fc-8396-4ddf-bac4-c3302a2f7f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b9af54b-b457-40a1-8ed7-d34a20177a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d85f6d-f5ba-4662-beec-c92da4565b0a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05eabe60-57aa-499b-b7e9-0f2e96b3ab46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57136850-5b61-4fc9-833d-0640ba9fa2bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57fbebbe-58c5-4dc6-a8a8-4c7979d7b65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa5882b8-81c8-4dd1-b256-fc0918f50dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f86a83-320f-4e5c-8478-e53c3a6e5375",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c447f52a-434e-4512-90ce-80df49a07264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "41d0b9d9-5a84-4ffd-b770-59e81df840b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177b9a6e-a80e-487c-8ca7-6cf487b98540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "300c4f74-13e9-4635-a529-70343a93d8b7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1c8a0b78-49c4-4db0-b252-64a9bca03027",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7fcea5b6-f372-42c5-acb6-25609df18c42",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb18f804-5020-4e1d-a3a9-ad4b8006efae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9591ce28-464c-44f4-b96e-724478db3df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4b4d03-b305-440a-9910-6e4ad10c5908",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "7fca7d4e-0b78-453a-9bac-efb52a086e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c7be06-1dcc-4437-976a-c11ec9b6e015",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6802a7f5-6881-4cc4-957d-dfd1bd260ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f872649a-ce8e-4c15-8b74-b735fb5dd589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31601244-3226-4559-bfe1-c04ca39ef658",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "008a0ba9-e14d-41df-a642-ee8cafea93fc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6af8cf9d-275b-422b-8327-b0c3db467755",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df8babc2-3921-4d34-861f-be8774c8235c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "23b40514-05a6-4375-b222-6d2e9d8336d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96e587f9-8346-445b-9e1a-3c8304b0d801"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1bdc0ad3-8d43-488d-aee5-5ddc203f2149",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2ee0d209-0937-4b93-b997-9dd6c222cb70"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "75d1f4f0-d6cc-4705-a21e-a30d3e346257",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7f1976a3-7188-4ed8-a229-4421e9e4dc6d"
                }
              }
            ]
          },
          {
            "id": "1cac4307-2a32-4c63-ba50-a33983f6790f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7dd59fb1-603b-48cb-835f-84e1f62d314a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f590a99-1e00-40b8-994e-b2f8449d3414",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6139b22a-43e7-4bce-8184-164dded16d6a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9904fb67-1cdf-4248-ae03-c8d6c18636e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dc05c985-6cf1-4f1e-a561-3ce74c926e4f"
                    }
                  }
                ]
              },
              {
                "id": "acbcec50-f980-45dd-a2bb-2992fe0bc99e",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a3421cb-e8e7-4358-b141-03716abf651d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04f0f68c-90ea-4025-9abb-65180fa149d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75186f6f-642c-4afa-83c0-e5532056027b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "00537d85-f34f-4e2b-a611-30b6492c82c6"
                    }
                  }
                ]
              },
              {
                "id": "23c4fad8-71d2-4750-9ae9-506e3af03f74",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aae32e4f-7b6b-4b61-a77d-8c89b1cc88e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "72645b28-caa2-4ae6-b15f-c73b6cbec33c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6674660e-4130-4aa6-998c-bac6b83b7d82",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "42366016-cbb5-487d-9bd0-3450f989988e"
                    }
                  }
                ]
              },
              {
                "id": "931893ea-55cd-4902-88f7-512415106c54",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "17210529-91df-4e8a-8cfc-5ee773312c40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a1f330f-ef75-4b6d-9f9f-1f71e4c79591"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8153658-2a20-4115-9ec2-a89801f104e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "efe08687-0131-4c76-a599-2b43e202f817"
                    }
                  }
                ]
              },
              {
                "id": "d04e05a5-14bb-4db1-8d94-c56eeb9cc109",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "45e6aeb6-abbb-4c45-a764-8a67f733ad62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4448d52b-6bb1-4292-b070-9e11a6d58b2a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e49a864e-8a93-4b4d-ab7f-125d17b76a32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7d09a53d-dbac-4769-b284-f53224b99ab4"
                    }
                  }
                ]
              },
              {
                "id": "28d70d98-434d-404c-a80d-3caa52700e56",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0966093-3e28-4d9f-93de-32d40a0fc00f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c02b448c-17f7-404b-bbe6-38b9c76eeaca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4a49532-6c3e-4573-ad87-0bf4ef72241c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bd028f8e-dd7d-4cbf-9214-89d360871cdc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "88900e19-33e1-4da4-b5ec-6928e95bb6b7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c91b1c15-1476-4edf-b2c3-426a74e68141"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a3106d9a-6922-463a-bbd1-6d0af42463d3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "786a4291-2cff-4e4a-9c9b-b0d7e750901d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4985793-5e1e-4301-ae0f-9d0315a67219",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "85df95b7-acf9-4c09-9aac-44df0bb6275b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "44197097-1469-47fb-9dbe-8786d1d4caef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cfa0f619-f2c2-4eeb-b77a-30f8833945dd"
            }
          }
        ]
      },
      {
        "id": "5ffbe7d4-6057-4ae0-9b0c-f353398cda5c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "dcc4eaaa-d8a0-4cfb-ab05-feb70dff6e00",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3864911c-b85e-4d02-8be3-1f861951138f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f563f863-68bc-4ff8-8f1f-7b1602910f47",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2296d82-0ea1-4f5b-b7f2-a72adb9e047d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54626934-0c96-4d12-915f-95234c616525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b090823-5c1c-4763-b314-bd975a0367de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b082e484-2b73-4fa6-8598-18cb85782b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8eb708-2d90-4bcc-a5ee-55bf8e965427",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a27ae7a-4c8b-4232-808f-cd1ffcfd701f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4799e20-6355-4220-9ac3-3b9548432028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e21a92-9715-4c66-8f13-3556aa52995c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "30a57128-d56d-4d59-aab4-cce29cb573c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf264741-c849-426d-b02e-bef5990e1f25",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9483179-f737-4c0a-8d9e-6a72142bacfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ccfac60-e8b6-4330-88f7-47486e7620fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24304655-f16a-4d26-b4a7-78a4cc2d0e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f72b380-4f36-4939-ac54-6ffa60974400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1291df3-abba-44e9-a080-336af5ed31f8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c5b45b-ff5f-496b-abe0-0ae8c1055323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4215ac96-3bde-415e-8f72-f979b7c54c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd519120-fba4-4ef8-a11f-708ad9b8bde2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f9fd94f-8803-4b73-8654-8519ac3c8b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95301bb4-6f85-45f4-8ebf-3d2183c51b9c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ab668b-8578-456b-9726-04437ece72f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3259c030-6965-440a-b1bd-a13403495885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20b850a-3a14-4a20-8788-2d27a2f878e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8aff365e-21b2-45ee-9d6c-8cb8cdf0e9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a1d63b-e8ce-44da-9a7b-bbe521b5a4a0",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c403763-ce84-4f44-933a-bddfec172af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e1654b-fc7b-4e57-a258-efa2189fe956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68825e5-fd89-4b6c-b306-81f92b73a48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "df160784-ad6f-4ee3-be14-be4347bf0afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590fd9e7-bf03-4514-9a43-8c1d6cfbf169",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e013967d-22a7-4843-a035-ad0be505a297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b496aa17-a795-4a90-803f-924301139b0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e21d7c-a77b-4fa4-bebe-eea1ab1891dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbc6629d-d350-48d6-b4b7-204c7b90acc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15cebcd9-244d-40f6-9a8c-f5d6af14c719",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a58630-c17a-4384-98a8-7107de35100c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7825407f-3798-4406-b543-b6f87d27ce59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d227ac7-98f9-4ffd-ac18-fc4601a26223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59a4db8c-55c6-42a6-b1bd-f4ec6b6c1c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27d8976-07b0-43d9-8b99-74674c418270",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1ff762-326a-4815-be47-155079813069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76f4014c-d842-4fa6-8dad-f8862fc7e8c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51987d7-8bfc-47e4-bb48-75beb57ebea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "128cfe54-4c75-422a-8ad5-84f9515b2c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0b1a02-d36e-4588-9292-8de4e9c7fc34",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31578fc-efab-46ff-8033-fb92627e987f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a47ce03b-b853-483b-b32f-1deb1d76abc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5344b0d5-63c7-428a-93b9-0aacf777eae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03d25334-a094-46c8-a8fd-b55b9431f430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7dfe71-9f3f-4eee-8a97-d646e2dd7c54",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63002966-c8ee-41ee-b027-86c8c43ebcc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f3b9bb-3162-4745-9bec-5575f739d389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5de4a20-1a75-4a08-b92c-c2efadd53951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1f80b2ee-4b08-406d-8599-074172f80073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98a6977-8f26-4d9a-bd79-54cde6f31404",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7b30d7-69bc-4461-af45-f65edc6adeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1182980-a9b5-41da-80c7-f2a9ce0b7a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8a28db-bc68-4cce-b69b-c2af4916e878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2afe8f15-6c83-403b-8a70-4ca8c4229d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd7cd99-4117-4904-b2ab-14b0ce20267a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5b8644-bfd0-4e43-bf37-866ff8dffcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa7640d-060e-4fb0-ae4f-4c54e5a26dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94549456-3e21-43a6-b2a5-e5d25782915b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f773ee95-8500-4701-a872-a433d990fe54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476fc5a5-5a19-4e6b-83ae-1c2e4fe87fb3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd8c763-5afd-4348-8d3d-bd6b16dc644e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa5c8997-0eba-429b-9598-48c7d77b718d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "296f0e62-6f83-4e44-9f7f-d368818f9a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "02548c47-b0e7-4720-9147-f22dcdbe4314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f19799-9c1a-4d85-9a5c-17dc2688caf1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd831978-303f-4fc3-a796-4e17b4564a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91184d04-dbab-4fa1-be8b-149c548a251d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401a5caa-0a81-4bbb-bb6b-674ca6fe1d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "417877ec-fc31-4705-9ee9-c1d00c238c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8bae731-f52b-468d-9429-b657ab384fba",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7683303-8e59-49e5-9869-0c7628d8ff62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43da915-2d7b-4a37-93a6-6814b9d59efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52703844-f225-404a-b075-4e557098043e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "141d0213-262a-4001-9e1e-a6800f068842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8e7fa2-7091-4fdc-b54f-8b1aeeda7c88",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2039c775-b9c7-460a-a28c-6f0f374b372e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eebb062-100e-4ead-82e4-0ab0720610b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca71c034-d5b9-445f-90af-19f77ae43bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "df62d82d-4012-45cc-bd6f-e00cbef2a86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be3838e-30f3-4e3d-92c1-4379ed63edd9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445d9bde-833c-4247-92c5-db8fe63f7797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42e4fdb4-6c42-4150-94a8-7b1e1d06ae78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c437085-bc83-4ea7-aea3-f44b22f345f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f987c09-435a-4bbf-a543-35f384eaba93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ca3e9d-0897-482f-a8d6-cfb970e1bd69",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e2e602-35d8-4026-a0a7-3b6d003811fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a34a7ea5-1144-4dbe-8308-88597b11ab8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c35d498-5f28-433e-801c-dc2b4982b915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7943207e-0596-4a9c-8151-b9ef7b75f1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f4751f-da3e-4466-91a0-b362cbbd3ffa",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f74c5dd-a547-47d7-a1b7-254446caddfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0bd0dcf-5ec9-460c-9e98-b5c115a7c0df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24be8f33-456f-4615-a6c5-3bf69aa0c6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1105bf4f-468b-4776-93c7-bd13eb1a2363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfec044-0313-4199-862e-156f91afc332",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1be8e2-bee8-4b80-94b4-e68b39c58dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "353d8382-7c75-4e90-bb65-eaa4bbafb5f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f711ad9-3ce8-4edd-8fb6-ce101619a381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23a85c8a-bd32-43c0-a5f0-414cc1505f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd1f568-98f1-4687-bf4d-797ef3fdb393",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e805ab-b909-402c-a685-bbdf9983127b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e792f5a-df06-462a-b8ae-1034605eb5f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8407035c-9b70-4cc6-9446-0e8119debe66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbf032b2-a420-4325-a361-a34b1232eed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0fe3ce-abd3-498c-a1eb-474859a7ae9c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f900a68-4623-49a7-a9e5-e5b2c0bac890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afa243d5-de02-4f45-9d52-809c76d06d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cdf9390-85d5-4128-a69d-c087c508bee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b968b995-e93c-4d71-9817-ced46a3578b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16db4d52-d7a3-4fdf-b180-f0e3fbd632c6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81cf62aa-f5e6-4f1e-b1e1-fec4e9f70218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fae5bf5-81bd-43e0-a58d-5a6f9db9a29f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cfd0cdf-e39c-419e-b418-57022c8723ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1a2eb30-1cc0-4e2c-931a-9796e4c97267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c234da-ba7c-42e2-952e-c863a6281086",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33592426-9e28-4115-b5bf-28973cceb55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f904db70-b280-47f0-b96b-2b4ea620630b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f34c18-a59d-4c11-bf1d-19aad6eec114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc1720e5-9013-4062-a00e-f66028e14a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f6f9ae-3392-4bf4-a4a6-0ba04c85c38c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f541df05-8882-4dcb-ac03-4ed3f9dad45a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38234417-9e25-4bdd-a7f7-7efbbb015ee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d49451a-2220-41ff-8a68-ce15a46c4a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "233e570e-8d3b-4884-825e-7afe5e5c47ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f94d5eb-5139-4e38-b8d7-66a484735ffb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe18a5fc-5701-471a-b7f9-8b3aa2e9c160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "990eda28-991a-40f4-832b-b55e23d9ceb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf7f633-404b-43eb-b4dc-1646f0cbe89c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9617965d-207d-43b6-b4cb-1fba61c41be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9ed6c4-30a2-4c64-b349-3a0c7c5d2424",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefb85ec-e398-4086-ba0c-c00bf6360c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae0f6dee-e486-4e2a-bc1f-3ab9b9fcbda2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d1f23b-7292-47e4-b773-c212ed795767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a7b9547-4da1-47fc-a254-83feda71d1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18313d53-9063-48b3-90f9-4138adbcadd7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a12fce-b926-47a2-b205-6fcfb73927c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8f3948-d4fb-44cf-b518-3fe29d45158c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584a1828-b9c8-433e-b3e1-9f1f0edff00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "997e7799-7146-4625-9fd8-08d892a3803b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1680d8ae-a03f-493a-8190-1003fa06460c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3e4c5d-d748-4506-895b-8ae86b3762c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1250d41b-387b-41fa-b6db-5e2341c8bcf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72aad16-2235-4bdd-aa75-9bff73b11aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13101ff0-e26f-4ce0-be25-ece4a067e26e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ef5b65-d822-46b9-a2fd-0d56ad58d7b1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "518322d4-2998-4f72-9f93-a9c9a3bb9a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "782bbe2c-c28f-4273-9a50-66d06736d5c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17dc81b-9ea7-44e1-bb1a-2d64609e448b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2843bf80-1c13-44eb-ae0a-292c0d9400e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c522744-2a30-44af-9ec2-53288474e2d3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be35920-fc8f-493c-9cec-361ef1fc3c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e1213a7-f4fd-44d2-9d8e-a1abe04bd30f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629e62b5-cb24-4b02-860e-48fda1306dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37427f2a-d005-488e-8d57-f10157d40c9e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "80f98a2c-79a5-44a2-9240-ad06b3d0f6d9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "37b829ce-ae8f-4843-8dac-ee9b1684737c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a76d39-3240-4438-8f89-19cf6ff357ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee951d05-6fc6-418f-8aa3-58ac060cd70b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c19c405-65c8-4141-b010-6e5d04e4fcd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4349d212-bc34-4f8f-b32f-93e7d2b8c9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b415ed-256a-46ce-8aa9-20d7872dfcb0",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb347323-8097-4939-a6d6-29b7f80512e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "86476e7d-c628-47c3-9d5e-015fd6fc954d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae67a79-1e82-4885-aa2a-49f17c44361a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d9db7ed-1514-49e5-a85f-6adb220f7d2a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e886f721-60b9-45e0-90ed-d7c811c4010d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb597519-5b47-4195-9ae4-8ddd44ff6f79"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5316bb7-76fe-40a4-93b9-e4bbccd3f645",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0daa7e72-f73d-414f-964c-b419acbcd6bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b21109e9-d7e5-4b75-987f-d45fe84093a6",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eae0382f-3a48-4ef0-98df-3732ec0c4f28"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe9274c3-2331-4ea6-b9e1-9c3914f43b58",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7adf613a-488a-4c72-b484-863d2a18be60"
            }
          }
        ]
      },
      {
        "id": "4bdefa68-d4fa-43be-8e6e-3b1657697a1f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7001a0e4-a5a2-4ec3-887f-d7f4c69394db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "710b391f-8a4f-4b98-b3f2-339da0cdc940",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "29d94ee3-3d6b-4d9a-b7c8-f195c76c10ab",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9c9995-6bd3-4d21-9387-50a90ed094c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3045a2a-64ce-4760-a7d3-c089fcbfceeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5f4b01-6923-4b3f-bccd-a1e22d7f92c0",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b564b160-6502-44b2-af15-fbd62d978d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db84ee4-667f-4032-9ee0-e86376e00fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aecdd8d9-5fb5-4459-a741-846039bd523e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5990a8a6-4676-4d1a-a3dd-a84260cdf55d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab48abd-7a1f-40c1-bd16-eb119025f752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25dde7be-7423-4471-8ce5-cffdebbddeba",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aedd2540-3ea4-4677-b58a-4cae8f4a2bb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ae8b80-ab2a-4b0e-b557-7a0efc41c178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f76ae1e6-7233-430b-a6c9-bbb98fe0880a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e70fa3b-8cd2-4aee-9df4-c516bb08954a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b052fe-898b-4c53-b427-54b16066758a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef395c5b-0873-4585-8e57-27ec712c22e4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4f9831-b2e0-44b1-acb3-a3deb1936f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb7b520-ecfc-4883-af07-f6deeee5bdf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee14755c-4709-4809-8612-d85f81e3eafd",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feebf5bf-4fd9-4166-b99a-7f59a1958036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acfaf89a-157b-42aa-a392-f0f703bdd86c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9e1880-357b-409a-a13e-0e164d6b8d51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "332362cf-5853-4355-ad03-f5079268ecd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7baeafb1-9428-4526-85fa-0801d742431d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2195a7-96f6-4351-8535-52adc922d94d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a7258ca-fd3b-451b-8cc6-cdf5b0c5715e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17a1e3a-9e5d-4226-b46c-5ecc37ce86b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70701115-bef3-4bb3-b20b-60d10926805b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67fccc55-747d-4233-b50e-0fedf91a3e2e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d37e6c2-0e88-40f2-b132-99bc5c20c885",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c083741b-b49d-4ea9-9510-b1e9053ded93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6f0527-d894-424b-9ed1-faa63e02b09f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63acb42-96e0-408a-ab58-2f3c4fa27be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0157bc18-99f6-4308-8a81-ba1a71b321ab",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9141e893-be76-4842-a6b6-c881b66880da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3957553-1f0d-4ebd-9a40-a730214081a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8511a8-5f25-47a8-9574-46fb921b590e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11eeeef3-3ff2-4702-a181-3531d131d7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed3ad7e-1189-426b-94e3-5e7ff0ef468d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c5a256-0293-4a9e-9a11-9b53177653fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef733bbd-7b80-4202-9e45-47a7308884ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e2949b-b400-4702-a08c-a212110df004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b658961-647c-4520-8a93-f9517dd090e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5726ce-c48d-461b-924f-0b9c6f88dd2f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "863cb5aa-5b0f-4468-b5c3-6d84977bed65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf5d411d-493f-48ee-a0c2-68d3008706be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced64840-5d78-4f08-8393-7726eb45e1af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f83059-a637-4414-8e08-0000d353d6fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92629f72-c281-4245-b91c-d18c20c7f1e4",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236fa3e6-2317-443b-8c59-b2a3752ee1d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "046f3f95-9bc2-4363-89a3-87199b4cfed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c386ab73-13a9-44ef-9466-2337b2877b49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c658e3f6-1b08-42e6-aba5-1ff577621c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a91110-ffe9-4bc2-aaaa-bcfd12378f1f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02b004e-9253-4b7e-925a-8587364be03e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d00835a4-34c8-43d0-a717-4a2a239a43c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a8db5f-2ed8-432f-b822-95c614292736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2a5329d-48c6-446a-b316-2691c4a9538f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19442423-da50-4635-9dd5-713f6a8ec2ea",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546360a3-bad2-435f-aafb-305350b89cb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85e0f895-1750-4ecb-8027-5345793a1f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3059dc-95d3-4855-bb0b-1686ed0b7644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e84633-97ad-40b7-83dd-31d322136e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f214ddc5-8102-4dde-93f9-e4b35bf00c27",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0fa4f4-b7d8-4a9d-823e-881d52b4e43b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3e937eb-1e5c-41c3-bf91-3d4ceb364d1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae459d4-ab4d-4805-a7dc-e5050561de51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c81cd1-f8b5-4323-8ac7-e5e27dbb14a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f42cd7-6abe-4f2a-aca2-66176eac7033",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8c5de8-739f-4d13-9506-217eefbc1483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a322eb7-9b3a-461f-864b-0547bfb2cd84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f2d09c-57d8-4a4b-ad83-454f25bbef5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "609e1fff-2a59-438a-80b8-a0a23ab75fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355ed0e5-41cf-4611-bc70-ef1a7218502f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985ee7df-5efe-4305-82a4-f3eb0095a925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf5962d8-ee68-48fe-9b86-0d339ad9cbb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87291151-74d0-4c56-8a7a-a5956512c133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c977aa1f-2cd3-4355-ad24-5c3225ffaf5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a51291-4c72-43a3-b5d0-069b24488974",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b0a230-97f7-4b0e-86b1-4a196fd7fd7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d99aba26-0174-48b1-85b3-424fe5844708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4431a353-5469-43ce-b851-da1ab61ed2eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a8e4e6a-3815-49df-ad8d-3026c573e4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08175848-5330-4673-97a8-bd43091e44c5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962b7ef2-bdd1-49b4-bbfa-12b03589a724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a65222-062e-4bdf-ae0b-f25c348bcfad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e34b4f-ed04-45bb-b73e-da66500d1ae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0361c042-5fe2-4574-a858-b982d94ae610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd43a867-7dc5-43a6-b694-f292a05ddbff",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc82fa0-71fe-4849-88ad-fc7ec77d8c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e01b89-0c7d-4f35-9556-13ddb531362e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "492b3b75-0fcf-46dd-80c4-bac2f387fae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ad36790-6575-4885-871d-ea729fe06119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ff9421-d555-47e4-8b59-af645423b512",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b321b53-4c8b-49c1-8c2e-fec5c2b2fb82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "497d88b8-d9b5-4d74-9b7f-076f27c136f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a6f402-ebec-4ca0-be9a-27b76929f80b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fddf5e0-5092-4f04-84b4-9818217726c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5184352-8d71-47cc-b476-b7cba5c45494",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c085585f-f44c-46e9-84fd-ddb88050aa16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce347bf7-48b8-47b7-9d32-52efa580a938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae06d4e-004d-4650-bb12-4c20c3522728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7085021-9784-40f3-8050-94f636abcb27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58cadfd4-724e-439b-ade1-180dc53e3d26",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef618244-1515-40b2-bb34-2a70d59ebaed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b56fe37-f715-4789-afae-4652c1433774"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fff660a-7680-42b9-ab7a-96d84f5a6cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d00e5127-332b-442f-8405-e72d684a2867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5290c253-944b-4a4b-96c8-2498e4318428",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8358ea-3f7d-4621-9dc5-1f78e0f77768",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f3688d4-9f7e-49f7-b37a-a408980aa7b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f031cb-a9c4-49ad-af34-33202e369320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee8fd72-2677-4fe4-866c-e76199ae5342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09cfa846-0691-4044-a0b7-6cf0f81e6d86",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb9d182-8caa-4f54-86ed-b6df4e2a9b89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67501727-784d-4065-8c31-e84e2bb81ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eaa86ae-4b27-4c03-9888-a8f0870a4ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a5437dc-33f3-498b-a883-deb9a3e4cf9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1e38be-ee67-43c4-a406-6cbfee774a84",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21a8d05-50e6-44a4-8935-022dc393976d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b81a6e2-39e7-49b5-9ff7-6c39136211b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2460ffd-6851-4aa8-823b-a64f8ce91e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f34ed49-0bdb-4f3b-a49f-7f8ea8b5d7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f14a93-77e5-47f6-ac7a-8283164559c9",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d5c90d-85fc-4804-8cee-e818e4941dd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "805034d3-bff2-4460-a579-ef90cdeb3c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c392ed-dcf9-425c-b043-f525b0af8994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82d4b19c-123e-4b2f-8dbd-d61ac1949e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5fa00d-6b7c-49fe-99b6-b40e5afb0df7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7554747a-b8d4-4c85-88ff-daa570f02071",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b05aa7f-257f-40de-b716-bc84cf2f727a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb3a6ca-c997-4a78-82c8-182f8164bd33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d33756a-0c2c-48f0-a960-11edd5883c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70eea3bd-9ac6-4a76-9dab-4ade092371ad",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c210ce-cd4b-4228-b5f9-b005e75a0add",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebe957ac-75b2-4841-b2d8-8cc18ba93e76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6ded18-69df-4e74-8925-50e96ad04a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "103faea8-48cc-453e-9a52-68bb1e329e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a508a652-a311-443b-b593-d4b4d363ac6b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d06e3d2-c5a7-4392-b833-ccee57a17178",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "451d7c95-aa39-40e8-b283-c83912b24bc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd8c5d6-bc83-47bf-9416-880be29db705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e334fbc9-932c-4365-984c-4e133f943acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1274c3b-c352-46e0-aba9-a6f6e3cc0360",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5583ccd-90ef-4552-bfa6-2762f2c62de1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3ab1fca-2f55-4805-98dc-aaf857b95901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72fbe88-4c3f-46a3-ad82-a29d532fa810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fdd24b3-0b1c-4f86-83a4-b52353ca61f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a0b56a-f025-4c82-87da-efa63984434c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b8ab27-a883-4cdd-b6fa-4562078c5f5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bbafaf5-ad49-432d-952d-4e74698767aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e61bc1e-bb45-44ab-a625-aaa8ceef1589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "944186d5-50f9-4c51-bcb9-d285ff7e3b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a91f622-27fa-423c-aea1-099c0a494060",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68388191-d180-4f70-9953-21afd55a8b5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab471dd2-44fd-437e-be3b-464f85421205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0708354-2947-4d3a-a5b2-04c7d690c2b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5bd65eb-762b-49bf-aa60-a857ebb07c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e34f5a1-4a75-472a-8129-a97e0c6005f2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bfe5b3-cd8e-4786-b51e-95e21688da94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55622ac2-e03f-4154-b864-5691b59add29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1ffcfa-35c1-4a2e-a9a3-6439cfa4d68b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d14951da-bb09-4011-bc86-8bee206d8ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d16b598-0fb2-4474-a70d-54b1d8e45ab9",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100e2147-2435-494b-b9d0-883d4e614a18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5a34bbb-00bc-46cf-9a64-6c87171f3443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e8a1bf-163a-455a-b55b-388ff4019dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f2e4d9-17aa-4228-b288-23a45b454fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6e6b25f-93ce-4668-be7d-eda8a8012545",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa3e86b-70f3-4976-a657-885a3845c8d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a55d6cb-7ffe-4137-92e0-c4dc7e7c1356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db754fcc-d095-4b52-9d17-977bb8376743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7f8a13-1ef1-414a-9bac-7b2a52755ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5adcc4-7af5-45b4-b366-7926eaa68580",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75a0c7ba-458b-4cec-bb96-4b1b1b96c7f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db44c3c0-da21-4ecd-9381-e1420004869d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05341a50-d307-4946-b0ce-34192cfe4942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de6fd5c4-757c-4ba6-9a09-c70cfd746bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffc00a6-2401-48b4-ba31-f2954fe2090a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79277c3c-3b4c-4333-92f3-472a01545c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54470720-7577-4b92-a457-d078925860b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5c09d6-8f2c-4177-904a-d012362e73cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6bebbdf-9342-4f7c-aabb-a82dcb7084b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49504696-1dc5-4b38-ac9d-7272aca89e5d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b01712f-4add-4c85-999f-7e02bf5d230b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a6a025-b53f-489b-8830-c8656a33cb85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "322cab40-6d21-4a63-a3b6-0532232b21fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c7f278-3321-4af6-8e22-722b0313254c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8986491d-e734-420e-8f8f-f7c672f0f61b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0c8e00-482c-4b33-81d2-fd525c4fc44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa28b45a-bd53-4b11-b5bc-62d9bf465155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "555053d2-23af-4f4e-8602-d9c80e70e3be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7901cfe-5b61-4713-a8d6-88b271120136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4140b37b-28bf-4596-8316-71b629d94d57",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d579effd-f603-4521-af9e-23e48f106bfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4281063-ddbb-4e2c-b017-c81f3dea4027"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe86732-665b-421e-8310-e982b5b6e9ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac1a52f0-f367-4559-a6ef-222dbd7c566b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a917553-2ca5-4ed8-87a0-430aab1c03b9",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a95ec9-893e-4f88-b0f3-9e5576495af2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785739b9-7781-40a1-b201-a052cf435882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb92d46d-7bd7-4c2e-8e32-ddddafee5c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80147bbf-4871-4b62-9a72-04357406eaf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c87651-ca90-4c7c-859a-c8aa4055d155",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1712c5d-79cf-4c1f-a15d-27c7038c4cbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b0deb0d-6ffb-4b51-8adb-678c02aa9ee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6af5421-d099-42ea-8a36-d89c27aa47a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d9ee1ad-d648-4602-89b6-8680888ba670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae6890d-b253-4726-a694-fac242da9d20",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3f180f-11a7-4825-84d6-bf72bdfd3910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8fcea1d-32e5-49f5-a8b9-893e10be2f0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c890f2-fe7b-450d-a6dd-e9b243f52bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3216dc1-05a6-49be-8e59-c7437a6c4826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818cbcb5-95ed-429e-91c4-462723c68293",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b3d3f5-500d-4048-9d28-86fd33dd3043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a404e78-e661-4582-87d9-58ff287d85d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d95de3-761c-4037-b81c-36ca3d259ccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "851182f1-1d4f-48dd-9357-0e7f33986c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab7502a-3df8-4ddf-afed-56d30553b9d6",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae00e696-8b9e-4eaa-b28e-58a2339b9c09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "544c95b4-4c34-4031-91d3-8722b0982bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9405aa5b-bbc2-49af-bbd9-18640981b5ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5918130-7f24-4d7b-9add-fd92262d38b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65670469-f7ab-4681-9e8b-93e67b829718",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3de861a-6f87-40ee-887c-6ee14e042736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97085890-9e1e-496b-bd52-7da78a7ec747"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "091af1f6-a5bd-4a78-b91a-c8a79ba86d80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eda78560-6a0f-479a-855c-0ae172d7ee95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b788584-be98-4ef7-9d6c-be45588748d8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608318c4-8b0c-4bdf-8718-512da06304de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c54b31-5ccf-4e32-9453-5690037bba24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "718b7422-d26e-4e8b-84bc-acad764a85b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df094856-aaa6-4116-94ef-5b82c8e47cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75fd125c-094f-41b3-82d3-b3e2858ef8be",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebece0ab-6398-4f7d-929d-a41c03319faf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "855e457b-5a67-49a4-b8e0-d41a98185004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3999c29-3381-44e4-93fd-60daf3dbdaaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9420f271-169f-41aa-8e03-1da33e467f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd5e949-fd38-46eb-8327-3e8b186a1f14",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee9205a-80a7-463e-9d37-ab651918f5f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4058c1-596b-47f0-b81f-cdaae837d996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce6191f-2f50-4dbc-8f00-a9d30554cae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f886fbc-46fe-4f71-bafa-8c09b3f1d9ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4177f32d-fc9c-4168-834c-44b75c97695a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f5fba3-6803-4871-b028-0a47e4713d33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b77a20-f9fc-4255-8da2-27cd75f24476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "177f4355-922e-4767-8800-23f8ab51843a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c59e7db5-d8f3-4baf-b31c-49e33510ceb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aafdfea-733f-47f9-847d-9e0d05ad5647",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f841c6-3bdc-4d1a-8cbb-1877dc5e5884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf153c8-dfd7-4214-b55b-3d590c251bce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d77713-01de-45a6-81e3-011aa824772a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d73b24a-0e4c-430e-a657-e8309b9bb006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae40a54e-5db5-4b78-b655-9572204957c0",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240c00aa-4c81-46da-85af-1036d735fbb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f383ed62-dcd1-4e4d-aadc-1a9c981bda24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a7f394-529a-490d-b7fd-e74961c95584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a44e61b-30cf-4cbe-9e42-c924c0204b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcafcbd6-d7e3-441c-9672-4522d9a6ab13",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff4bf3d-fa07-45cc-9ffe-ada8efd83475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ebd1dc1-9cb9-473e-9d3a-a21333c8274a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "314e1bd0-f09a-4f03-a363-eac8daa90298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77604d06-4c45-48a7-b259-382238594dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7108e640-8b87-4f88-957f-3493e6200214",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88fe8a3-0528-4ee7-a70a-c47763e00dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b641be-dbb5-45b3-8112-87f472a0350d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4ab95b-2323-4d67-b2eb-821f84bb91cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee0d4e46-51fb-425d-a182-4e7d097a5f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca76171-1069-4220-9a7a-6ba5970494ba",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56bcecb1-4f81-416e-8d15-ed93c148b08b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "282175b3-6831-4776-a91c-fa20c22a1ff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8350ec0-e118-4bc4-a405-f19a8c3d449a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8350279-9e70-4a20-a212-1d1a3d15e221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30dbd713-9ce9-4757-ae65-ced665a83a0d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9cff2ec-1f12-42b5-a3cf-6e93a5c47c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af98d88-fdda-41de-bb22-6dd748d9ff87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd03c13c-64c5-476f-a428-3c2f7f39b2ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f87759ff-a830-4631-9b85-4a67fac41fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75a4be0-483f-4a25-bbe2-456ce2f6f60e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1043ae04-0233-4d82-b9bb-33fd706a7986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aa9d6b5-4628-4eba-8921-398f2eccc9e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "407fa67f-61ef-438d-91ee-b6339b443b41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adbed1c3-7e05-43e7-8808-151abdfcba7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b0fc54-c968-43ed-b940-1fb7a1acaa98",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479fdb87-ac8a-4640-b386-98052f837e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25291223-92d4-4616-b897-dffa7ceab135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b4e8ba-48d0-42d5-9927-bf6302e5e76b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c0f5500-e0a0-4957-96eb-fcb086271b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fee16ad-252f-48ec-8166-d56e24505287",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f333f5ab-099d-4d0f-ba3a-11c1aaacd7db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ef6794b-2533-4539-9033-e643f3166b79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fcf149-b865-44a0-b9c5-6cb8f8d565cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ce24851-f45c-421b-9c7e-7d4b6c25f9ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8107b25-650a-48b0-a69a-457de46a00e8",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f77f88-f1a5-442b-8591-a0f85bd54ccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d10354ae-f0d1-4377-a48b-8444fa1aeb35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "684d777d-e632-469b-9690-6707b15106a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b41fa03-3567-4b0e-8e31-df77a71f488c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4da73a-ca11-49be-9797-fa1e06ca7d80",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60fc57d1-d4af-43e6-a0dc-8cf5270542b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "653e5c36-b202-4200-ad25-d6c7528d03cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6447b24-a8f3-4aa3-bfa9-020806e08dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6acc2403-62b7-44e5-877e-995731cc3606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35305630-06f6-4344-8879-ab73abca0759",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5355c413-8a44-4012-9919-b041f3d9ca1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00d3608d-36fb-4bfe-be5b-e1ae207bb338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd61c99-8dcb-48d9-bf9f-8bca05213da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee1f87a-e91e-47ea-b679-96c2b9c65fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14564a77-f8d7-44de-b3b0-cc21424c056c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0e7b83-e7eb-4b00-8564-f0f3f3f781ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73071c22-b640-472e-ae07-eff4798ae01a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcba89b6-fb04-4f46-99d0-c0ae3e676794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dd42eb4-361a-4aae-a9d9-44534662c0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2fe77f-f87f-4f52-8ae4-5b803583286b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b583a6ab-e4f3-4a17-b8ab-9ba94f6913a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bd639b7-5209-4593-840c-eb1478f8d606"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1f2c15-5564-43d6-bbc9-94a635e84426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1819f6ad-63b6-4042-ba57-f6f534ce61bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a200a861-3dbb-4595-a17d-684796d1365a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab44696-b0e2-4900-ba45-15260db28f76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "789b58dc-11d5-4b99-993f-1a2b4c23ebb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fdeb730-c023-4613-abfb-c2fb8ec7318c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59704c6a-9ec1-4746-89ab-96e209fb3f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34eff47-6bb3-4aa0-b8cb-27e2240db3d5",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c25a305-aa9e-4727-821f-203fcdcd0016",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98001473-583e-41df-8183-08f3b81c7f94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6ce3a8-bf68-4896-9aca-2c75d18eb866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7e1143e-b90e-4d0c-b93f-7a031f9a7935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94257b0a-8e77-479d-bbd1-d0ec13539c0f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163e7565-d8c5-484d-aec9-af7b7b88525f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e197515f-1d5b-4885-8013-2d8ffcb3f345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "619d53a8-9e64-4816-83d3-d1665107eba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb4064e-8410-48b8-b0f9-cb43f3c2075f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d490b2-22ed-4d59-bd16-05d843a7e143",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e6c699-1463-4e7b-b33e-2286d0a24f85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6afe40ba-c324-4afa-a3f6-cf1441cebad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f9afa4-7890-439e-8237-e4735edc4233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f887f47b-f578-43fd-a3f6-6f4521bddb0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243ce00a-4237-4c7b-a988-56690b9c74b1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3c73e0-b088-469f-8cb7-a08800cbc72c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a4681e9-be93-42a9-a739-f226c8f25952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7504351-bf47-46c7-952a-449c98aca9e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a45a749-7c62-40a9-b123-8838881de21a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e174b0ad-a323-4809-8ac2-701c43f01a5c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c50f215-90c8-4024-b63f-e6843d7ad422",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b9a337f-6043-43ce-9d48-0afaedbeec43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2212aae-ab64-489a-8ec2-5573cf282469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6daa3bb5-baac-49c1-ad99-55f42f202154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ee75bd-0fdd-4c46-9c6e-d0d17b507043",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c418e0a-2d24-4e01-b914-b97c10b44da0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e4aaf4a-f883-46ba-950d-31431164c15b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0435e4c-993b-4415-b02a-57570edb6c14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02125928-55a7-4eeb-bbb6-d11d98c452b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68adce77-b3cb-4b4d-b7a6-cc0d1e49b040",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1919eb2-31ed-4762-af99-014cb7b4399b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "745713e5-af8f-44b1-9871-92cb497e572e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a59c14c-47e1-4d37-b847-f51e5287fa69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "191cae91-0b9f-4c40-9152-fdf23b4db5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912a22d4-0b18-4a34-bec0-74ffca446198",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cde8005-2b0c-4834-b944-df0ea7bff022",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53d4cdbd-6742-4b35-a6a1-e45df3c4b1c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "171ec406-5644-4f9f-adfa-22724a9dd59b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fb219f6-511e-4468-9cbb-c9cb95f9e21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45696519-03f6-4f58-9b7f-14aa133ac24e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433ddd86-ec90-4731-ba84-8b396ca01841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4e6ac16-c8bb-49c1-83e7-a80a32b4ee76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "669630ef-9601-4c19-9af7-c743f915dc6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ee6f11f-ba55-4e41-ad08-1c836fbe19e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304579be-0d23-4d06-9d43-25125a9a6f31",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0632cf-9f37-4033-88f2-359115edd8b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53e9410d-57a8-4115-be57-e54b7c3f4b25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21800d0c-c140-4173-96a1-282769b4684d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa107db-91fe-45f1-999d-e45ef2f5e679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8d919b-603d-41c1-b265-89faffda2c1f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91cc3059-da2c-4688-884f-6cd2dc339618",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39115d6a-39e2-42c6-8f72-248c363987c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e9bee7-5931-4025-8420-919a80207263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12aa74db-f780-4a6d-abb6-21b5ca7e0127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec76cda5-b817-43aa-ae82-f8e24371e16f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc11ea11-8138-4dbf-823b-231d6e28d99a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f99abf24-2ff6-4d58-a8a9-7a8057f2a00d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "012c6957-d878-4e02-94c3-d42443b3dbbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7125d75-640f-4a58-ac96-878373859779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc5d17f-f3da-469b-bb59-799a9d178c37",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00abca8c-0b7c-4dea-bddf-d74fcc11919f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f467a11-f6b4-46c0-b8e6-ba10bb690aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9e8403-59e4-4da9-864f-bfdb392c1b89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "498d863f-c996-41cd-bcce-deb2d6849e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d7a25b5-c54e-4a77-87d5-521d7b459418",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6826a105-18b4-41e0-9e72-dbdf88ee7d63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6d97c4c-d4d7-49dc-b987-85de55656ab4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "697ffa19-b990-4674-ba9b-be4c9502dddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da0f715-c23a-40b7-a6d2-6cc03f49d6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc4efc5-7720-4d0d-8f4f-bf2a69d95c3d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d98c7c07-6322-4585-8753-376a644539ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bc49207-889f-4b28-af94-278b959fcba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2cb040-1ead-4d5f-bbb9-662166dcf6e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d683782-3fdc-4251-a017-6305ee42a557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d05ac44-94f2-4c12-b68a-124f1df9d486",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d75b1f-8517-4486-991e-06cbe8ae80c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83dd2d5d-9e23-416d-800c-5b160fea3014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae37e8b-b369-4ee1-96e9-2f76b436213b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a1571c-b27f-4a5c-8a12-f965f1dd9961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ac1e0f-9b63-4a72-ae91-332cc7df4534",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc23dea3-99d2-4f67-b92b-383c0bf2ba64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b9ffd64-89a3-4827-bb4c-1ddd382e3734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb23fe81-f531-4fca-8a67-1724a60f2924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdeb0e1e-0df4-4cd4-b521-6d69b0943497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86dc4c0f-5959-4ee8-812f-3a07c1c410fa",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9eeedb3-fe33-4241-a6da-f2028d494913",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d797274-ba90-4aac-8b84-e477e35fe400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4942c7f4-adf6-435e-aca0-e413a9acab6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24b04a8-a1b8-4f5f-a02d-5a1ad4801c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9ef5d2-be16-456c-85e0-6f2476b639e3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4328e87e-1a32-4416-9a52-bd1463d0cd76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9393e0a3-9b5b-41fe-803d-fd12e6d07769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9743cd-d7b1-42fb-b6ff-9ab25888c9f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b94284a9-140e-49aa-ae11-eab52e728f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d9945d-d2bd-4a75-85c5-7b834dba40f8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23b57c3-6528-46ef-a9a2-aaa5641a891f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c88117f-0b73-4fd4-a9bd-969e9d58ad88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ace1472-84e2-4e31-8fd9-a4714de2696b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9fb0fa8-7a5d-4065-bebd-4a59c9112c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce47f46d-83d1-4562-98f5-e1de9d50f6e2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1a1386-a250-434b-80e5-c7d8d6eaadf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b468361-1489-4a52-bbf5-15d406c7845e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf42aca-57a2-4102-a84a-bc9b7eb9c934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eca1427-57aa-4692-83eb-b83d1db3f793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874b6687-ad46-4c9b-b320-3b07c7aeb9d9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a048e64e-e4f6-44ac-a0e7-75ae271e38ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08b15a0b-8b5c-413a-9a04-8ca861f70e9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2148e29-0e92-47f9-a3db-8cb93e26bb11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "710597a7-0e4f-49ab-bad9-f21b9dc82f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356e6840-daf8-476c-99ef-6a11bb2633df",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a340dae-ec33-4531-bad1-0cd7172528f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a68e69a-1a32-480f-891b-f25dd8f31a8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b5fda2-62ad-4ce9-a6b6-cb4ee4478e49",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12547141-ca0c-44cd-bf8d-63c43ec70201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673fad97-776b-4f8d-93b3-7b46e04e3ea6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5d3ee2-ad54-4246-9401-dbd7f188e3b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56542cfd-40e3-4e99-914a-e9d98a43ac35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fcc6fe2-e405-4bd6-aa4f-f144d5b65355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04414da5-8b6d-4a26-8906-90dc4791b685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "209ec043-1b21-4fda-bac5-c4f5595305fe",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585339e6-5801-4ab7-b320-17dcc54d16e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac5305d9-847e-4661-b0d0-01c83395eaa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d11676-0f63-4e2e-82ca-f6e403ea783d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a99bed-3b46-43b3-98b2-dbf3c162513b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39cde3e9-9fbb-4c65-8192-1281445c1e31",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc1e55c3-a9c7-4bb9-894a-345104005eeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "add565fa-7121-4dbe-844a-a3f87ebf4075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc5a9ac-5e62-4682-8321-edbee4b5bddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69b29c38-0bb8-4fe8-a18a-79d425f816f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cae7c1d-15a8-4437-b21e-1498b2a8587f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcdd2ace-766c-44c1-8b7b-39dfa27978a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83ff6b54-5c58-4ced-8449-a8ff648b9c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6655ac5-ed1e-48e4-8190-ae910046f7cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13cfb385-140d-43a9-8998-a096e9b20b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018435bd-d63a-477b-9fcd-d3d9bb50b889",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6852e37e-b350-4727-9ccd-dbfea3d89eea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ececfbf8-c5ce-483f-bb2b-833276be15b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e6ce84-9c9d-4b66-8460-507cbe527716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf4cd4dc-7fa5-4690-9977-d0a396c15af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2e56c6-bb9c-4e54-ac7e-0385d151029d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a27671b-0fd7-4d62-a060-811765630bb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e52966ae-dcd7-421f-9215-073231012ac0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63725d8-ff1a-401b-bbc5-64dfe4f65a46",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e916f20-4014-4f7e-a8f6-77f719142969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a6522e-f60d-41b7-82b0-727a3d173039",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa9f741-19bc-4f32-9905-e92d1afc04bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f617957-ffaa-437a-90bd-2359151a7fbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ef9d48-5874-4bb9-8de5-f517fba4ba6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75ab52a0-5851-4e32-881b-0ef700827a01"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49c86fa3-f261-4201-b802-e246ae9b0088",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f38b43c9-bbc0-47ab-83dc-b4754bbb9c16"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "48f83a15-4f24-403c-98e9-7b06f10ad761",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f814090-20de-437e-b98d-6aa934085386"
                    }
                  }
                ]
              },
              {
                "id": "174f3a9a-dff0-4b9b-b950-cdf8f9684ab2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "23d66e41-69cd-4151-b136-e9ad2097dbec",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1075b78-48ba-4691-9d51-89ec506e4d76",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "29ffadaf-5a85-4c7c-93ca-ef94cffe937d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec6d2bb-a6a4-4d9d-8bfb-fe7957058fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b60283d-4624-4f93-b212-0027fc85550b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5dc376-7947-4cea-819b-a6d4d91e824b",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65a5c19-dfc1-4c77-a19c-8393c0e42e39",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1c9923e1-56be-453f-b5d8-dbaa43103736"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda71144-bc4d-45cf-84f9-f618cb656720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa545dde-0596-4466-85cd-ff0ce45f529f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a126539-6911-4017-a7ec-a3b2d7d33637",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5b51546-4dfa-4242-a779-a366576c11e4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7a0fe94-1ffb-40d6-b85a-8ab34a0aedc3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae3827b2-db76-4f0a-9a55-9e51fd7c6bdc"
                    }
                  }
                ]
              },
              {
                "id": "3e14b65b-6356-4391-bbf0-3b45d72d0b04",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6b908745-7fc3-4baa-aefd-1c61b41f10d3",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43f93c2-2258-4cbd-9ff8-80805012b25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7bbcbd30-216e-43c6-8890-d400346f30a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1893723-2d0e-4896-a658-8b152706f3af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc14baf5-b3ee-4b8b-9aee-83ebdd5c44e8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ef490028-b0dd-4c7a-82c7-5d6f9a93f217",
            "name": "Positive Testing",
            "item": [
              {
                "id": "21a13fc1-f850-4d9b-addb-46ee17a3657b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da8d7f59-f3ea-41a0-b9ef-030ab4b3a36a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "56966611-c637-483d-bd01-16583d7aed17"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c59917bb-32a8-40f1-8e75-34924a6a0d7d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "09889ca6-1f49-4e82-ae96-42a2f76b0aaf"
                    }
                  }
                ]
              },
              {
                "id": "2ca13a70-4977-4911-92aa-a29f6fd3c30b",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b5abf77-7814-4b2c-b191-2a722176b084",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "886c3676-c306-4bfe-a3be-a1ab04022e4e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4445330e-4619-47f3-aae3-82fa44e06c83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f74c5f0c-19db-4e7c-8f51-800c6fe18874"
                    }
                  }
                ]
              },
              {
                "id": "c1eb5502-d828-4310-b923-7fe2b9a08655",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "63b39887-4e18-413f-8ca3-47b0d64852c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "42e0cb6d-476b-4352-93f4-f6530da27024"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6362de2b-a55a-4057-9498-ad3ec47a89ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "744f0232-89e4-4ab2-956e-1ba157f68c78"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d94b0111-69b2-4836-a9c1-1cb4f5f64c3b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1542bf7a-66c0-4c1c-93c1-416709861d64"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8a01d0b-88f6-41bf-b968-02d66e598752",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f9ec75b1-b151-4bfc-8867-e00e28a7a0ef"
            }
          }
        ]
      },
      {
        "id": "ebe75b64-9bee-4ace-bdf3-6c09ff7cc02e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5f83bf87-5b75-41b7-9c5a-dc5c31f007ad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f14c0875-2c3d-4c78-a227-3c533c6ea4a3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "55b53493-ca1e-4347-b59a-d3ac7b79aba5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548a2f29-d8ab-4e96-91d0-ebf90ca699ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "35907688-4813-4620-9dcc-5ebfc81f1fd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e0c16c-b747-4587-a4dd-e9712a0992d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f5c6b29-22bb-43b1-abd5-13ab30577038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9518d596-d5a4-41b3-8f69-0215781b0f2c",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0cbe6c-75a1-461b-bb37-404d0ef3d603",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e8c6ca3e-d826-4736-ae2f-f71aac63c872"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a3297c-2dc6-4496-82e1-80f85f2fb686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65dae194-770a-41db-9f67-bd7e0c0f2db2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0f6724a-0b3f-4033-8472-62d6ad8babae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e42e867-c503-4930-acdb-200440792c64"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e080ec3-efa0-4388-a46d-0c8de3c1be51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aad2869b-af65-4a2a-a8fa-7d7bd2e43d06"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4dc6148-e401-411e-9d1b-08f239ad409d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ae68a5af-f247-45a2-8916-bd3d91c6db26"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "29834459-fc58-4cb8-bcbd-87f36e9bcd1a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1cd240d2-4dc8-47b3-ab98-49c90edc2509"
            }
          }
        ]
      },
      {
        "id": "c1827e1a-3eb9-4936-9685-6f1ebea19601",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "817f6028-1c84-402d-8126-37d044dd87b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8b7b0bc5-51fc-4c63-b01b-a2165906543a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "af6c9686-afcb-4e80-8347-e036ec9e2051",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34ff0f7-7394-40fb-a724-663a0e5dc1ab",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cef68bf2-0f06-465f-9b84-7e7c41f13a91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04072cea-c239-492f-b6ef-cf0bf30422ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3479edb7-ed10-4130-8434-dafdffb7f0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7513848e-9fa2-41e4-8f8f-32da62150a51",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b5ebe5-f44b-43e1-bf43-9db1b8aac3cf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b6c5b8f9-246b-45ae-b879-8604d2c0ec48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "821c28a0-a711-4d3e-b029-257f0ca8d655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94bd402d-dcd4-41fa-ab63-06b5de017a13"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "094ca84b-a472-4c7a-b63c-4c8678bd40c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f5cee90-5f96-41f9-a2cb-b58026558fc2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "16f0b488-2998-4d21-94ed-bcd4767eb254",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dfaa2ee2-9ab9-4f98-a4fa-174d825c58ca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7431604-a9e6-430e-aa9f-75015388ee85",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "12460856-a792-4e89-8117-62c11604c413"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd559339-249c-4e24-ab69-99bf40aa56e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a04e9ac1-ca30-4726-b16f-b065588057c9"
            }
          }
        ]
      },
      {
        "id": "01fb96a9-fd77-4808-a8ff-60ae556c78a2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "03b03324-d2c1-487d-bfc9-0fb3953741b5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f100d9eb-0c41-4f56-ac82-c2f09edcb485",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5313bd7-17a4-4672-81bd-73d0775df24a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69128e0e-6ecf-4c46-bb01-64c376a5be5e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d3a0add7-296d-4b9f-b1b7-ce2cc9d896cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44d7204-3641-4c10-a248-a41211102661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13bbf029-4c2c-4c72-99a8-d987d7d362eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87eb64a4-8d62-41f4-a8c4-7932b6f13b12",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d764c53-8a24-4704-bff9-387e1040fa15",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3de48e5c-752b-472a-8674-20fbf0af215a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ede5f95-c935-4ffd-a823-08a9b443595a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "502f7bf0-1721-4006-84b6-070e5697a1a9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78c8380d-e825-441d-92aa-aefa7f3b095b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36a83a9e-3278-452b-8ddc-5c41b5d867f2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8038dec5-5047-4e28-97b7-cb5fce8cd1c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d38aeb41-f6b7-4e47-9960-747781828c71"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43f51b0b-c830-408c-86ed-1f01990665e9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e507d76d-ea7a-4029-a18a-d832589853ad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4cc4d3e-468b-4510-9c5d-268bdfe6d354",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "64f7be31-9689-4912-9eeb-a741431ce2c3"
            }
          }
        ]
      },
      {
        "id": "2618bd5a-d674-4931-90de-983784c6ad52",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c7666b6b-5a5a-4c7c-bc97-553a57540dc1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca1dffa1-6531-484e-a593-944f848553a6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3cb0d7ce-f54b-45bd-a84f-9bf3e54c74e3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b883164-053f-410e-b664-65d17cb4dadf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "86779fbc-00ae-4f1c-920c-2ecc8b53a662",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 462
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 85.16849507168796,
      "responseMin": 10,
      "responseMax": 1059,
      "responseSd": 131.56122326341477,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1670892131989,
      "completed": 1670892164372
    },
    "executions": [
      {
        "id": "b72c506c-5e59-4659-a9f7-b4fbe79bead4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2e68778a-926d-48c1-a76a-1c593a5abed9",
          "httpRequestId": "c2761833-e40e-4e05-b529-e9dbb6f038d4"
        },
        "item": {
          "id": "b72c506c-5e59-4659-a9f7-b4fbe79bead4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2bfe9ff9-ae17-465f-b7b5-00010e3d4ecf",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 0
        }
      },
      {
        "id": "1d0de77b-3111-49c4-bd8a-8416d73fb2f0",
        "cursor": {
          "ref": "c800bddf-e1e9-4382-8ed6-c7bf53910353",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "59b1d268-9808-4aea-aea4-6345f1019228"
        },
        "item": {
          "id": "1d0de77b-3111-49c4-bd8a-8416d73fb2f0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "71af3f5d-bf3d-4faf-b727-8fe320c08930",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "8e542b9b-eb6d-448c-bb8c-debade251bf6",
        "cursor": {
          "ref": "9dca1d12-d906-4e03-b664-24865a18283e",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "67d21268-de68-4ced-8dca-567df4e69028"
        },
        "item": {
          "id": "8e542b9b-eb6d-448c-bb8c-debade251bf6",
          "name": "did_json"
        },
        "response": {
          "id": "9af64e7d-f1cb-48db-a70b-0d6c6c5d78df",
          "status": "OK",
          "code": 200,
          "responseTime": 426,
          "responseSize": 1290
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85c9639-6ed8-4bbb-a058-3bd8008fcf90",
        "cursor": {
          "ref": "443aba65-2141-4f3f-b679-5e04a65d52d2",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a977d358-53b5-4a79-907d-d92e4925cff1"
        },
        "item": {
          "id": "a85c9639-6ed8-4bbb-a058-3bd8008fcf90",
          "name": "did:invalid"
        },
        "response": {
          "id": "094e9c5e-2657-4046-8ec1-835fdea19659",
          "status": "Not Found",
          "code": 404,
          "responseTime": 890,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a85c9639-6ed8-4bbb-a058-3bd8008fcf90",
        "cursor": {
          "ref": "443aba65-2141-4f3f-b679-5e04a65d52d2",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a977d358-53b5-4a79-907d-d92e4925cff1"
        },
        "item": {
          "id": "a85c9639-6ed8-4bbb-a058-3bd8008fcf90",
          "name": "did:invalid"
        },
        "response": {
          "id": "094e9c5e-2657-4046-8ec1-835fdea19659",
          "status": "Not Found",
          "code": 404,
          "responseTime": 890,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "fce313eb-f1be-4889-a393-0e7183eaa720",
        "cursor": {
          "ref": "f3927469-ebe1-4c9a-891c-18ad783095ce",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f4f20098-ba27-4d32-af07-899bd05b879c"
        },
        "item": {
          "id": "fce313eb-f1be-4889-a393-0e7183eaa720",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4f0b93ba-ad6c-4135-8e50-45bbc0385915",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "7ec4aebc-bbf2-4329-848c-05c7147b06db",
        "cursor": {
          "ref": "7f8bc276-78d5-4b2c-9013-b680f951301c",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a9fc15a2-e1b4-42de-a3c6-06b6efccb2b0"
        },
        "item": {
          "id": "7ec4aebc-bbf2-4329-848c-05c7147b06db",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1c1d9a8d-e9d7-460b-bba0-f5c8ea3df66e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "dfa03319-bade-4fd2-9c72-058658374f78",
        "cursor": {
          "ref": "44df9741-8745-485b-86f4-f4079297378a",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f2f4e7cf-1817-4531-a377-7ec747fb24cd"
        },
        "item": {
          "id": "dfa03319-bade-4fd2-9c72-058658374f78",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d0c9dede-259f-4dc1-8c66-059bd241cf56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "7a0e63da-51a5-447b-afef-1eec35733fc4",
        "cursor": {
          "ref": "fd11e3e5-9a38-4de6-b03d-9fb7acba66b6",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f9bf8457-6711-4496-9a90-f2e9da5830cb"
        },
        "item": {
          "id": "7a0e63da-51a5-447b-afef-1eec35733fc4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b8e17c99-064d-4aa0-ad45-1aff3bf8facf",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 1133
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "7a0e63da-51a5-447b-afef-1eec35733fc4",
        "cursor": {
          "ref": "fd11e3e5-9a38-4de6-b03d-9fb7acba66b6",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f9bf8457-6711-4496-9a90-f2e9da5830cb"
        },
        "item": {
          "id": "7a0e63da-51a5-447b-afef-1eec35733fc4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b8e17c99-064d-4aa0-ad45-1aff3bf8facf",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 1133
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a70cb89f-ec17-44be-a984-008d74503f41",
        "cursor": {
          "ref": "4833f71f-a69e-4978-8aa7-c87a25f1f8cb",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c79077df-1441-4d2f-8677-a91c3fdca113"
        },
        "item": {
          "id": "a70cb89f-ec17-44be-a984-008d74503f41",
          "name": "identifiers"
        },
        "response": {
          "id": "e028db62-c86e-4d3c-89a6-1fa9ef15051d",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 1133
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "f59a0214-fe59-45c1-a7bb-6362adb25513",
        "cursor": {
          "ref": "d6a6c301-b538-4f8c-900c-bdde5900e3e4",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "68d41df6-d298-4bdd-9533-61522f001e6c"
        },
        "item": {
          "id": "f59a0214-fe59-45c1-a7bb-6362adb25513",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bdb71dbf-bffc-405f-aeb1-3730f100489a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "f59a0214-fe59-45c1-a7bb-6362adb25513",
        "cursor": {
          "ref": "d6a6c301-b538-4f8c-900c-bdde5900e3e4",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "68d41df6-d298-4bdd-9533-61522f001e6c"
        },
        "item": {
          "id": "f59a0214-fe59-45c1-a7bb-6362adb25513",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bdb71dbf-bffc-405f-aeb1-3730f100489a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "b72c7c0d-f1bf-4611-9978-908a0dcebceb",
        "cursor": {
          "ref": "4c272382-eac7-4393-b94f-84ca2e32c976",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ee79268b-c322-43f8-b062-306c58432612"
        },
        "item": {
          "id": "b72c7c0d-f1bf-4611-9978-908a0dcebceb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a81f0125-0a5e-446b-a820-0c4ed6c3071e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "95e202ae-3288-45fd-8d61-9fca0acfb96b",
        "cursor": {
          "ref": "11d65248-8c04-4982-adeb-0aee0c104776",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "bdc40fcc-2b52-4adb-946f-d70a12a326ae"
        },
        "item": {
          "id": "95e202ae-3288-45fd-8d61-9fca0acfb96b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "07f9cab3-cd29-4d66-8073-47eb277f7d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "e18c9a20-d5f3-4d19-ad6d-bfa1b26dc563",
        "cursor": {
          "ref": "d33ad872-da69-41a9-b6d9-ed852036c9bc",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "898d78b2-9d2a-4f4e-a993-a8a9afbafbd4"
        },
        "item": {
          "id": "e18c9a20-d5f3-4d19-ad6d-bfa1b26dc563",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "884d097a-1821-4577-9a94-0a618e9e5c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "3415f2a6-a662-4de6-baba-f13bd9200d32",
        "cursor": {
          "ref": "b0aa2a69-8192-42b7-ba54-ae3faed760d2",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0ff6fdf7-2796-4c77-81b3-eab9b8a754d2"
        },
        "item": {
          "id": "3415f2a6-a662-4de6-baba-f13bd9200d32",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1e937a1b-e8b4-463e-88f5-b5beed9d3f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "1c8b62e2-eb6c-4b2b-b63c-d90604617093",
        "cursor": {
          "ref": "21dcb8dd-1fe6-4548-b7d7-ecca414f03ae",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2c0daf57-6c81-47d6-9c09-430450e0c9eb"
        },
        "item": {
          "id": "1c8b62e2-eb6c-4b2b-b63c-d90604617093",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "830e8490-52e6-44d3-b741-6ee17840c070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "5b67d363-bcfc-42e5-8967-10cba8802f1a",
        "cursor": {
          "ref": "f2773581-ed9d-48dc-811b-fe6bd9b4b1af",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7a095d0c-f782-4f92-a8ac-b4441ee6b9a1"
        },
        "item": {
          "id": "5b67d363-bcfc-42e5-8967-10cba8802f1a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5f33fda0-35d4-40dc-9fb9-e85bd8e31423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "b822cdff-f2e0-422e-a5cd-c5402d036a69",
        "cursor": {
          "ref": "61f5c47a-c72f-42e1-beb5-b3e7a60e4a2d",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7081d231-0db0-49cc-9903-8c2289095be9"
        },
        "item": {
          "id": "b822cdff-f2e0-422e-a5cd-c5402d036a69",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ed003e2b-9223-4cc7-8119-93943f7ff3ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 227,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "57bb28e9-2ad9-43c4-9494-b9b9583e382f",
        "cursor": {
          "ref": "4e4b3fae-e961-4e40-aa09-c7860d396465",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e081354b-5e3f-4f37-956c-62549643e6f4"
        },
        "item": {
          "id": "57bb28e9-2ad9-43c4-9494-b9b9583e382f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e28604a3-751d-44ab-8bf7-4077557069d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "865b4834-4359-4977-b2bb-2fb9bda6464d",
        "cursor": {
          "ref": "0469f186-78dc-471d-b361-c5464782d880",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5cc1a337-5b09-4b58-b14d-5a75f5dc7ec4"
        },
        "item": {
          "id": "865b4834-4359-4977-b2bb-2fb9bda6464d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b53de290-ee78-4eed-8bab-85a43883143c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "de8d2bf8-1325-4dfd-88d7-5ba144979135",
        "cursor": {
          "ref": "5e1bba4f-f3c5-4a0d-8d3c-a4ed003e9cd8",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "22f38075-2d5e-4d5d-a28f-d078d08fed77"
        },
        "item": {
          "id": "de8d2bf8-1325-4dfd-88d7-5ba144979135",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "cc80ba79-3117-4c7a-966c-a49f8d49b8fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "bbf4e514-8c90-4260-8155-d2e94a53f564",
        "cursor": {
          "ref": "18ae8f42-867b-4c14-a5f4-0a30a73f63eb",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2b8978a6-ba52-4725-9b85-b8626c4266ec"
        },
        "item": {
          "id": "bbf4e514-8c90-4260-8155-d2e94a53f564",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "553c04cc-e981-41be-950f-3cee0d09eb93",
          "status": "Created",
          "code": 201,
          "responseTime": 189,
          "responseSize": 966
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e5f7aafd-e270-497b-af06-41fdf428cf37",
        "cursor": {
          "ref": "841d13a2-0dc3-492c-8849-0c7c1f3514dc",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "410b8043-bc6e-430f-abcf-1c15abb5e4ac"
        },
        "item": {
          "id": "e5f7aafd-e270-497b-af06-41fdf428cf37",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6cae8aed-9295-4e3e-974d-851d84375882",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 148,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "69044cd3-6461-4e1b-873f-79036b163848",
        "cursor": {
          "ref": "e07ac7f9-f074-4dbf-8f36-e5c07082b94f",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a5c8061c-39e5-4cb6-97a8-3531647f348f"
        },
        "item": {
          "id": "69044cd3-6461-4e1b-873f-79036b163848",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b0af6337-814a-4968-ac02-8f01949201f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 114,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "c16a9d1a-60ee-4187-80e4-ea0550a23edd",
        "cursor": {
          "ref": "994df766-07c5-4819-b54e-b729425d859a",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "eb929d9c-1a41-45bb-83bb-81e5aeb32c7f"
        },
        "item": {
          "id": "c16a9d1a-60ee-4187-80e4-ea0550a23edd",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "509346d1-518d-472b-a0c1-497e75916948",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 128,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "6187e694-cdae-4c13-af85-a4ffecd76886",
        "cursor": {
          "ref": "99741604-72cd-449b-8050-2f106323dcc9",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ebd514c3-47e7-4baa-9327-8d7bcf6c57b2"
        },
        "item": {
          "id": "6187e694-cdae-4c13-af85-a4ffecd76886",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b8285540-01bf-4b65-8845-39b3b5b8b76b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "6a676fca-869a-42fe-a22e-e50364487289",
        "cursor": {
          "ref": "7e730c07-6fd1-4d58-8c56-2412cb6105d4",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "31244cdc-0005-4358-a2f7-933e5090aadb"
        },
        "item": {
          "id": "6a676fca-869a-42fe-a22e-e50364487289",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ce35d426-8d24-47b4-97b1-8be365d02f38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 132,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "5d9dde94-c24b-43dd-94f0-fda13d017ff1",
        "cursor": {
          "ref": "f3fbb59f-cf0d-479f-8819-7c308e632558",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "661d8fb3-f6cb-4a83-b3f8-89d2d593bc61"
        },
        "item": {
          "id": "5d9dde94-c24b-43dd-94f0-fda13d017ff1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ebd5dc05-c86e-4ada-9e21-82adf6891f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "b472b7cf-9ffb-497a-99d6-9afff2fb3919",
        "cursor": {
          "ref": "bc447d08-98ce-4b20-8489-e04cc8072835",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f39a26d3-a1f6-49c0-a37f-786aea74af92"
        },
        "item": {
          "id": "b472b7cf-9ffb-497a-99d6-9afff2fb3919",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "216e056a-e422-4301-b5b7-c25791a64439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "e37667d5-51e8-49b8-bb3f-ef63f4b60bb3",
        "cursor": {
          "ref": "5af46e24-100e-4d40-95ff-9681905757d7",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b5f2f0c3-85c4-4123-9226-0e51379cbad3"
        },
        "item": {
          "id": "e37667d5-51e8-49b8-bb3f-ef63f4b60bb3",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a4bdfaaf-6f16-4d3b-8a29-99de240c7e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "aee66d2c-4b22-4ea4-9d22-7e84cc60e236",
        "cursor": {
          "ref": "da54c183-ce65-4b32-85df-3de153d20787",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "30b6a2d6-0f68-4cca-9f3c-cf6713df3b59"
        },
        "item": {
          "id": "aee66d2c-4b22-4ea4-9d22-7e84cc60e236",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "37b6940d-35ac-4225-a1a3-3f192690899d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "a4ecf634-5935-4ea4-9f67-533972cdfee8",
        "cursor": {
          "ref": "95d22be6-ab04-460a-99d0-567633f11199",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6e7b8f37-51b2-4ad6-b19f-3618219e0818"
        },
        "item": {
          "id": "a4ecf634-5935-4ea4-9f67-533972cdfee8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "60114831-e241-4bb7-9f1a-d1b28d583bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "dbcf456b-7085-408f-9b27-8ae058453232",
        "cursor": {
          "ref": "f5dcaaf0-b3b4-4a77-b368-ef6942919c22",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cb540088-6963-4029-91f3-a86cf51b7a9b"
        },
        "item": {
          "id": "dbcf456b-7085-408f-9b27-8ae058453232",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f3fa2825-00ab-40e9-be08-13be7f74ae5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "9a9bf542-ff1a-4c9d-8423-ccb716891aa2",
        "cursor": {
          "ref": "c343c41c-975c-4604-966e-4fad77973fab",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e13175ae-3537-43cc-825b-62bb06c59313"
        },
        "item": {
          "id": "9a9bf542-ff1a-4c9d-8423-ccb716891aa2",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "cbebe8fc-8ee6-41f5-9cd0-3388f41b979c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "036449c1-4e96-4c83-80b4-8c61ce2d314f",
        "cursor": {
          "ref": "7f819548-170e-42cf-8449-b9b2c5f1c223",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2d2b6599-b523-4f5f-b80d-04459131b9e7"
        },
        "item": {
          "id": "036449c1-4e96-4c83-80b4-8c61ce2d314f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ff915154-0a98-4638-8d3f-3f0be6100265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "d43b24d4-b84b-4916-95a9-38bc253e6b76",
        "cursor": {
          "ref": "fa29ce31-1038-4d3d-9b8f-fabf415ad84b",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "66841718-0d67-4495-bf06-67c9b075c43d"
        },
        "item": {
          "id": "d43b24d4-b84b-4916-95a9-38bc253e6b76",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c280ad98-f78c-49e4-805d-e83cbdae87f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "e69f5369-9e23-4285-9eb6-b3984f18b088",
        "cursor": {
          "ref": "afa98341-894a-42c8-a431-7a0a6559c077",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a705bbb8-34ed-4bd9-a9e8-9d6e002d5377"
        },
        "item": {
          "id": "e69f5369-9e23-4285-9eb6-b3984f18b088",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f180d4b5-76a9-4db8-8754-355756f43eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "bf0e096d-073b-4996-aab8-09f2bd3066a6",
        "cursor": {
          "ref": "ae8976fe-59e5-4d75-b8db-75f6208ffbb5",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "82235b01-3553-4f72-adaa-80749e43e60c"
        },
        "item": {
          "id": "bf0e096d-073b-4996-aab8-09f2bd3066a6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "cd3fe946-ba07-4b49-baa9-a74321721432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "0d82bc32-30fb-4398-b05c-dcb5bb1373a7",
        "cursor": {
          "ref": "61fc0e7f-83d7-4d91-94a6-d07fa19a96fe",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0f439f66-0d38-4483-8793-7f40973954d3"
        },
        "item": {
          "id": "0d82bc32-30fb-4398-b05c-dcb5bb1373a7",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d099e6c9-d9d7-46cf-958e-8531e98a22ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "5c5518dd-9c19-4c7b-9217-9456e16467c2",
        "cursor": {
          "ref": "2363ce8a-dc01-45ac-8587-342a658fbde4",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1b94d356-5dfb-4f9b-82cc-8766579dc6c8"
        },
        "item": {
          "id": "5c5518dd-9c19-4c7b-9217-9456e16467c2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f03145c6-8916-4718-a615-b2d4314514ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "a7cbcbfe-c7f2-49cf-86f1-c4153dc64e75",
        "cursor": {
          "ref": "706962b9-4600-44f5-b3f9-6b017d9c87e8",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b5577cae-058f-4af6-9b42-750520837447"
        },
        "item": {
          "id": "a7cbcbfe-c7f2-49cf-86f1-c4153dc64e75",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a4869ac5-0f25-4d12-80a4-93d57bf1287a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "88a9fe96-2c60-4658-a7be-29d45d91612d",
        "cursor": {
          "ref": "55330368-6c04-45ec-883e-02e152a26940",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "93797fc6-5f39-4aca-a497-a8bb6466e137"
        },
        "item": {
          "id": "88a9fe96-2c60-4658-a7be-29d45d91612d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d153953c-56ef-4e24-b1a6-c2dd04085563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "af35f2a3-aa05-4acb-a25e-50572e330fe1",
        "cursor": {
          "ref": "7110ba90-37d0-4e29-823c-728d9667572f",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "228a03ae-6d30-4c8f-8b47-085df54551db"
        },
        "item": {
          "id": "af35f2a3-aa05-4acb-a25e-50572e330fe1",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e3f2188c-a62c-47da-9039-bb04ca3b3c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "5cbcf616-33ec-4d4b-a95a-0fdf3b7bbc46",
        "cursor": {
          "ref": "b34f442b-14ce-4b54-a069-cc3a164657c8",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "26a15a05-85ba-4a29-91d3-3aa3b96f412b"
        },
        "item": {
          "id": "5cbcf616-33ec-4d4b-a95a-0fdf3b7bbc46",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "77d2db52-370e-4cf6-84b1-16e474b3a7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5632e01b-ad11-423b-9b66-1ad9cc8c4ad7",
        "cursor": {
          "ref": "9f41c7fc-38a2-4c1e-9478-abe3f99fc42b",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5dfc6981-a990-4cf9-a6a4-bbce597312ca"
        },
        "item": {
          "id": "5632e01b-ad11-423b-9b66-1ad9cc8c4ad7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "357ca3d7-ee78-43d0-8475-c13eccf489a7",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3817bd4b-b99d-4b58-ab18-b5afeddecc6d",
        "cursor": {
          "ref": "e20b939e-f56d-466b-adb0-7da51566cddb",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a8fd84a3-9381-4137-a854-f94a664aeecc"
        },
        "item": {
          "id": "3817bd4b-b99d-4b58-ab18-b5afeddecc6d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "11f215e2-d5f6-4df7-a945-12eb051dfc65",
          "status": "Created",
          "code": 201,
          "responseTime": 193,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1cb244a8-40a9-403e-a0b5-08427106b101",
        "cursor": {
          "ref": "1b0d061b-5f47-4cf2-90dd-cfa30c983293",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d00c9992-f559-4401-9ed7-67abc8162db3"
        },
        "item": {
          "id": "1cb244a8-40a9-403e-a0b5-08427106b101",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fc531941-825c-41bc-9430-9e373fd1403c",
          "status": "Created",
          "code": 201,
          "responseTime": 136,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "3b00c7d7-a519-466b-8244-8aa7f34a320c",
        "cursor": {
          "ref": "8fb71089-6a01-47f1-8da9-89f313fe1c75",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5a49de98-f7ee-4908-858b-58ca20a1fb3e"
        },
        "item": {
          "id": "3b00c7d7-a519-466b-8244-8aa7f34a320c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "60479a4f-a5b5-4552-88f1-ea0887d66b6e",
          "status": "Created",
          "code": 201,
          "responseTime": 101,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "302e4b52-4f24-4104-8ae5-dddf82e62e71",
        "cursor": {
          "ref": "6326337e-2cc9-47bf-9e7d-70f162f22179",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f5d6604a-f430-4f2b-b40e-d25a7758824c"
        },
        "item": {
          "id": "302e4b52-4f24-4104-8ae5-dddf82e62e71",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "cd365111-58cf-4baa-a0c5-dbba31ddcc9b",
          "status": "Created",
          "code": 201,
          "responseTime": 130,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "546ea513-b2a2-435d-9d85-aecdfd0ce6fb",
        "cursor": {
          "ref": "49cf9324-7920-4af5-b072-27255ac975c1",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a0835485-ceca-4c0e-8f66-bfeccaefd40d"
        },
        "item": {
          "id": "546ea513-b2a2-435d-9d85-aecdfd0ce6fb",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0468bd96-0ee3-4e88-b4ab-f7c05c8f0fd6",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "259088c7-6314-4ccc-93ef-1b7c4f1162e8",
        "cursor": {
          "ref": "c13f7b68-3b85-4f03-b584-d0f39d801954",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b5a85291-8cdf-4d20-b83a-3f787d104213"
        },
        "item": {
          "id": "259088c7-6314-4ccc-93ef-1b7c4f1162e8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8bb3df91-0249-4ed2-b4e7-f8921e19ea58",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "44b77725-c493-4a3c-8528-e737dfb4619b",
        "cursor": {
          "ref": "1c231fcb-26de-47df-af54-d12d521ea0f7",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ef90736d-a030-4b93-a20c-9485fa744024"
        },
        "item": {
          "id": "44b77725-c493-4a3c-8528-e737dfb4619b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "96d1c22b-87da-465a-a51c-31865c1baf20",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "21e95cb2-a3ab-4995-ac82-637547654682",
        "cursor": {
          "ref": "870217c6-2d2b-4fa8-b8b2-f74be8d24071",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4f514ff7-fe6c-4a25-985a-1568936b1049"
        },
        "item": {
          "id": "21e95cb2-a3ab-4995-ac82-637547654682",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "64c4298c-1566-4d01-b4ed-cd83bfdd26a1",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "1af46d79-28bb-4f70-9082-4009c819da19",
        "cursor": {
          "ref": "34bdeddd-8d69-47ee-b634-ae750df012ac",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5c876efa-47e7-4c18-be72-e9a259399184"
        },
        "item": {
          "id": "1af46d79-28bb-4f70-9082-4009c819da19",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1a0e6dd7-fec0-4a91-be00-be10ab54a94c",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 919
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "8273b863-78ef-45b3-b78e-86fbdc5eece4",
        "cursor": {
          "ref": "196580df-75aa-422d-bb23-270c37e59089",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0db47969-d786-4858-a574-49522162ecd9"
        },
        "item": {
          "id": "8273b863-78ef-45b3-b78e-86fbdc5eece4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8aabba56-5e26-4c1a-a4e0-7b7d2ce9eb68",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 922
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "04e2a1f1-42ae-4566-baea-0cdb400fefa4",
        "cursor": {
          "ref": "d8aa85f2-9ad1-48b2-a6bc-b9d0cd4f8e47",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ef13e9c7-95af-4a7a-80be-155d2323384f"
        },
        "item": {
          "id": "04e2a1f1-42ae-4566-baea-0cdb400fefa4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "439ab0d7-73d3-43bc-b2f9-d06bc777c850",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 919
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "8b14ae92-5001-4e5c-bdad-59e9791928a7",
        "cursor": {
          "ref": "8c26850e-1c5e-4b77-a728-8c6ab40af610",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b48e769f-c86b-4d86-8e62-d2d7dbeccd15"
        },
        "item": {
          "id": "8b14ae92-5001-4e5c-bdad-59e9791928a7",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7efce06a-3213-49f0-903b-558368be4e17",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 112,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "2480b62c-b3e1-4cee-9804-930a5b12615a",
        "cursor": {
          "ref": "5412b848-b713-4c06-b994-0333a637cb86",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ea66ac35-3254-4780-bf1e-e2b828abe2be"
        },
        "item": {
          "id": "2480b62c-b3e1-4cee-9804-930a5b12615a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "cabd5848-cc55-45bf-9c22-23dc528c2ad2",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 919
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "9e2764f5-fd99-4a3a-be6f-32c1779828cd",
        "cursor": {
          "ref": "559d610b-d0d6-41ae-b823-e5ae0b2926c4",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6189e365-e3b5-4475-b44d-99b49288bb7c"
        },
        "item": {
          "id": "9e2764f5-fd99-4a3a-be6f-32c1779828cd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "85f22bbc-18a1-431a-afd8-4de9421293e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "c54e6a71-f2db-4fd2-9be3-8014aa08c561",
        "cursor": {
          "ref": "594ee670-3afe-4d77-ba8c-2e414261be97",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d70e341b-77a0-44b4-b816-bd735f17dddf"
        },
        "item": {
          "id": "c54e6a71-f2db-4fd2-9be3-8014aa08c561",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1d36a207-c999-4b4a-97a3-d219fdd3ae73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "478c3b56-b83c-4d72-82bc-50eb9d180e7e",
        "cursor": {
          "ref": "95b74050-245c-452c-9438-1fac7b9425a8",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f6a28378-8421-47d7-8e89-b01ace5a06c7"
        },
        "item": {
          "id": "478c3b56-b83c-4d72-82bc-50eb9d180e7e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "26015b84-6029-416c-b4c6-c21478044e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "a8e117ac-ac1e-4ae2-91f1-6071b8dcacad",
        "cursor": {
          "ref": "6aa7fdc9-0ef0-42f3-b840-1d3b577e446a",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3a55aa4e-00b7-495a-87ce-2e81eae6cc3f"
        },
        "item": {
          "id": "a8e117ac-ac1e-4ae2-91f1-6071b8dcacad",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5c57438e-efa7-4244-8081-2471dc60b8c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "9a10ac26-423e-467d-811b-c473710e3cac",
        "cursor": {
          "ref": "23fb27ed-3baa-4c9e-a378-2c62e387d4b7",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9e7ac41e-51a4-4e33-a7bf-6ca473c07fee"
        },
        "item": {
          "id": "9a10ac26-423e-467d-811b-c473710e3cac",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "633de604-546d-4309-82a8-269c6a0b7703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "82cd781e-b2b5-48b3-8f17-b0db63a75afc",
        "cursor": {
          "ref": "05423f49-1ef3-4781-afc9-07c495b5e409",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d5e1b1eb-4a29-47a5-a39e-d1827b19148c"
        },
        "item": {
          "id": "82cd781e-b2b5-48b3-8f17-b0db63a75afc",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "714e5412-b37b-4ff9-986d-194e94297720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "f85b3771-0cdc-4e4f-8956-b156d10c99f2",
        "cursor": {
          "ref": "8a1de0e8-fa20-42a3-aa61-5fa9fee145a1",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "14b311df-a83b-4532-9daa-190532a4a3ce"
        },
        "item": {
          "id": "f85b3771-0cdc-4e4f-8956-b156d10c99f2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "20c08d39-06a2-45ba-b3ce-77179cb7affd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "5a95415e-513e-4258-8bbe-724dac95d2c8",
        "cursor": {
          "ref": "83d85d71-bf30-4056-8927-07ff73bc91d6",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "dcbcc8b9-42a4-4d9f-958c-e6d2b3d5d8bb"
        },
        "item": {
          "id": "5a95415e-513e-4258-8bbe-724dac95d2c8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "02811465-6545-4472-a228-cb9c1a9e919d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "582dbb34-47a1-4979-b844-e2d83e0460af",
        "cursor": {
          "ref": "016d6f30-cd4f-4c09-a7e2-2dcfca66483b",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "da7b2494-159a-4c66-8ce9-a3b66e890bba"
        },
        "item": {
          "id": "582dbb34-47a1-4979-b844-e2d83e0460af",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "83a9b1a9-5d67-4433-8616-622ed1f7ce95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "67f07088-3982-4558-90cc-b6925facd058",
        "cursor": {
          "ref": "1ba16b45-d5a4-4a83-8a54-6906a9f41390",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "80a273d2-b8a8-417e-82d7-378131cf96ae"
        },
        "item": {
          "id": "67f07088-3982-4558-90cc-b6925facd058",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9ccf5b5f-5298-4ca1-86b5-664c3433f78e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 118,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b517b188-d34a-493d-b105-74a163bcb577",
        "cursor": {
          "ref": "18e6cad0-5968-45b7-b5f5-4605f3773e9e",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b8abed98-9f58-42c8-bb9a-d7426e79bfd1"
        },
        "item": {
          "id": "b517b188-d34a-493d-b105-74a163bcb577",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "60deef48-27ff-465e-9fcd-2b919112490d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 159,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "f92a8d8a-ab56-4bc3-8dbf-55d046d45ffc",
        "cursor": {
          "ref": "0d961b28-9937-4658-b5d2-a53b68089ba2",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "32bd4941-0a54-412c-bd03-48d398f0fcd8"
        },
        "item": {
          "id": "f92a8d8a-ab56-4bc3-8dbf-55d046d45ffc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f91b5d53-fb98-45ab-9034-947e3eac64d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "e880bc25-78aa-4540-b1f8-248c65186f14",
        "cursor": {
          "ref": "9d186a87-e603-440b-8ddf-4bfe5fa33c33",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9a922c0b-d565-46f1-85dd-58bb9ee7b88e"
        },
        "item": {
          "id": "e880bc25-78aa-4540-b1f8-248c65186f14",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "72a46ac9-ed48-4b67-b873-68e438f9fd7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "dc34a90d-153e-4967-b062-f4d715688ddc",
        "cursor": {
          "ref": "044599f6-568b-4043-a1f4-1c5df007b9db",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ebb63bcc-2484-4187-9cca-ffa04a458770"
        },
        "item": {
          "id": "dc34a90d-153e-4967-b062-f4d715688ddc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ff3abbf0-006d-43c1-af28-0929fc4242b8",
          "status": "Created",
          "code": 201,
          "responseTime": 104,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "91f68588-1bd0-49b8-9a96-ef480d5c0dcf",
        "cursor": {
          "ref": "ad4beee3-344e-4dfc-9471-83405acec12f",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5a2073b5-c3da-402b-91de-247b964a7419"
        },
        "item": {
          "id": "91f68588-1bd0-49b8-9a96-ef480d5c0dcf",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "cc815b5b-b5ba-4583-99e5-3f417efda94f",
          "status": "Created",
          "code": 201,
          "responseTime": 1059,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "d68dabd8-f767-44d2-b448-bb7235bb42d9",
        "cursor": {
          "ref": "a1105a7b-c484-4504-ab3b-ccdd95a25290",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ed5fd161-1489-4803-a64b-6dbd37bfadc7"
        },
        "item": {
          "id": "d68dabd8-f767-44d2-b448-bb7235bb42d9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "68fd7786-e5ed-42fd-b351-39cbd5ab936a",
          "status": "Created",
          "code": 201,
          "responseTime": 107,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "36e247cf-b2bd-45a5-ab0e-ae9d460289c3",
        "cursor": {
          "ref": "684be093-b165-4476-a401-a7508da0f947",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d879ede3-c725-44ce-acc3-86834760bccb"
        },
        "item": {
          "id": "36e247cf-b2bd-45a5-ab0e-ae9d460289c3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3fc710ef-6442-4444-8856-5c9ba7db8bc5",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "2cb37677-a1e0-4e91-a9ca-5a61b92284bb",
        "cursor": {
          "ref": "64876075-8f83-4a8b-97c1-42004de94761",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f654ac64-f92e-4787-966e-fe79d55f3e14"
        },
        "item": {
          "id": "2cb37677-a1e0-4e91-a9ca-5a61b92284bb",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4feda55d-43f8-4685-a8dc-173e714f196f",
          "status": "Created",
          "code": 201,
          "responseTime": 99,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "e14bb3e4-368a-4edd-b7d2-e1ef749fc7ce",
        "cursor": {
          "ref": "832b2911-5eba-498d-87b2-7a40262f06c6",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cf118f9a-cd42-4f91-b728-62f063e071c1"
        },
        "item": {
          "id": "e14bb3e4-368a-4edd-b7d2-e1ef749fc7ce",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bf637586-c2b6-41a4-a4dc-50b1e123933d",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "a0004138-3752-47e3-979d-7861bf599f8f",
        "cursor": {
          "ref": "b75bcbb9-7c0d-4cd3-a215-6688394a88ad",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d6beab69-0992-4007-8ab8-64825bffcfbb"
        },
        "item": {
          "id": "a0004138-3752-47e3-979d-7861bf599f8f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "33d845e6-119a-4313-b6f8-1052e6c0d19d",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "6b5845f6-218d-4246-8a83-c45de2ddd445",
        "cursor": {
          "ref": "f243492e-51d3-4cc3-aef4-1800678ae40a",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "30e29b7a-e4fb-49bc-a044-ecc35b9fd385"
        },
        "item": {
          "id": "6b5845f6-218d-4246-8a83-c45de2ddd445",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0f18f1c5-d56b-4b0e-959d-e04590982fa2",
          "status": "Created",
          "code": 201,
          "responseTime": 89,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "adc543c3-ded0-4562-b8ee-001c54568002",
        "cursor": {
          "ref": "10d85a31-2583-4812-9d1c-dc5f18b2e7cf",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3a558532-6eeb-435d-8caa-0b64481ce6a2"
        },
        "item": {
          "id": "adc543c3-ded0-4562-b8ee-001c54568002",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "05f1500c-6b3c-4c45-9a1d-f7ff3f308884",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "8cab8966-19b5-4f2c-b191-0a60de2dcefe",
        "cursor": {
          "ref": "c9e8c0d1-cd31-409b-9d31-50de659bf710",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5be24bfe-c0be-4bba-b097-ebf2e032edff"
        },
        "item": {
          "id": "8cab8966-19b5-4f2c-b191-0a60de2dcefe",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f71ab458-4e45-4912-96eb-0fde7f5982ad",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "d9cd941a-66f0-4ff4-b1e0-aeffc40c6ffa",
        "cursor": {
          "ref": "3d88d31a-cc3e-43dd-a48b-49a62dda9051",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6b8b7bf4-d3c7-4f0a-8f61-1cebce3353d1"
        },
        "item": {
          "id": "d9cd941a-66f0-4ff4-b1e0-aeffc40c6ffa",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4fa24d23-ad41-4a38-ae76-0f489f059aa9",
          "status": "Created",
          "code": 201,
          "responseTime": 91,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "5d35d325-fd09-46ca-ba73-eea9233c0bd7",
        "cursor": {
          "ref": "a9184d6b-b34b-4ffa-b078-5d835a1dc8e6",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "95c79e8d-bd1f-4fe0-aea4-4b5b69919115"
        },
        "item": {
          "id": "5d35d325-fd09-46ca-ba73-eea9233c0bd7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4428834d-5061-4f64-8745-fa066ce49b25",
          "status": "Created",
          "code": 201,
          "responseTime": 78,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "e376a79b-1918-4df1-97ed-850857c6ffe6",
        "cursor": {
          "ref": "a81189f8-9245-4d23-b209-c9f0bf843533",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fe68d519-cd8e-48a9-928a-94e434f8899e"
        },
        "item": {
          "id": "e376a79b-1918-4df1-97ed-850857c6ffe6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3defdd3e-7e22-424e-9863-5c0612e21ab9",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "53c50462-ae16-44bf-a61c-34af236a90ac",
        "cursor": {
          "ref": "1d57c928-d833-4a7c-96d0-47795a9b1157",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "443ad845-6956-4fed-9958-52c2838fbc0d"
        },
        "item": {
          "id": "53c50462-ae16-44bf-a61c-34af236a90ac",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f8cb3068-5255-4e77-8b72-d4364b9929ba",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "80bf809e-4ab6-4a4e-852b-1b1fdf5bad0b",
        "cursor": {
          "ref": "45db28b7-639f-471f-aed4-6a7c0d555279",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4c517857-6bdb-4e99-b606-ac3214584e32"
        },
        "item": {
          "id": "80bf809e-4ab6-4a4e-852b-1b1fdf5bad0b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d0fe310c-8206-4099-b2e5-61e83eb0b8c3",
          "status": "Created",
          "code": 201,
          "responseTime": 129,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "1acefe6d-21b6-428b-b21a-c81b07c8f2c5",
        "cursor": {
          "ref": "a50ef0d9-b8aa-48c6-9c5d-2fcc18f1f62d",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a4796a7f-4a05-4c85-96ed-2456ad60e96d"
        },
        "item": {
          "id": "1acefe6d-21b6-428b-b21a-c81b07c8f2c5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f4a06c13-e5af-4842-8237-9164cf2e0f4b",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "be01f8aa-b98c-4aca-a17e-32dbeb3eb90b",
        "cursor": {
          "ref": "d934703c-f33e-444f-b58e-469968c5d3f1",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "bc727261-4d66-4e74-af64-bef6a8ca404d"
        },
        "item": {
          "id": "be01f8aa-b98c-4aca-a17e-32dbeb3eb90b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d01e4672-fff1-4c8e-a2a5-5745a51e0dc9",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 919
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "93b3f90e-a0f9-4d21-b01b-3e9b9ccd506c",
        "cursor": {
          "ref": "dbe78617-1477-4cbf-b51c-45a025e2fdab",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1b8b55e2-bd30-4644-9c5c-b54e348f2dad"
        },
        "item": {
          "id": "93b3f90e-a0f9-4d21-b01b-3e9b9ccd506c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e302fa2e-994f-4acb-b8a3-8888b2949bcc",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 919
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "9e2150b8-a20f-441a-8c8a-f79112ed8e2a",
        "cursor": {
          "ref": "d416c644-43ea-470f-ba55-6f691bc6942d",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9296a0a8-05e8-475f-979d-a370c665f452"
        },
        "item": {
          "id": "9e2150b8-a20f-441a-8c8a-f79112ed8e2a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5cfab3bd-1aed-45e1-8a3c-023da77f7922",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 919
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "0b10ce99-3b1d-455e-be0f-d294208312a7",
        "cursor": {
          "ref": "41eb2d90-9758-464e-be57-5dca0f9f30cd",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1cba4f93-4685-43f4-90fc-89334db439af"
        },
        "item": {
          "id": "0b10ce99-3b1d-455e-be0f-d294208312a7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0c1b777f-e6dc-4144-94b4-0cca958b82b4",
          "status": "Created",
          "code": 201,
          "responseTime": 96,
          "responseSize": 919
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "3391349a-060a-4b39-b776-578e94fff05f",
        "cursor": {
          "ref": "43511812-6085-47b2-9a29-ca3804eef9aa",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "cbcc3616-daa1-4823-a8a5-4a0cfa2a50c0"
        },
        "item": {
          "id": "3391349a-060a-4b39-b776-578e94fff05f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "dc6a75fb-f357-416a-929d-20d44c48c699",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 919
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "dd3e7aa1-e8c3-4ce7-817c-39c0d3f21f22",
        "cursor": {
          "ref": "d2e81e82-b376-4998-97c7-1ee4bbc55725",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "380223fe-a924-4a32-94c1-a12dbf268c7f"
        },
        "item": {
          "id": "dd3e7aa1-e8c3-4ce7-817c-39c0d3f21f22",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b626f408-9de5-48da-9e8a-02559481adcf",
          "status": "Created",
          "code": 201,
          "responseTime": 82,
          "responseSize": 919
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "976ef379-8a2e-42dd-8edf-6515cb4b302d",
        "cursor": {
          "ref": "bb3cd098-3361-478e-8c2b-c20a42c160e7",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "644d05d7-fe3b-467c-963e-8441157315e7"
        },
        "item": {
          "id": "976ef379-8a2e-42dd-8edf-6515cb4b302d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7f4233d0-fd61-4e52-975e-16260108ef33",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 919
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "eb943517-5c6b-4853-a37e-edb26d1c21ab",
        "cursor": {
          "ref": "04c20b12-1dff-403f-bd5a-20e050b7b842",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "968c314a-0157-4293-bffa-aef17e9100cc"
        },
        "item": {
          "id": "eb943517-5c6b-4853-a37e-edb26d1c21ab",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "871921f6-8ee7-4b22-b121-78c59bdf3c80",
          "status": "Created",
          "code": 201,
          "responseTime": 118,
          "responseSize": 919
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "370e3436-3c1a-4856-98a4-e86cb44fe4f8",
        "cursor": {
          "ref": "6e8703a9-035e-48bb-a4a7-8c75ed799843",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f7688518-a927-40dc-8b96-772e4f7d45af"
        },
        "item": {
          "id": "370e3436-3c1a-4856-98a4-e86cb44fe4f8",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fecc572c-af8c-46d2-a99c-1c9bf6780405",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "ecee4e78-035c-46cd-a832-49b08a27a7be",
        "cursor": {
          "ref": "a006fdcd-5763-4dc7-8c20-5214c5969cd7",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f238d604-285d-4c9d-af1c-49085f7d800c"
        },
        "item": {
          "id": "ecee4e78-035c-46cd-a832-49b08a27a7be",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "30af4307-28c8-4be9-bf09-cde01c2a6b53",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "ca12f59a-aa56-46af-87b1-b103b1edd8aa",
        "cursor": {
          "ref": "fb8afaa1-3c7e-42e9-8214-049638a58bf2",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a23b8611-ee76-4238-b5a5-e6b24dcda596"
        },
        "item": {
          "id": "ca12f59a-aa56-46af-87b1-b103b1edd8aa",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "320544f2-b158-4efe-b0ad-24de1d35f648",
          "status": "Created",
          "code": 201,
          "responseTime": 120,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "bb1748fa-9c9e-459d-bee1-aa3a77263d51",
        "cursor": {
          "ref": "fe5087bb-84c5-4ff0-8fd7-f7e1e7a671cc",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fcff33d3-ad09-407a-8535-52bf10eeb5a2"
        },
        "item": {
          "id": "bb1748fa-9c9e-459d-bee1-aa3a77263d51",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2c97b1ac-9ed6-4c78-9dea-c278597712cd",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "4819ec8e-750b-4f0e-a273-74e1610d8f8e",
        "cursor": {
          "ref": "72e43985-ea95-4055-9aad-8a2fd62287e5",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6079437d-f22f-42c5-8040-4ccbb02ce3dc"
        },
        "item": {
          "id": "4819ec8e-750b-4f0e-a273-74e1610d8f8e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4e3253ea-dd39-4019-9ce5-60739bf1f7e4",
          "status": "Created",
          "code": 201,
          "responseTime": 88,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "10d85f6d-f5ba-4662-beec-c92da4565b0a",
        "cursor": {
          "ref": "34f6b132-92ab-4771-84fa-b781f5897aec",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "282d61a2-6392-4587-8939-c4d9f45661b9"
        },
        "item": {
          "id": "10d85f6d-f5ba-4662-beec-c92da4565b0a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "dc128993-cca2-4fba-b4fa-9a945dfd3188",
          "status": "Created",
          "code": 201,
          "responseTime": 77,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "64f86a83-320f-4e5c-8478-e53c3a6e5375",
        "cursor": {
          "ref": "a078978c-eb34-44f1-9517-efe82bc6a22d",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "29133b00-f718-42fb-93ca-4fb8b0dc89a8"
        },
        "item": {
          "id": "64f86a83-320f-4e5c-8478-e53c3a6e5375",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "832a1506-f171-404f-9af2-eeb6f0814a67",
          "status": "Created",
          "code": 201,
          "responseTime": 114,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "7fcea5b6-f372-42c5-acb6-25609df18c42",
        "cursor": {
          "ref": "03f19b6a-18eb-4952-a3d3-6d14443d8bbd",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3ebf83b4-6cc3-4392-92ce-781158b8e1c5"
        },
        "item": {
          "id": "7fcea5b6-f372-42c5-acb6-25609df18c42",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d196711c-0662-4c28-ac8f-b1600970b1b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "17c7be06-1dcc-4437-976a-c11ec9b6e015",
        "cursor": {
          "ref": "af42d194-d177-48e4-9ae6-306059b0ebbe",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1d1e0da3-4229-420b-9c1b-2c33e8e0b608"
        },
        "item": {
          "id": "17c7be06-1dcc-4437-976a-c11ec9b6e015",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "eda7d631-de28-4515-a804-f4614e18d9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "7dd59fb1-603b-48cb-835f-84e1f62d314a",
        "cursor": {
          "ref": "f8453ddc-de0a-44bd-b164-0e9e6b645ca0",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "738388f3-0194-4353-a5ea-6ae0a0167bd3"
        },
        "item": {
          "id": "7dd59fb1-603b-48cb-835f-84e1f62d314a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4c4e8a8e-ddab-4ddd-99e6-252ab5de7711",
          "status": "Created",
          "code": 201,
          "responseTime": 118,
          "responseSize": 919
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:104)"
            }
          }
        ]
      },
      {
        "id": "acbcec50-f980-45dd-a2bb-2992fe0bc99e",
        "cursor": {
          "ref": "9c8a6ee4-2650-443b-8d1d-a5bec6d4df60",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f83d7bfe-3831-4007-9399-288d6a82d1a8"
        },
        "item": {
          "id": "acbcec50-f980-45dd-a2bb-2992fe0bc99e",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "54f7f7d1-2ada-46ea-8fad-1958064ab3ac",
          "status": "Created",
          "code": 201,
          "responseTime": 158,
          "responseSize": 973
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "23c4fad8-71d2-4750-9ae9-506e3af03f74",
        "cursor": {
          "ref": "2b8a2a34-6e8b-4071-90d7-6b9a811c0c90",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a61bc9c4-44f7-40a9-81ad-cf836159e136"
        },
        "item": {
          "id": "23c4fad8-71d2-4750-9ae9-506e3af03f74",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5c4be944-2356-434d-9f98-ebb59a3b0950",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 919
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "931893ea-55cd-4902-88f7-512415106c54",
        "cursor": {
          "ref": "fc5653d8-5c0a-485b-9076-be301b7866ab",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a9fe606e-14c5-4a40-9af3-5c48798cefc4"
        },
        "item": {
          "id": "931893ea-55cd-4902-88f7-512415106c54",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "446a1c7c-b3c5-4df4-8617-50b83cb2ea8b",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 942
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d04e05a5-14bb-4db1-8d94-c56eeb9cc109",
        "cursor": {
          "ref": "bb0db855-bc93-4b75-bff3-033aa7f8c664",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3ef8e6c9-ee57-44dc-848e-a1f05c7d9f32"
        },
        "item": {
          "id": "d04e05a5-14bb-4db1-8d94-c56eeb9cc109",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "05978399-87d0-4dde-8c3a-81e97360ce40",
          "status": "Created",
          "code": 201,
          "responseTime": 113,
          "responseSize": 919
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "28d70d98-434d-404c-a80d-3caa52700e56",
        "cursor": {
          "ref": "32b4bb86-4ccf-4ad9-8036-f0393ca0e1f0",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3f131ce0-8228-4550-9c13-f60e18cdc2b1"
        },
        "item": {
          "id": "28d70d98-434d-404c-a80d-3caa52700e56",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "41bdd6ed-a755-414c-9a5d-8cec031f178b",
          "status": "Created",
          "code": 201,
          "responseTime": 131,
          "responseSize": 920
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "f563f863-68bc-4ff8-8f1f-7b1602910f47",
        "cursor": {
          "ref": "5d789257-5537-42e1-b190-67effe265d6f",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0244df4b-e348-4f6a-97a1-4bf71169ee50"
        },
        "item": {
          "id": "f563f863-68bc-4ff8-8f1f-7b1602910f47",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "40bed622-8602-4b33-88c8-195be7875a93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "f563f863-68bc-4ff8-8f1f-7b1602910f47",
        "cursor": {
          "ref": "5d789257-5537-42e1-b190-67effe265d6f",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0244df4b-e348-4f6a-97a1-4bf71169ee50"
        },
        "item": {
          "id": "f563f863-68bc-4ff8-8f1f-7b1602910f47",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "40bed622-8602-4b33-88c8-195be7875a93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "2d8eb708-2d90-4bcc-a5ee-55bf8e965427",
        "cursor": {
          "ref": "e61efb86-8eba-4095-8160-7fbe1664c49e",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0894d2c1-d907-45a1-a751-a043ce80232c"
        },
        "item": {
          "id": "2d8eb708-2d90-4bcc-a5ee-55bf8e965427",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "62ee3bb4-4d12-4959-843e-593abb4628ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "bf264741-c849-426d-b02e-bef5990e1f25",
        "cursor": {
          "ref": "f955a5c8-c18c-4f32-a15a-5d93331ac7e7",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c5059fd5-4ee4-4398-b7f6-ebfc5bf0cca5"
        },
        "item": {
          "id": "bf264741-c849-426d-b02e-bef5990e1f25",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a751c153-692d-4c53-9287-a722d3f5a061",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "e1291df3-abba-44e9-a080-336af5ed31f8",
        "cursor": {
          "ref": "fb1fd875-11d9-4c29-b17d-3c4f44c27b12",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7e784d5c-1087-418a-8115-deee4d827dd5"
        },
        "item": {
          "id": "e1291df3-abba-44e9-a080-336af5ed31f8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "03a7f720-ac82-405c-9cf0-a44da7c12a2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "95301bb4-6f85-45f4-8ebf-3d2183c51b9c",
        "cursor": {
          "ref": "ecba836d-9087-41e7-ac1b-87448bc7cbfd",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2a830e02-c5f4-4570-8cc7-e793061473fc"
        },
        "item": {
          "id": "95301bb4-6f85-45f4-8ebf-3d2183c51b9c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "088dd1c3-bd6b-43c2-a526-c0121cef13c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "81a1d63b-e8ce-44da-9a7b-bbe521b5a4a0",
        "cursor": {
          "ref": "0d9d7a7d-a030-4250-b7b5-3a157918b084",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e94cd9db-1b22-458c-9b9e-02b6f9f99bb4"
        },
        "item": {
          "id": "81a1d63b-e8ce-44da-9a7b-bbe521b5a4a0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f67cf563-4674-45ce-96ae-acff7aeed224",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "590fd9e7-bf03-4514-9a43-8c1d6cfbf169",
        "cursor": {
          "ref": "75186624-7b5f-4b20-a349-c7ad35a68bb3",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4ea08b21-f0a5-4482-a0ac-63afceca749a"
        },
        "item": {
          "id": "590fd9e7-bf03-4514-9a43-8c1d6cfbf169",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "97db31a3-f95f-4063-ba6c-fce926e01d92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "15cebcd9-244d-40f6-9a8c-f5d6af14c719",
        "cursor": {
          "ref": "6fdad654-a297-462b-89f6-96fea5129176",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "43034a0e-e9bd-43a0-b771-b37ed8cdb3a1"
        },
        "item": {
          "id": "15cebcd9-244d-40f6-9a8c-f5d6af14c719",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "57b5dca6-e22a-4861-a4b4-ec620d0bd123",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "a27d8976-07b0-43d9-8b99-74674c418270",
        "cursor": {
          "ref": "ea7dbe9f-0f7e-4292-902a-482927798da2",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "22300e2c-0c60-4c87-8153-2f0c69a594e0"
        },
        "item": {
          "id": "a27d8976-07b0-43d9-8b99-74674c418270",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "367b475f-e0d3-4ba6-9d1a-e37301c6a19c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "8e0b1a02-d36e-4588-9292-8de4e9c7fc34",
        "cursor": {
          "ref": "b44744ba-f6c2-4ed2-a89a-09cd1495f1b3",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "cb912db1-b607-4a8d-8721-bb2208241151"
        },
        "item": {
          "id": "8e0b1a02-d36e-4588-9292-8de4e9c7fc34",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "56e2758b-210c-4d3f-b33a-3ff68a00d1a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "7e7dfe71-9f3f-4eee-8a97-d646e2dd7c54",
        "cursor": {
          "ref": "0d7c6447-cdb8-4b91-82da-0f4ea8c8e8a7",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4b354492-35b8-4d93-b543-9c29a85ec5ce"
        },
        "item": {
          "id": "7e7dfe71-9f3f-4eee-8a97-d646e2dd7c54",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "faa6414a-8acf-4d49-b130-613d5b58161e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "b98a6977-8f26-4d9a-bd79-54cde6f31404",
        "cursor": {
          "ref": "f94cbdcc-f7ff-4222-8370-62c50bdf62ba",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "684172d6-7483-408b-b1a1-e84527431306"
        },
        "item": {
          "id": "b98a6977-8f26-4d9a-bd79-54cde6f31404",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8734791a-1db0-4a77-9a34-85fdf1716844",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "cfd7cd99-4117-4904-b2ab-14b0ce20267a",
        "cursor": {
          "ref": "9453ab66-dd3c-492d-ac97-863602db87a5",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7ba69339-c299-4c79-a85e-1b5f2324978e"
        },
        "item": {
          "id": "cfd7cd99-4117-4904-b2ab-14b0ce20267a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3e7a9db9-1a3c-44cd-b39b-cb7d22d4d92e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "476fc5a5-5a19-4e6b-83ae-1c2e4fe87fb3",
        "cursor": {
          "ref": "83303e91-d9c5-4e3c-bd23-673bcd3adbae",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "20d52368-04b8-496e-a37d-4cba207b452a"
        },
        "item": {
          "id": "476fc5a5-5a19-4e6b-83ae-1c2e4fe87fb3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "806bca00-a6d5-48e3-9f83-ac3d5a13a386",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "87f19799-9c1a-4d85-9a5c-17dc2688caf1",
        "cursor": {
          "ref": "bdb04d9b-5484-46ab-9d58-209d13e659a9",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0d8e0b11-fcf7-47e7-9087-548c03a1d1d0"
        },
        "item": {
          "id": "87f19799-9c1a-4d85-9a5c-17dc2688caf1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3cfb6994-64ac-4fe9-807a-d61d1746bea4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "f8bae731-f52b-468d-9429-b657ab384fba",
        "cursor": {
          "ref": "adc38f18-3fdf-4ef8-9693-974c1c5938c6",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "30451123-f8cb-43ab-b027-8afaa9fb7172"
        },
        "item": {
          "id": "f8bae731-f52b-468d-9429-b657ab384fba",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5e4c8e24-a988-4d7d-b554-b66e1300f310",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "4e8e7fa2-7091-4fdc-b54f-8b1aeeda7c88",
        "cursor": {
          "ref": "c24bf2dc-e36e-4674-b53b-3689bd2fbfa8",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5bf80731-3b3b-4359-b7d5-5f7ddb98b4d4"
        },
        "item": {
          "id": "4e8e7fa2-7091-4fdc-b54f-8b1aeeda7c88",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "23ef35a6-1d5a-4086-9b21-5c010116faf1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "5be3838e-30f3-4e3d-92c1-4379ed63edd9",
        "cursor": {
          "ref": "417446f3-8a5b-46d5-ac1a-73996c03386b",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f26a6db6-e6b8-4860-a5c3-339015f8d5b1"
        },
        "item": {
          "id": "5be3838e-30f3-4e3d-92c1-4379ed63edd9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2df838c4-135d-44f7-884e-c56447bfa448",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "c1ca3e9d-0897-482f-a8d6-cfb970e1bd69",
        "cursor": {
          "ref": "d3d0aba6-3b7d-4954-b35c-d01046d01d1a",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6737b573-6593-426f-ae17-08da358de396"
        },
        "item": {
          "id": "c1ca3e9d-0897-482f-a8d6-cfb970e1bd69",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5e381673-431d-41e3-9fb9-2e3b18cf0264",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "d2f4751f-da3e-4466-91a0-b362cbbd3ffa",
        "cursor": {
          "ref": "1f62c1cd-bfad-45fb-b404-d9f8a1e77f5c",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "22f073e0-cd8c-42a3-9534-4ed4982e0d1c"
        },
        "item": {
          "id": "d2f4751f-da3e-4466-91a0-b362cbbd3ffa",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b72ffb58-1932-4eaa-8e84-3618102bdfbd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "3dfec044-0313-4199-862e-156f91afc332",
        "cursor": {
          "ref": "1c144fc8-d92f-4c09-8dea-78a5552e7644",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "051de1b9-c5ba-4ebb-89fd-254ed7932d3c"
        },
        "item": {
          "id": "3dfec044-0313-4199-862e-156f91afc332",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f67ba3f3-90fe-4157-9c2e-868ee41c8666",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "0cd1f568-98f1-4687-bf4d-797ef3fdb393",
        "cursor": {
          "ref": "e687cbe6-fa7b-4baf-a916-2422d58a12b0",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1e0e0117-62ef-44dc-a536-a7b2871dc0fd"
        },
        "item": {
          "id": "0cd1f568-98f1-4687-bf4d-797ef3fdb393",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "01d9267c-fbc1-4117-8d5b-6c93040c32f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "7c0fe3ce-abd3-498c-a1eb-474859a7ae9c",
        "cursor": {
          "ref": "7af2e594-189b-415c-a07c-acb8721904c5",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b6ea188c-03bd-4c20-a6b8-5d87a1d3b79b"
        },
        "item": {
          "id": "7c0fe3ce-abd3-498c-a1eb-474859a7ae9c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "685f7334-7639-4d74-82c3-18a2b663169d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "16db4d52-d7a3-4fdf-b180-f0e3fbd632c6",
        "cursor": {
          "ref": "e582e262-258c-4bdb-8835-4b91f746a56c",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "25d23111-5db6-42c2-b0f8-0f6aee2b83b7"
        },
        "item": {
          "id": "16db4d52-d7a3-4fdf-b180-f0e3fbd632c6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9b239347-9146-421c-9f27-0758572792b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "55c234da-ba7c-42e2-952e-c863a6281086",
        "cursor": {
          "ref": "db5044c5-1d9f-4a31-a198-69eb2cae7df4",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "771490ba-e175-4fc6-8f74-445613b156a6"
        },
        "item": {
          "id": "55c234da-ba7c-42e2-952e-c863a6281086",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6d775fb1-ab44-4270-abcb-3675f2f45316",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "f1f6f9ae-3392-4bf4-a4a6-0ba04c85c38c",
        "cursor": {
          "ref": "d2fe4221-55bc-4ba7-a0ce-aecb04adb173",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "31d34c07-879b-41da-a691-aeaf63e6e2c7"
        },
        "item": {
          "id": "f1f6f9ae-3392-4bf4-a4a6-0ba04c85c38c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "83fd5d06-1c9c-4269-92c6-56f0e14858e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "6f94d5eb-5139-4e38-b8d7-66a484735ffb",
        "cursor": {
          "ref": "ddf41180-07b6-44c1-8e83-dd141ca80f7c",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a43ecbf0-a9ab-41ec-8316-8d1f524cc35f"
        },
        "item": {
          "id": "6f94d5eb-5139-4e38-b8d7-66a484735ffb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6390a15a-4e82-438d-9c4b-dca6101805ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "9e9ed6c4-30a2-4c64-b349-3a0c7c5d2424",
        "cursor": {
          "ref": "2db7d12d-f106-4d72-b21f-34137832751f",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "cd085bfd-db52-4347-a3eb-fd9709894dd7"
        },
        "item": {
          "id": "9e9ed6c4-30a2-4c64-b349-3a0c7c5d2424",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c3d20ad2-6c47-4d58-aa69-0204f95d4bf1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "18313d53-9063-48b3-90f9-4138adbcadd7",
        "cursor": {
          "ref": "894f8f69-02ea-4eb8-a9b1-2ca3a71e29eb",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c4c0b788-1841-4dbe-b614-20b22d231a9c"
        },
        "item": {
          "id": "18313d53-9063-48b3-90f9-4138adbcadd7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "15e09afb-3ecd-402e-9c02-dfb13d15262a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "1680d8ae-a03f-493a-8190-1003fa06460c",
        "cursor": {
          "ref": "16a3ef84-3542-4da5-9110-3a14273df097",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "09e4ae8f-e2b8-41d3-87de-7d2abe6e8bb8"
        },
        "item": {
          "id": "1680d8ae-a03f-493a-8190-1003fa06460c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b6aee56b-0d9d-4407-935c-844f91fbffd4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "b3ef5b65-d822-46b9-a2fd-0d56ad58d7b1",
        "cursor": {
          "ref": "3ea7d521-128a-40a4-8ae7-380350b1b8ee",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9eaa9e42-16d4-4b9d-9dbe-6742340e11f0"
        },
        "item": {
          "id": "b3ef5b65-d822-46b9-a2fd-0d56ad58d7b1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3f369457-bfed-49c1-90d8-81696ee7b42a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "5c522744-2a30-44af-9ec2-53288474e2d3",
        "cursor": {
          "ref": "423d0114-c678-444d-a81c-f41c03d9eab9",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4e1e58fe-d49f-4f09-bcba-e882a61290d7"
        },
        "item": {
          "id": "5c522744-2a30-44af-9ec2-53288474e2d3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5eb0e3ee-e3eb-4a6b-9d70-5cf8e6de7804",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "37b829ce-ae8f-4843-8dac-ee9b1684737c",
        "cursor": {
          "ref": "1d6eeba6-05d5-46f0-b13e-b9c39c54a0a4",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "95be6a0b-ecd0-4c0a-b57a-eadfa0b0cb09"
        },
        "item": {
          "id": "37b829ce-ae8f-4843-8dac-ee9b1684737c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fe11c4b6-c1cd-4d3c-a419-9a5a2cd55e3b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "98b415ed-256a-46ce-8aa9-20d7872dfcb0",
        "cursor": {
          "ref": "d96789f5-1098-4c60-bda4-bb0ede748217",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c9274329-31d6-4e37-97a9-be4d33079eb9"
        },
        "item": {
          "id": "98b415ed-256a-46ce-8aa9-20d7872dfcb0",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "48d6d57a-45c9-4a6a-abe0-955fcfedd9a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "29d94ee3-3d6b-4d9a-b7c8-f195c76c10ab",
        "cursor": {
          "ref": "e4223a7d-b145-4656-9df9-f237497821aa",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c0fe4ccb-3c5d-472b-8455-3235903eb032"
        },
        "item": {
          "id": "29d94ee3-3d6b-4d9a-b7c8-f195c76c10ab",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d4318186-36ff-4cdc-b42c-0d9275e6488c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "29d94ee3-3d6b-4d9a-b7c8-f195c76c10ab",
        "cursor": {
          "ref": "e4223a7d-b145-4656-9df9-f237497821aa",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c0fe4ccb-3c5d-472b-8455-3235903eb032"
        },
        "item": {
          "id": "29d94ee3-3d6b-4d9a-b7c8-f195c76c10ab",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d4318186-36ff-4cdc-b42c-0d9275e6488c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "cd5f4b01-6923-4b3f-bccd-a1e22d7f92c0",
        "cursor": {
          "ref": "320bba22-94e8-4a5a-962d-c95be102e50c",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e1c08850-8382-4997-8b0b-c0d82a05e399"
        },
        "item": {
          "id": "cd5f4b01-6923-4b3f-bccd-a1e22d7f92c0",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f183f5a6-9d7b-4461-885c-1b01d2d62eb1",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "aecdd8d9-5fb5-4459-a741-846039bd523e",
        "cursor": {
          "ref": "ea28e290-4173-420b-84bb-2370bdeab4f0",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9c47d48c-32c0-470c-a78e-78b5d07c308d"
        },
        "item": {
          "id": "aecdd8d9-5fb5-4459-a741-846039bd523e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "15a23f60-5419-4bb3-b2df-798cfd53f067",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "25dde7be-7423-4471-8ce5-cffdebbddeba",
        "cursor": {
          "ref": "467dfa9c-9c9f-4fa5-94e8-27ac0901ed83",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "276fb954-4df5-44eb-9271-fa2889dc1e52"
        },
        "item": {
          "id": "25dde7be-7423-4471-8ce5-cffdebbddeba",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c942910e-339a-43f8-a180-203a61710b1b",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "f76ae1e6-7233-430b-a6c9-bbb98fe0880a",
        "cursor": {
          "ref": "00a60941-27f6-4be9-8e2b-7e80f80fc757",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2847500a-59d8-4b33-8d75-4eec23846ee8"
        },
        "item": {
          "id": "f76ae1e6-7233-430b-a6c9-bbb98fe0880a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5d94194d-3d8c-49e7-b6c6-b776889117be",
          "status": "OK",
          "code": 200,
          "responseTime": 954,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "ef395c5b-0873-4585-8e57-27ec712c22e4",
        "cursor": {
          "ref": "51fcac3c-16ec-4436-9323-935ec84fd97e",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "758584c5-e41e-4d0c-b2fe-01cb3b2e2246"
        },
        "item": {
          "id": "ef395c5b-0873-4585-8e57-27ec712c22e4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b52ef93a-e261-4a4f-b58d-03ff67dbbe00",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "ee14755c-4709-4809-8612-d85f81e3eafd",
        "cursor": {
          "ref": "4f70ea1f-ec0c-4235-83cd-3fef2952fcfe",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "76d81aaf-4916-401b-84f1-787f4077ac90"
        },
        "item": {
          "id": "ee14755c-4709-4809-8612-d85f81e3eafd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "dd2bcce1-15c0-465a-9af2-5c2a8a806cbe",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "7baeafb1-9428-4526-85fa-0801d742431d",
        "cursor": {
          "ref": "5f28a655-36fc-44d5-be4d-7182f6b43c7d",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "63a91eb8-9aa3-47b0-9884-707c4e8c4147"
        },
        "item": {
          "id": "7baeafb1-9428-4526-85fa-0801d742431d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "14e51839-789c-4307-a53d-039930c7a39c",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "67fccc55-747d-4233-b50e-0fedf91a3e2e",
        "cursor": {
          "ref": "f86e616f-2b32-421e-a3a6-4382642d5e50",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "799b5782-6578-4418-b6e4-c5ef6427b3d3"
        },
        "item": {
          "id": "67fccc55-747d-4233-b50e-0fedf91a3e2e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7676bc63-6d4f-4d2e-ad1a-2d1b81ab5816",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "0157bc18-99f6-4308-8a81-ba1a71b321ab",
        "cursor": {
          "ref": "03aa3ef3-e691-4880-aeee-5161c69be231",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "60710a2c-d7de-4a23-8e14-98a97c8c9aa9"
        },
        "item": {
          "id": "0157bc18-99f6-4308-8a81-ba1a71b321ab",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8431a1d8-c990-4ea1-b264-cc53871c71e4",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 78
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "7ed3ad7e-1189-426b-94e3-5e7ff0ef468d",
        "cursor": {
          "ref": "8b844738-3622-4ec1-90b5-ec46bd67e468",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4ad45717-93b3-4dc3-9ae0-b5b828bdb4b5"
        },
        "item": {
          "id": "7ed3ad7e-1189-426b-94e3-5e7ff0ef468d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7fc9fb37-7f30-47a2-a147-c0fd1f7eb5a3",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "da5726ce-c48d-461b-924f-0b9c6f88dd2f",
        "cursor": {
          "ref": "d87121ca-4c8e-4a0b-9b32-63e863d94a16",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0177cc3d-1023-468a-856c-27e8e936af9c"
        },
        "item": {
          "id": "da5726ce-c48d-461b-924f-0b9c6f88dd2f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2e0c1151-de14-43f9-9c71-44ed90be2557",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "92629f72-c281-4245-b91c-d18c20c7f1e4",
        "cursor": {
          "ref": "a76a45c5-70c9-4642-9829-ee11936c9229",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f6337411-554b-43b0-be53-288684c8bcd3"
        },
        "item": {
          "id": "92629f72-c281-4245-b91c-d18c20c7f1e4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6c1d2644-780b-4cdc-a4ad-f25f386b5c4d",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "85a91110-ffe9-4bc2-aaaa-bcfd12378f1f",
        "cursor": {
          "ref": "57d1449c-bf3f-4133-8585-0136befbe85e",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "71803c5f-559f-4c85-b4be-66cdaaa8efb9"
        },
        "item": {
          "id": "85a91110-ffe9-4bc2-aaaa-bcfd12378f1f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "14167d11-7971-4843-9bd2-903dfc2bcac9",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "19442423-da50-4635-9dd5-713f6a8ec2ea",
        "cursor": {
          "ref": "845ad3e8-0e69-4d6d-a3dc-08d31e183dd8",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "aa03c518-c3f6-47cd-a191-23e2421a7398"
        },
        "item": {
          "id": "19442423-da50-4635-9dd5-713f6a8ec2ea",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7ec5e24b-edc1-43e0-b852-dcab753752bd",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "f214ddc5-8102-4dde-93f9-e4b35bf00c27",
        "cursor": {
          "ref": "4f3dbaf7-4daf-47be-bab5-0a6d41e5d9de",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e065f0f1-6ead-4899-8551-d932d008976c"
        },
        "item": {
          "id": "f214ddc5-8102-4dde-93f9-e4b35bf00c27",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "732b5c16-b69d-48df-83ce-49c7d9698a72",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "b8f42cd7-6abe-4f2a-aca2-66176eac7033",
        "cursor": {
          "ref": "d24aa913-47f8-4a2b-9499-992568c7a66e",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5d936d3f-016a-436e-838f-d6fa83c3e4f7"
        },
        "item": {
          "id": "b8f42cd7-6abe-4f2a-aca2-66176eac7033",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8e792812-4315-4291-9567-4bd36c4d9a05",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "355ed0e5-41cf-4611-bc70-ef1a7218502f",
        "cursor": {
          "ref": "f018ec7d-6939-42f9-a27a-e76b9a91898d",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e55f4e2b-3d11-4740-b5a3-49b969304551"
        },
        "item": {
          "id": "355ed0e5-41cf-4611-bc70-ef1a7218502f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "53d316f3-f81e-40a5-b1db-6456c909fcec",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "55a51291-4c72-43a3-b5d0-069b24488974",
        "cursor": {
          "ref": "cfd9524c-fd88-4be4-9eb8-cfa17d8b1986",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d6ad998a-4ff9-447e-bdbf-97ad0344e135"
        },
        "item": {
          "id": "55a51291-4c72-43a3-b5d0-069b24488974",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "056aea30-3cd0-4332-b792-002b215cb7fa",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "08175848-5330-4673-97a8-bd43091e44c5",
        "cursor": {
          "ref": "2ae2ec4e-0d9a-427e-8d0f-45ab800924a7",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e130bc71-c686-46c4-a05a-e69054b1b88b"
        },
        "item": {
          "id": "08175848-5330-4673-97a8-bd43091e44c5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0aec9d3b-4e89-4a25-ac92-de25e0ba4dd8",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "bd43a867-7dc5-43a6-b694-f292a05ddbff",
        "cursor": {
          "ref": "9e11d058-ef65-4991-88be-a73846b475e9",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e7e400a3-2469-4cda-ba60-f2ab5225c0b8"
        },
        "item": {
          "id": "bd43a867-7dc5-43a6-b694-f292a05ddbff",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3b4068cf-2b49-4b91-ac32-dcf0a57ab05a",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "86ff9421-d555-47e4-8b59-af645423b512",
        "cursor": {
          "ref": "d8330f55-225f-4667-bd8c-a84283419258",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "827b6075-98d3-4b92-bc56-12cb1531ab0a"
        },
        "item": {
          "id": "86ff9421-d555-47e4-8b59-af645423b512",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "27743c58-b10c-4c61-b7e3-67542aa820ea",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "b5184352-8d71-47cc-b476-b7cba5c45494",
        "cursor": {
          "ref": "933df2de-89a2-4803-8755-cf10da527159",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a2125ebe-317b-4147-9602-637b362672cb"
        },
        "item": {
          "id": "b5184352-8d71-47cc-b476-b7cba5c45494",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d0accc8e-e246-4e41-b7f9-1566dc087af4",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "58cadfd4-724e-439b-ade1-180dc53e3d26",
        "cursor": {
          "ref": "3357caa6-472d-4d67-8fde-c035bd64f499",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e54678c2-8051-43ab-a562-fac662230fb1"
        },
        "item": {
          "id": "58cadfd4-724e-439b-ade1-180dc53e3d26",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e2fd4254-185c-44fb-92b2-b5d368cd0187",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 79
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "5290c253-944b-4a4b-96c8-2498e4318428",
        "cursor": {
          "ref": "1510313f-9b36-4ebf-b724-d04cb7d0b408",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7905d5fa-3b3b-4f29-8313-3c2f61a050ac"
        },
        "item": {
          "id": "5290c253-944b-4a4b-96c8-2498e4318428",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a7a81865-44d8-46d9-a16e-cf680b82024e",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 79
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "09cfa846-0691-4044-a0b7-6cf0f81e6d86",
        "cursor": {
          "ref": "583708f7-646d-4d95-8f81-53d3ff91f893",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c562c208-09bd-4011-a055-dda70fc2d275"
        },
        "item": {
          "id": "09cfa846-0691-4044-a0b7-6cf0f81e6d86",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "23cb4ecd-28e2-4912-8993-3de7e9154717",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "fe1e38be-ee67-43c4-a406-6cbfee774a84",
        "cursor": {
          "ref": "2f12867c-2d31-41ef-b332-82e1624b95ff",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6290912a-b1c7-45b3-968a-2cfebf04160b"
        },
        "item": {
          "id": "fe1e38be-ee67-43c4-a406-6cbfee774a84",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c30b86a6-2d53-44aa-b8b2-1b22f2313e28",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 79
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "a5f14a93-77e5-47f6-ac7a-8283164559c9",
        "cursor": {
          "ref": "e2912b07-38d1-4fae-9a09-ed8565a10187",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "cd5ce37e-90e5-4636-9c72-7c62f98e3bb1"
        },
        "item": {
          "id": "a5f14a93-77e5-47f6-ac7a-8283164559c9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c6cdef4c-1619-4580-a03a-1f1654e99b58",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "1c5fa00d-6b7c-49fe-99b6-b40e5afb0df7",
        "cursor": {
          "ref": "1d274e9c-154f-4629-8b2f-87c457c3fe29",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9505e253-b23f-4276-8e74-920c9ceefd3b"
        },
        "item": {
          "id": "1c5fa00d-6b7c-49fe-99b6-b40e5afb0df7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "22210a91-6ba3-4dc5-827f-235fcce8463a",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 79
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "70eea3bd-9ac6-4a76-9dab-4ade092371ad",
        "cursor": {
          "ref": "693bfc64-a082-47aa-bb06-0bc8ecdd47f5",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8d7b12b8-744a-4003-84bf-9f61f72fb77c"
        },
        "item": {
          "id": "70eea3bd-9ac6-4a76-9dab-4ade092371ad",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "39d891bd-24e3-41fe-9225-7b2c88ea404a",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "a508a652-a311-443b-b593-d4b4d363ac6b",
        "cursor": {
          "ref": "fa0f4523-597f-43bc-a331-5c0f9d231c47",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "21e87530-6076-43aa-95d0-a6d321dae724"
        },
        "item": {
          "id": "a508a652-a311-443b-b593-d4b4d363ac6b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "df34ca92-1b1a-4cc7-9b77-d32f2ce9ed81",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "f1274c3b-c352-46e0-aba9-a6f6e3cc0360",
        "cursor": {
          "ref": "c95db1d8-55a6-4a1b-9f40-71fd8fdbd720",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7ce178a9-6b63-4a4d-ab25-d8b6a0cc0e42"
        },
        "item": {
          "id": "f1274c3b-c352-46e0-aba9-a6f6e3cc0360",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0a54ecde-c4c9-46b2-8636-fd3e4faf1100",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "44a0b56a-f025-4c82-87da-efa63984434c",
        "cursor": {
          "ref": "70546913-1d9d-468b-b3fc-dde1ce213e8b",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "82364136-4d3e-4e69-8da0-af9336bfa435"
        },
        "item": {
          "id": "44a0b56a-f025-4c82-87da-efa63984434c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "125b9c33-876b-43d9-bbf2-9e541b61593d",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "6a91f622-27fa-423c-aea1-099c0a494060",
        "cursor": {
          "ref": "ada5a1d7-79b8-40c0-97ba-7a69721ba360",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3b164d6b-a61d-411f-ac97-06e9813b96a4"
        },
        "item": {
          "id": "6a91f622-27fa-423c-aea1-099c0a494060",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9b0de8d1-3556-4ac5-89d5-f4e14be373e5",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "9e34f5a1-4a75-472a-8129-a97e0c6005f2",
        "cursor": {
          "ref": "30f6fca3-148a-4b12-9265-13fbca2573c3",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2e19450c-f1e4-4499-99f8-6ef2f59fc969"
        },
        "item": {
          "id": "9e34f5a1-4a75-472a-8129-a97e0c6005f2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "71fd9952-234c-466f-8904-e2f7b8fbc5ed",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "1d16b598-0fb2-4474-a70d-54b1d8e45ab9",
        "cursor": {
          "ref": "74088c90-92e2-4807-9e2b-33b1e341bd92",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6058dbb0-8989-4d43-890f-bcc74fc68d34"
        },
        "item": {
          "id": "1d16b598-0fb2-4474-a70d-54b1d8e45ab9",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "dbe689da-36cb-4498-a77e-7454cb146880",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 60
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "a6e6b25f-93ce-4668-be7d-eda8a8012545",
        "cursor": {
          "ref": "d484be2a-3314-44dc-b6fa-d717ea06ce6c",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "44cc8330-d11a-4db2-922c-68da29943c67"
        },
        "item": {
          "id": "a6e6b25f-93ce-4668-be7d-eda8a8012545",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0fa3f80f-7bd3-4da1-834f-c0560f2b5179",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "1c5adcc4-7af5-45b4-b366-7926eaa68580",
        "cursor": {
          "ref": "9527bdf6-69b0-4c03-8d51-3f0705010f00",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "917ac488-4e5d-4d6a-88be-4a08c22b35a6"
        },
        "item": {
          "id": "1c5adcc4-7af5-45b4-b366-7926eaa68580",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b8de3509-ba1f-4f7e-b327-5f49330236fa",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "3ffc00a6-2401-48b4-ba31-f2954fe2090a",
        "cursor": {
          "ref": "d7d8b3bd-1bd8-4793-bfe6-c62b68427648",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8b2ceb40-1016-4049-95c4-b0c890a07302"
        },
        "item": {
          "id": "3ffc00a6-2401-48b4-ba31-f2954fe2090a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fa2cddb8-e107-4807-983d-b6ccadd456dc",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "49504696-1dc5-4b38-ac9d-7272aca89e5d",
        "cursor": {
          "ref": "dc98a2ad-19d6-4bf6-a51f-97c27eef70b3",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2f72dfaa-83ed-4c1a-8a10-691fe5a68a68"
        },
        "item": {
          "id": "49504696-1dc5-4b38-ac9d-7272aca89e5d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d912722e-68ad-474f-b86b-b151d1e25cd5",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 60
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "8986491d-e734-420e-8f8f-f7c672f0f61b",
        "cursor": {
          "ref": "f48b94ad-9c0c-431c-9a21-047860646af8",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "bc8fe6e5-153c-40be-8dc8-6db54c3e568d"
        },
        "item": {
          "id": "8986491d-e734-420e-8f8f-f7c672f0f61b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c4f5eda0-40e1-40a4-9a71-3ea71e4c01ab",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "4140b37b-28bf-4596-8316-71b629d94d57",
        "cursor": {
          "ref": "e638d57d-e532-46f3-938a-030cb48b1a6f",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "fb924a1e-4e56-445d-b62f-de899ea969c6"
        },
        "item": {
          "id": "4140b37b-28bf-4596-8316-71b629d94d57",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c9527264-882b-473d-856d-3d1fa6203675",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 60
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "2a917553-2ca5-4ed8-87a0-430aab1c03b9",
        "cursor": {
          "ref": "21250bcb-a9f8-4d69-ab16-f66ec1e8d41b",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2112cd13-1dd2-46bd-87b4-f10d1c37717e"
        },
        "item": {
          "id": "2a917553-2ca5-4ed8-87a0-430aab1c03b9",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d08c7f94-c56a-4353-b3ed-3c50642f7576",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "c7c87651-ca90-4c7c-859a-c8aa4055d155",
        "cursor": {
          "ref": "ca6c359b-301f-470b-ac0e-cec9cbac56b3",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3fa6a389-541b-4116-8907-87c89d7f9300"
        },
        "item": {
          "id": "c7c87651-ca90-4c7c-859a-c8aa4055d155",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f7772e08-88c8-428b-b2e7-9fb613a6ab04",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 60
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "7ae6890d-b253-4726-a694-fac242da9d20",
        "cursor": {
          "ref": "5da4d26d-bc51-4f33-9c70-406c9f123241",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "73abcf54-7a6f-4f82-9bd5-762b49b13408"
        },
        "item": {
          "id": "7ae6890d-b253-4726-a694-fac242da9d20",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "582c74f4-f0ab-436c-921e-3408b9d82cc8",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "818cbcb5-95ed-429e-91c4-462723c68293",
        "cursor": {
          "ref": "00033dc4-5bb9-4958-8ab6-828f522363ae",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "908a1087-b729-46df-bf02-181817369feb"
        },
        "item": {
          "id": "818cbcb5-95ed-429e-91c4-462723c68293",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6ac8c734-0aae-4c8b-9bf4-cca373f33d34",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 72
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "8ab7502a-3df8-4ddf-afed-56d30553b9d6",
        "cursor": {
          "ref": "600211bb-14f4-46ee-a7b6-a6330a6d1ab9",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "81ecdcff-6932-43c6-9595-54fa035ce5fa"
        },
        "item": {
          "id": "8ab7502a-3df8-4ddf-afed-56d30553b9d6",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "69f642da-96fe-435d-a798-a395e7baf079",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "65670469-f7ab-4681-9e8b-93e67b829718",
        "cursor": {
          "ref": "ab97b415-b3f8-4d4c-9d49-568401e5b948",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e5626a2a-3930-4f7b-bf44-d4a05d3a7b1e"
        },
        "item": {
          "id": "65670469-f7ab-4681-9e8b-93e67b829718",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "93920618-272c-4792-8ed4-b0baa3195d83",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 72
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "9b788584-be98-4ef7-9d6c-be45588748d8",
        "cursor": {
          "ref": "43f68a1e-2df2-4d10-a12d-9af92812aca5",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "43f2168b-dec1-4b5b-8c7c-e5ea0f65cc66"
        },
        "item": {
          "id": "9b788584-be98-4ef7-9d6c-be45588748d8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "21bd5822-f53c-4356-b3be-e43818d26ba2",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 76
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "75fd125c-094f-41b3-82d3-b3e2858ef8be",
        "cursor": {
          "ref": "6e729cfe-436e-4df2-a897-f36f22672d96",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e7b48b96-80df-4113-83c2-47ae2d24f1f5"
        },
        "item": {
          "id": "75fd125c-094f-41b3-82d3-b3e2858ef8be",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c3c148cd-ef41-4e6e-92a8-fc4ee7fdd895",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 72
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "2bd5e949-fd38-46eb-8327-3e8b186a1f14",
        "cursor": {
          "ref": "ab54ad63-d80c-40df-9982-568882a4eed4",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4e9576df-ade9-4b05-ab04-f69c4feaa289"
        },
        "item": {
          "id": "2bd5e949-fd38-46eb-8327-3e8b186a1f14",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f94e6436-b4d2-41ec-911a-68a7a87caabd",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "4177f32d-fc9c-4168-834c-44b75c97695a",
        "cursor": {
          "ref": "0b63cd7a-7586-4942-be8b-9c8cd485022b",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "937847b9-76d2-495e-9425-aec055cede0e"
        },
        "item": {
          "id": "4177f32d-fc9c-4168-834c-44b75c97695a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "300a4fd3-9eed-460f-af4e-b1f04f837c8f",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "9aafdfea-733f-47f9-847d-9e0d05ad5647",
        "cursor": {
          "ref": "e3efae0f-e7d4-467f-9a88-c6a2f010b1fa",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0fd1a39b-fbe1-46b0-971a-3b56541740b6"
        },
        "item": {
          "id": "9aafdfea-733f-47f9-847d-9e0d05ad5647",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "30c84730-643d-4846-8ac5-8f3d0392be67",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "ae40a54e-5db5-4b78-b655-9572204957c0",
        "cursor": {
          "ref": "7ae9b688-b392-4939-a956-d6e6073a8c12",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "97962fcb-c6f0-470b-84b8-8864fda38da9"
        },
        "item": {
          "id": "ae40a54e-5db5-4b78-b655-9572204957c0",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "82046b63-605b-4bd9-8af0-9439eae476e5",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "fcafcbd6-d7e3-441c-9672-4522d9a6ab13",
        "cursor": {
          "ref": "f8911919-ce08-41f7-96ed-0e0369dce712",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "42ae87cd-6ed4-4021-8116-1b3136575888"
        },
        "item": {
          "id": "fcafcbd6-d7e3-441c-9672-4522d9a6ab13",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e99a4792-54ec-42db-bed4-7f233f58ed7a",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "7108e640-8b87-4f88-957f-3493e6200214",
        "cursor": {
          "ref": "544c4f0d-6743-4bf6-9b1e-984eda604c43",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3ef39c54-a5b4-4c64-9635-c9bffd4f24f5"
        },
        "item": {
          "id": "7108e640-8b87-4f88-957f-3493e6200214",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b6c7d8e9-8fce-4a07-92af-7bdc512a1c70",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "2ca76171-1069-4220-9a7a-6ba5970494ba",
        "cursor": {
          "ref": "c570d348-f5b8-4f20-b54f-b7b9bf4994a1",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "cda493c5-7fde-4c96-8d15-60fc800a0f95"
        },
        "item": {
          "id": "2ca76171-1069-4220-9a7a-6ba5970494ba",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6bb393cc-9bd1-4ccc-8167-21d30880d276",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "30dbd713-9ce9-4757-ae65-ced665a83a0d",
        "cursor": {
          "ref": "ea00ad9f-9f0e-480e-bc10-4f47ed8bd10b",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "842a02bc-851c-4067-ab96-0a46dc0f7553"
        },
        "item": {
          "id": "30dbd713-9ce9-4757-ae65-ced665a83a0d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a17aaef7-1fd1-4fd7-aff5-4369ae7e4a01",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "f75a4be0-483f-4a25-bbe2-456ce2f6f60e",
        "cursor": {
          "ref": "21b86e65-7410-40e1-81d5-9ca934faabb6",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "edfd2c92-a107-465e-9d3e-70dc108a4109"
        },
        "item": {
          "id": "f75a4be0-483f-4a25-bbe2-456ce2f6f60e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0415ca7d-7b9e-41c2-b438-a05ffd90323d",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "f7b0fc54-c968-43ed-b940-1fb7a1acaa98",
        "cursor": {
          "ref": "a6802254-de53-4b4f-8b58-1e82b4ac81ab",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ac933858-1d86-4548-ac25-888a701b064f"
        },
        "item": {
          "id": "f7b0fc54-c968-43ed-b940-1fb7a1acaa98",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9a2f0459-0bcf-4035-9475-5e47a9ed29ec",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "7fee16ad-252f-48ec-8166-d56e24505287",
        "cursor": {
          "ref": "737e90bb-6db0-48cb-bd08-db4ce51db791",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1b73db79-7259-4a78-b8ac-45569bb4f04d"
        },
        "item": {
          "id": "7fee16ad-252f-48ec-8166-d56e24505287",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0de03a17-8c39-47dd-991b-b3fdcbc702e2",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "e8107b25-650a-48b0-a69a-457de46a00e8",
        "cursor": {
          "ref": "997a0ece-89dc-4c98-ba8c-74a25d22aaa0",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f57b4392-f2e2-4aba-ac0a-a1c96b95147f"
        },
        "item": {
          "id": "e8107b25-650a-48b0-a69a-457de46a00e8",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "78a4b696-61de-4c11-8887-632be19a4dd4",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "7a4da73a-ca11-49be-9797-fa1e06ca7d80",
        "cursor": {
          "ref": "3b7f66d0-e16f-469c-b5df-418c83c048b5",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "78e6e283-b190-47f0-9b02-da65e3b5f08e"
        },
        "item": {
          "id": "7a4da73a-ca11-49be-9797-fa1e06ca7d80",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c2bd1618-1949-4a01-9a36-f716be3762b1",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 94
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "35305630-06f6-4344-8879-ab73abca0759",
        "cursor": {
          "ref": "b7655d13-6d53-4b52-803f-e5f753a0bbd3",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "eefa298a-885c-42ce-b5fa-8e150bdb935a"
        },
        "item": {
          "id": "35305630-06f6-4344-8879-ab73abca0759",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "62dc181c-81ff-4d14-9d30-9b051c8f386f",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "14564a77-f8d7-44de-b3b0-cc21424c056c",
        "cursor": {
          "ref": "efa06742-98b5-4610-a53c-ea87b263e9ce",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c90dfdfd-ad8b-4c67-bc35-32c345f6b3ed"
        },
        "item": {
          "id": "14564a77-f8d7-44de-b3b0-cc21424c056c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ad722de6-60f7-4be9-8585-a44cd1b19271",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "cc2fe77f-f87f-4f52-8ae4-5b803583286b",
        "cursor": {
          "ref": "bce529da-bcde-4e82-92c4-cb7e727b9337",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2b964707-d645-4a6b-99a2-2c1ae4f092d3"
        },
        "item": {
          "id": "cc2fe77f-f87f-4f52-8ae4-5b803583286b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d209d6d1-6738-4c6e-b704-f796a23193fd",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "a200a861-3dbb-4595-a17d-684796d1365a",
        "cursor": {
          "ref": "9ffba5ef-09f7-4acb-85de-67aa63267b03",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c9cae69c-e6d9-4eac-9b5e-b2b8be6ec72a"
        },
        "item": {
          "id": "a200a861-3dbb-4595-a17d-684796d1365a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e47c17c2-9d20-48bf-b22f-ba29d52a95f8",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "d34eff47-6bb3-4aa0-b8cb-27e2240db3d5",
        "cursor": {
          "ref": "0f174c5e-46d9-4346-93bc-5dd3e59dc293",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "db375a8a-030a-47ba-8ebe-715f6a8d8453"
        },
        "item": {
          "id": "d34eff47-6bb3-4aa0-b8cb-27e2240db3d5",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9d537b0f-adc7-430b-9699-6f6d9a5fa14c",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "94257b0a-8e77-479d-bbd1-d0ec13539c0f",
        "cursor": {
          "ref": "2aa390d5-8e70-4537-ab91-94e45c7e1587",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d28727d9-87b7-4fac-a25f-bc6a01b6e446"
        },
        "item": {
          "id": "94257b0a-8e77-479d-bbd1-d0ec13539c0f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4e81378e-bec0-46aa-b77a-4ec4d8de508d",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "13d490b2-22ed-4d59-bd16-05d843a7e143",
        "cursor": {
          "ref": "e8d83d31-10c3-443a-a562-4cda7fe500a0",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2f634d8a-c567-4ac6-b386-918e2552b928"
        },
        "item": {
          "id": "13d490b2-22ed-4d59-bd16-05d843a7e143",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3db63d7f-756c-4da2-944d-5c12a4b507b3",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "243ce00a-4237-4c7b-a988-56690b9c74b1",
        "cursor": {
          "ref": "5e402810-23bb-4791-9078-049f7454ac75",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "59c3b0bf-ec59-4fe0-94b5-f82d15c6ec8e"
        },
        "item": {
          "id": "243ce00a-4237-4c7b-a988-56690b9c74b1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0683a548-eec3-4788-bef4-7896580921cb",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "e174b0ad-a323-4809-8ac2-701c43f01a5c",
        "cursor": {
          "ref": "15942608-c4e0-4f27-83d0-7ea3ff0033fb",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "420aa3da-3554-492a-8f89-f024cfa9bab0"
        },
        "item": {
          "id": "e174b0ad-a323-4809-8ac2-701c43f01a5c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6d8ca157-5138-4a82-9446-3013965b6402",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "b2ee75bd-0fdd-4c46-9c6e-d0d17b507043",
        "cursor": {
          "ref": "54623bf3-aa58-454b-8c73-0c50ca8ac2e5",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bb114a3b-00c7-4eb0-9689-6742de825428"
        },
        "item": {
          "id": "b2ee75bd-0fdd-4c46-9c6e-d0d17b507043",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "103b3c17-b11c-48fc-a841-88744485947a",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "68adce77-b3cb-4b4d-b7a6-cc0d1e49b040",
        "cursor": {
          "ref": "925cfac7-340d-4419-a9b7-0eda47149b49",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f5d20420-6765-4b62-b571-73ba537bf116"
        },
        "item": {
          "id": "68adce77-b3cb-4b4d-b7a6-cc0d1e49b040",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "dd9bcfd2-24a7-461b-b153-446bfb7f2691",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "912a22d4-0b18-4a34-bec0-74ffca446198",
        "cursor": {
          "ref": "e8f15c92-2888-49cd-9bd4-e18fe0cad6ac",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7ebfa329-7e39-4d0c-8c1c-3b490ea8d6ef"
        },
        "item": {
          "id": "912a22d4-0b18-4a34-bec0-74ffca446198",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "016d6759-d23b-4c41-bc4b-0e4b23d4d6d1",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "45696519-03f6-4f58-9b7f-14aa133ac24e",
        "cursor": {
          "ref": "6a673709-7741-434a-8eca-cb54e9ac7498",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b4750f22-2934-4684-98aa-11eac47e4cc6"
        },
        "item": {
          "id": "45696519-03f6-4f58-9b7f-14aa133ac24e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "159de986-bf17-4da3-acff-2a25af3e15a4",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "304579be-0d23-4d06-9d43-25125a9a6f31",
        "cursor": {
          "ref": "6dcbd96c-3de8-44dc-843a-deae0d84d78e",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c93a559e-b5ef-442f-920e-54745526df9b"
        },
        "item": {
          "id": "304579be-0d23-4d06-9d43-25125a9a6f31",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8cd9e9e9-8ce8-4921-9db9-2a58f7b899d1",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "ba8d919b-603d-41c1-b265-89faffda2c1f",
        "cursor": {
          "ref": "78871286-f568-47ac-9234-2bee6fc89ec7",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "43053c20-0053-473f-90a9-1f9ea848450b"
        },
        "item": {
          "id": "ba8d919b-603d-41c1-b265-89faffda2c1f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b680faf1-2c6e-4dc2-9e8e-df89fcfaeb98",
          "status": "OK",
          "code": 200,
          "responseTime": 529,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ec76cda5-b817-43aa-ae82-f8e24371e16f",
        "cursor": {
          "ref": "dd123375-8f57-4a4d-bf03-8dfdcca4b0d3",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "914e7da3-bb63-42a9-8580-bceb3fc8f34a"
        },
        "item": {
          "id": "ec76cda5-b817-43aa-ae82-f8e24371e16f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "74322478-7ca9-45e3-8869-0ea57aecfc38",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "4cc5d17f-f3da-469b-bb59-799a9d178c37",
        "cursor": {
          "ref": "1ac51620-6b4d-485c-81c0-b9d1ef2d34af",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "9b94ad99-c838-489e-bb0f-bf637077b378"
        },
        "item": {
          "id": "4cc5d17f-f3da-469b-bb59-799a9d178c37",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4727c3fc-7aa3-4473-814a-a04103b7d093",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "3d7a25b5-c54e-4a77-87d5-521d7b459418",
        "cursor": {
          "ref": "ea11b214-a3ef-4121-830f-672c5fce22b1",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e28ac324-87f9-4154-8b14-7d9cc8b531bb"
        },
        "item": {
          "id": "3d7a25b5-c54e-4a77-87d5-521d7b459418",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "653ad242-13d7-4745-8745-f560e1c547f7",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "fdc4efc5-7720-4d0d-8f4f-bf2a69d95c3d",
        "cursor": {
          "ref": "46872e04-ca7c-48b4-81c8-177effb97b58",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e3f13407-6f61-4292-b473-83812eef6759"
        },
        "item": {
          "id": "fdc4efc5-7720-4d0d-8f4f-bf2a69d95c3d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9c9d0c96-b4ac-42a8-affd-4040921b0035",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "2d05ac44-94f2-4c12-b68a-124f1df9d486",
        "cursor": {
          "ref": "a2a98b8e-8f1a-4c48-9ceb-d2baf735e4d3",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "72a59ed8-d07e-4726-8ce8-373136bf9500"
        },
        "item": {
          "id": "2d05ac44-94f2-4c12-b68a-124f1df9d486",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ca47f534-ea29-4998-b5a4-a266f14cc34e",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "f2ac1e0f-9b63-4a72-ae91-332cc7df4534",
        "cursor": {
          "ref": "42e90200-c564-46ec-95f1-fc22e1a85c42",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "35e8f7d0-4ae9-4339-82ef-b4b8c29d6208"
        },
        "item": {
          "id": "f2ac1e0f-9b63-4a72-ae91-332cc7df4534",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c837cafd-4891-40ac-a4db-e4c64778a93a",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "86dc4c0f-5959-4ee8-812f-3a07c1c410fa",
        "cursor": {
          "ref": "95b3ceb9-9c75-4b1f-961b-9fe5e355241b",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8cc66046-635b-4906-a509-4830d037d633"
        },
        "item": {
          "id": "86dc4c0f-5959-4ee8-812f-3a07c1c410fa",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "057c76a3-a84c-4eaf-884c-4f4a53b610cf",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "2d9ef5d2-be16-456c-85e0-6f2476b639e3",
        "cursor": {
          "ref": "06c30ec3-d4ba-4fca-bc3e-7800e3ae8e58",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "dcd79c57-ecd2-48e5-8f84-a9a905f0af32"
        },
        "item": {
          "id": "2d9ef5d2-be16-456c-85e0-6f2476b639e3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9e1106cd-aeee-45ed-931e-52427526a76a",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "e9d9945d-d2bd-4a75-85c5-7b834dba40f8",
        "cursor": {
          "ref": "56c07d13-f40f-46ef-a66f-0f4d2ea8ee69",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "2b0d663a-247e-476e-b932-d09ff222cedc"
        },
        "item": {
          "id": "e9d9945d-d2bd-4a75-85c5-7b834dba40f8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "aa4da083-1d8c-409c-b5bc-f1e4ad4e047b",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "ce47f46d-83d1-4562-98f5-e1de9d50f6e2",
        "cursor": {
          "ref": "55c09409-8d08-4026-b08b-1fd22857d0ea",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3a7b7197-2b67-40c2-bf3e-24b5b1bb8011"
        },
        "item": {
          "id": "ce47f46d-83d1-4562-98f5-e1de9d50f6e2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ff517976-d639-407b-ac89-72fb8500ba13",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "874b6687-ad46-4c9b-b320-3b07c7aeb9d9",
        "cursor": {
          "ref": "134e9abf-7f59-43cd-9527-c207a3291751",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6c532c43-e62d-4f4d-a558-4c275aca0f7e"
        },
        "item": {
          "id": "874b6687-ad46-4c9b-b320-3b07c7aeb9d9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1c313059-274f-4c4d-8d5b-a23a1563f12b",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "356e6840-daf8-476c-99ef-6a11bb2633df",
        "cursor": {
          "ref": "0e41e43d-1952-4112-a820-a39817de9f39",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5e5feae4-2ac4-47c7-9398-05f762cf4e85"
        },
        "item": {
          "id": "356e6840-daf8-476c-99ef-6a11bb2633df",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "33d8b9ab-9761-48f0-abb7-de68bdbec571",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "673fad97-776b-4f8d-93b3-7b46e04e3ea6",
        "cursor": {
          "ref": "ab88b37a-2a64-4bcc-bdaf-35df251142e5",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "fc45cb6f-1a5c-48b1-b872-822fc23c6f72"
        },
        "item": {
          "id": "673fad97-776b-4f8d-93b3-7b46e04e3ea6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "dd3e0286-20a6-4d1b-940b-0b8c437ffea0",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "209ec043-1b21-4fda-bac5-c4f5595305fe",
        "cursor": {
          "ref": "6b7ae593-f9e6-4ab9-b62d-1eeaf5134085",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "78dbb23c-dc10-4bc7-a5d7-da0e29b8d54e"
        },
        "item": {
          "id": "209ec043-1b21-4fda-bac5-c4f5595305fe",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "af9073d6-ebe7-4c87-a62c-c9e1ec9f9be4",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "39cde3e9-9fbb-4c65-8192-1281445c1e31",
        "cursor": {
          "ref": "153976b1-3932-460e-b1bb-a30158d8b434",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9e4d4f97-0cb7-491d-9952-aea4d033d87e"
        },
        "item": {
          "id": "39cde3e9-9fbb-4c65-8192-1281445c1e31",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1a95d23a-13de-4ef2-829a-17df68b29807",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "4cae7c1d-15a8-4437-b21e-1498b2a8587f",
        "cursor": {
          "ref": "fb6641aa-84d4-45b0-a812-3faf51343992",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "693785b1-603e-426d-998f-f72d593cdcb1"
        },
        "item": {
          "id": "4cae7c1d-15a8-4437-b21e-1498b2a8587f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0b37ae66-5bde-41a1-9748-de90e2ae88d9",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "018435bd-d63a-477b-9fcd-d3d9bb50b889",
        "cursor": {
          "ref": "417eee7f-3466-4146-b7d2-56f4ad535f48",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bcbdebb2-9fa3-4f8d-a82f-5ce96b7b1115"
        },
        "item": {
          "id": "018435bd-d63a-477b-9fcd-d3d9bb50b889",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a23eddca-20df-4e07-b786-236e31ed201c",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "5f2e56c6-bb9c-4e54-ac7e-0385d151029d",
        "cursor": {
          "ref": "52223752-0ebe-40e1-ae85-901b47f36573",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "36f60ae9-ea8f-44ec-a266-fe8ac92d1074"
        },
        "item": {
          "id": "5f2e56c6-bb9c-4e54-ac7e-0385d151029d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f4842f83-950d-45a6-9c4c-69a0554934ca",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "91a6522e-f60d-41b7-82b0-727a3d173039",
        "cursor": {
          "ref": "9802a235-acb1-45ce-b642-6cfe5a987f99",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "45bc785b-dfbc-449e-b471-7a342abd1f7b"
        },
        "item": {
          "id": "91a6522e-f60d-41b7-82b0-727a3d173039",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1f417f7b-5d68-4069-a2bf-3c98f478a5de",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "23d66e41-69cd-4151-b136-e9ad2097dbec",
        "cursor": {
          "ref": "3ae3fab6-61b0-48a8-9fbd-6ab5f8ee47ab",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c70ed9f7-ca48-45ae-9b66-b3389023b6ab"
        },
        "item": {
          "id": "23d66e41-69cd-4151-b136-e9ad2097dbec",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "42cdb915-5fcc-47fe-ac72-7f7d4bf9d7eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "4b5dc376-7947-4cea-819b-a6d4d91e824b",
        "cursor": {
          "ref": "86431e86-c900-40ab-8c5c-d88d5b41335d",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4bae640e-e364-44e0-bee3-67facf634870"
        },
        "item": {
          "id": "4b5dc376-7947-4cea-819b-a6d4d91e824b",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "e6dcf341-57a9-4ec7-bb69-d97fefd6ba1f",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "6b908745-7fc3-4baa-aefd-1c61b41f10d3",
        "cursor": {
          "ref": "c7edac6c-d579-48a2-beff-f131655b4276",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3713b1d5-8d37-4084-8081-db6ff960a0bd"
        },
        "item": {
          "id": "6b908745-7fc3-4baa-aefd-1c61b41f10d3",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "374ec5e9-3890-4b48-a085-b642bbc2feba",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "21a13fc1-f850-4d9b-addb-46ee17a3657b",
        "cursor": {
          "ref": "a2d78da3-ea5a-40ff-bf14-6807114b1c3f",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "646fed0b-2bc2-49bd-a54f-9adddcc5f32c"
        },
        "item": {
          "id": "21a13fc1-f850-4d9b-addb-46ee17a3657b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "09f053f2-0d16-4b21-9a77-189ddd986db0",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "2ca13a70-4977-4911-92aa-a29f6fd3c30b",
        "cursor": {
          "ref": "bc76021d-58a8-40f5-ab35-a66853ecd313",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "fa592f02-3ca7-4b2c-b6b4-43e34d6065a1"
        },
        "item": {
          "id": "2ca13a70-4977-4911-92aa-a29f6fd3c30b",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "d1be9629-cb55-446f-90aa-838a74487ee9",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "c1eb5502-d828-4310-b923-7fe2b9a08655",
        "cursor": {
          "ref": "9803703d-53a0-404d-8e17-9b6b76c49146",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9e4ccedd-66fc-45b8-a9cb-2a74712bf4c5"
        },
        "item": {
          "id": "c1eb5502-d828-4310-b923-7fe2b9a08655",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6fca73f2-d9ae-451a-9190-8407f9bd25c5",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "55b53493-ca1e-4347-b59a-d3ac7b79aba5",
        "cursor": {
          "ref": "b309eebe-c6b8-46e2-97dd-b38d8fb25d7c",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d82e7d38-e0e7-4b35-93ca-9acc7544a7a7"
        },
        "item": {
          "id": "55b53493-ca1e-4347-b59a-d3ac7b79aba5",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "55b53493-ca1e-4347-b59a-d3ac7b79aba5",
        "cursor": {
          "ref": "b309eebe-c6b8-46e2-97dd-b38d8fb25d7c",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d82e7d38-e0e7-4b35-93ca-9acc7544a7a7"
        },
        "item": {
          "id": "55b53493-ca1e-4347-b59a-d3ac7b79aba5",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "55b53493-ca1e-4347-b59a-d3ac7b79aba5",
        "cursor": {
          "ref": "b309eebe-c6b8-46e2-97dd-b38d8fb25d7c",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d82e7d38-e0e7-4b35-93ca-9acc7544a7a7"
        },
        "item": {
          "id": "55b53493-ca1e-4347-b59a-d3ac7b79aba5",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "9518d596-d5a4-41b3-8f69-0215781b0f2c",
        "cursor": {
          "ref": "7f311464-f5f4-4ab7-82d5-aa1ab2909188",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "606d22e3-dc82-4ea5-8636-f7630a8f51f7"
        },
        "item": {
          "id": "9518d596-d5a4-41b3-8f69-0215781b0f2c",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "af6c9686-afcb-4e80-8347-e036ec9e2051",
        "cursor": {
          "ref": "8d2ab7bf-2ac4-40de-8571-4ec851196bef",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "21bf5526-9388-434a-ae78-031c37a12aad"
        },
        "item": {
          "id": "af6c9686-afcb-4e80-8347-e036ec9e2051",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "af6c9686-afcb-4e80-8347-e036ec9e2051",
        "cursor": {
          "ref": "8d2ab7bf-2ac4-40de-8571-4ec851196bef",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "21bf5526-9388-434a-ae78-031c37a12aad"
        },
        "item": {
          "id": "af6c9686-afcb-4e80-8347-e036ec9e2051",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "7513848e-9fa2-41e4-8f8f-32da62150a51",
        "cursor": {
          "ref": "25349479-baf5-4f24-a48b-7f72a4480435",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "92177108-0cd8-46f9-b2a6-cd7407e45ca5"
        },
        "item": {
          "id": "7513848e-9fa2-41e4-8f8f-32da62150a51",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e5313bd7-17a4-4672-81bd-73d0775df24a",
        "cursor": {
          "ref": "1979b0c7-2277-464f-9c3e-ea1346eebd24",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f84c94c8-53c0-486c-9c65-5ba35dd02a81"
        },
        "item": {
          "id": "e5313bd7-17a4-4672-81bd-73d0775df24a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "e5313bd7-17a4-4672-81bd-73d0775df24a",
        "cursor": {
          "ref": "1979b0c7-2277-464f-9c3e-ea1346eebd24",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f84c94c8-53c0-486c-9c65-5ba35dd02a81"
        },
        "item": {
          "id": "e5313bd7-17a4-4672-81bd-73d0775df24a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "87eb64a4-8d62-41f4-a8c4-7932b6f13b12",
        "cursor": {
          "ref": "7e57ae3b-7ee5-4444-a209-c16a43bf4519",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "0baf9fc6-90a7-4d64-84b8-f85a9c09f034"
        },
        "item": {
          "id": "87eb64a4-8d62-41f4-a8c4-7932b6f13b12",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}