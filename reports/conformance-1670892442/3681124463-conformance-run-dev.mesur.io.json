{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2390eb38-e3e1-468f-80c7-c5829662a261",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7956e96f-7975-48cf-b920-a93dd5abb18b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8be7edce-b209-48d6-af04-182c751cb80a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "047eca8f-bd4b-498f-8d6a-b21207a91755"
                }
              }
            ]
          },
          {
            "id": "72a07422-a5f8-4161-8804-855ffc88075e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6c67bcc8-b131-4eeb-b798-82f9f25f2b1e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1ab7c5af-2570-4024-ac63-bb1585ef4ec2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4f564a67-739f-4c3c-b196-9a5baa7ef116",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "047457db-71a9-4530-b20e-e84756f0c1ad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4ddcf8f6-5a01-4165-906e-d15494142d93",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1f546ad-d36a-4e10-9bd6-56d5639a275c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "63b6d780-acfd-493b-a67c-9da60395f9fd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a5169ffb-2cc2-4928-a6f4-ffc459440ba5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "28028d15-b3d0-4c9c-9624-bd1d3ad84747"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "63f6d414-7fa8-4ae4-8128-8bd3bd309f2d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c0994f22-3dc4-4b63-9b29-d1aaf7c7df49"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "66508d15-c1f1-4f79-b7fc-8d7717d3a26f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "34a38ea3-622b-4133-a82a-2db3c76c8c1d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c90c9ef-3fa9-40ae-8961-facaf9102b7b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d458daf0-0b19-4776-9a37-dea129e1b8c3"
            }
          }
        ]
      },
      {
        "id": "4fd52875-f277-4d38-a907-399258d49627",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2341bf08-41c5-4d32-89be-3132529ca9f1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0870a202-7354-415d-8b7d-e0ce21e616de",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a03acee5-71c7-49f7-b2f0-a5f953b8c67c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38120a14-8390-4b98-ac9d-4f24bbd757db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "824a4ff1-0046-436c-88ef-1271831ee6a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc740d76-507f-467d-93e0-ee28c81ba6c9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e08eacd-024d-473f-82a2-af8bfd231510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97ada77a-cbf2-4ef8-83bd-18273b9aac2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8604d6ba-69b0-45d6-abd8-5f886c95a332",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8974bb00-6a08-443e-816e-553479fc3fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29a2597c-6f86-49cf-a9e4-ca6f9d3fbcde"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4a7ab6c0-de1d-4853-9f52-1288d1a1221a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4cf54cbf-375c-42f3-831f-2d8c9e0cf854",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aba5f06-0fc2-4dda-a75d-cfe1ee8bf3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "816ef6f6-fe44-4fe3-b717-4f64d4dcc047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ef8c4b-0642-4c92-a7e0-ae72af928799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7dec09b-d342-4d6d-b250-acd32f993cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f60d5f1-344f-4e2e-a9a5-1dd26c9d0ba2",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f8ed30-62e0-4a05-beb4-dede19a24170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a205df5-cbf3-4c43-8e1d-30813f8d0f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3c3f81-8b68-4a4e-9614-491a79099885",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "909c8451-bca4-41ef-83c1-6c22bff6908a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ce34c78a-b2b4-40de-91a9-bd11c10a5dcc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4b1405bd-b200-4810-b57d-326f07663c16",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8377e088-b5b6-4673-bbf4-66975771c8fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b5eee3b8-01fe-4aa6-ac37-7dfec1d592f8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac90cf5a-6d3f-4ace-9da1-433dc4025d95",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "3c1bbc81-15bd-4c3c-836c-f71c563c1ac5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "02c65148-4247-4460-afab-84fc1a0db6f0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd778d31-6c13-4265-9112-8b5d96a627b6"
            }
          }
        ]
      },
      {
        "id": "4ebff858-bee2-4f22-9464-ff163cba903a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a0c5fb02-8ef3-43ff-a760-dc3d12cadfc2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5e2ef909-bc53-47e2-b69e-1f28a7a7500f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "34c1a746-c27c-48f9-97fb-ec90fd3aa666",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf09eac-3e3c-41fb-9ff8-7e416bd40c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c2462a-8251-4df6-8172-bc53b5029057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e03904-79c5-4c19-ab1c-8fc5bbd92b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62f9e2b8-e5f3-45df-8aa2-8e51ae3649cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d13364d-08f2-41fd-b7a9-87bc17547e70",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8392276-b4e1-4812-89da-5ab4563a3302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "809a3fca-9adc-4127-b17e-56ae9d43b452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0ba8f3-97a0-47cd-8a39-41e432dceedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edca0304-4e52-4a4b-ad44-da21d9e7653b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8e3f41-5a99-430b-8dce-ef16bb493376",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb68e85-a735-47e4-a764-341fa27b04a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19bf937c-41c8-4ba8-8a55-eed34d081cd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce63fbd-5618-447b-a345-e57236a78a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d10bdcf8-a7ff-4ff4-9de8-03b7aba7aeeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f4994f-7aec-4e49-9606-4a66d4aa0d57",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f86a9a7-0eda-4a6c-80b9-30dec1fb056a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2aeccb4-1cfc-4aec-9228-af1823dc3f7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93d3585-be34-4bfe-985a-541b68f4c189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f9a7fa1-16f6-4acf-92ae-9d1a3254e170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fdca0e8-3cbe-4b94-b5ad-f7cd22a2ecfe",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a29158-a796-49e8-a0fd-336c5f70f13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dde95a4-2233-4732-9a12-c840ce8e06d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8a4a78-e31d-43d7-afe1-1903867066e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a080f05-f2ec-4c28-a07c-60757047ccdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac8d128-72f6-470f-9276-50d29e35879b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d5c003-3fdb-4191-b1a6-0db8acaf1b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c97d7a6e-60e3-4bfb-a87f-40ffd0eedabc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0c82b2-60a4-4ae8-844c-434f7308459d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11e4963b-3910-4f65-9326-4a202fba4397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8423ba-6a1e-49cb-95a3-b0dacd92024f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a48a38d9-b6f7-4d04-b2cf-3f85143d34b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2fadff-1038-4696-b64d-de4265a96e01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbfce5f0-cb21-45d9-acc3-a10cedd06e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4bf5432-225b-45bc-be70-29f99e2299b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1addd72f-e015-4083-8786-a2e90633fdc0",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ddf4df-4c54-463d-8ec3-3771fb69d2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0838e44-3d38-4e4f-9cb0-0107492a2e9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825616d0-023c-4dd0-9989-a9dd9a6023f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22affb80-ce38-47cb-800c-cc25043d013a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd58502-0300-45d7-bdaf-6c76deca02e6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d64d21-8ca4-4216-bfde-f96d6d36e4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e4fc323-4e45-458c-a0a9-194c43f93210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c804a67-9548-4fe5-8a1a-94a3d36342e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "149515b2-18e8-45b8-9b0b-89e669cd0aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f16fa49-32f0-43c3-9f4a-c3d26e757cba",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd6fcad-5079-42e2-ba6e-26f5aa914c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08d3d6be-ec1f-4c05-b1bc-a3a5031a93dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbdd5de3-8728-425f-989e-93ab3406e1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed8d3251-f3c0-49eb-82f7-c3ed12b97327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce694a0-519a-467b-9bc2-a255c0f83133",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe7e9b6-090d-45be-9285-cb34bbf24418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "438546ac-f7ae-4023-bd5e-ddf94fd72e52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf19b8e-a621-4dd6-aa40-b3f85499bcab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a27abe0a-ee88-43df-a746-2764e5ce9783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebf67ea-f771-4dc6-b677-02a112ef0662",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db112c9-b2c8-4704-a88a-343a51fc5465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef3e6d13-88e5-4a6f-b17f-5ad72e3efe5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0adfcfaf-ee8b-4505-99fd-4f9c00fa0b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "496a16bc-020e-48bb-8f87-8507ff2c9cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a175efeb-212c-4a46-aa60-575d4d63fac7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae5a006-c8ae-4b6e-b738-c7e7317a12df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8030561d-fdda-48ae-a946-efe3cdbb25e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a22a28-bf70-47f9-8356-b9a773183f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab52698b-c078-4e73-a01b-ef3c56b6c65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b6c098-c83d-493b-9082-c574d119a3cb",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6bca5b9-1a95-44c3-b10b-d75133fb370e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d859a790-ce2f-4ca2-b128-fb8fcd9b02bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a661eb-b329-4ba0-adeb-ca9fd811bd15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3997e99d-05a9-47b9-bc36-480042e7d414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2544bc83-8c7a-41d9-9ae4-254f54371765",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1478be-f517-4b44-bd9d-3d2471dc74b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "163ef1c9-d25e-4d3e-8530-986dae673138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38d4488-a779-4785-b429-4ac2ecaa571d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f596b061-7ea0-405f-b1d4-818987c11a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487048ee-c58c-44f1-a63c-282d165d7cdc",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab3c680-3dd8-4afc-93e6-733c5ea0828f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e474a783-24b4-480a-bcb8-816194b9fea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10c01b5-5f28-4618-89a1-a07b81e11093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b57b1945-1b90-4f9b-940f-334feda962fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ca45fd-fa19-41db-a818-8a0b8275c8da",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c8d422-42ea-43f2-8397-f627f89fa534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97e9d9c5-cd35-4d1d-bebe-3f909a809a8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ae7426-5eb2-43d2-9d1f-d974118d6bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7480dcfc-6dda-484c-ab38-e9055bd0e950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fb7ae3-73c9-4bb3-8a03-fb6f43eb962e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5d1cdc-34a1-4643-86b6-b80a4a2aaa3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebadc442-9ced-45e3-9161-f26ee34c6899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd28cf6-ee6d-4308-be57-de0cd340a098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a72dcb12-2761-4dc4-962a-2511c871e994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8241ea-d6ed-4640-b768-17d28e7c34c6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f34d0a-896a-42e9-912e-2f6366778355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c20b7efd-ff0d-4bc9-9517-dcd69f35a7db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1174c5-31f3-46a0-b9de-31c1281eb6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d402c20-e46c-4d7b-af69-91e551c43a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25437c5c-f531-42ef-b583-8d664b3b8dbc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3103303c-aca6-40d2-8f6a-f56f0fc473f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d3b2a4b-106e-4541-b223-ab2c925b4ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679ceec1-37a6-4a6f-81dc-89ec5fba5f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "67e7defa-1a20-4612-8f4b-61eb0d167a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c5e1a2-3db9-4675-a2b6-ba885bf62f98",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc0fcf3-0bac-42e1-af55-b3b142c88369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a3830ca-9ea2-43b2-94e2-a8a31e97c214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb9abad-d08d-4893-9d72-9949ef8ecabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fd82215-f190-496a-98a2-b8c613503617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef7bcdf-5774-4352-a8e9-4f4315451502",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6289cf3-36f3-4505-b483-7df86be9a0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1811c3f0-c647-4c81-a505-14fdf5ac8c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d632a69-4488-448b-abb3-1194d93b9277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bff2688b-c086-4e80-95ed-4a4cf79c8cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41aba217-a71b-4f50-9778-c334af5a8163",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85f01e2-53ee-4174-8148-f3617b2a6c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e94e88cd-1980-47cc-9620-9c805110dd3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e3cf4e-c542-4b25-8237-73dbd2b28ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8be0a78e-ea04-4ad9-85d5-0138a83f6504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697d9fa7-bda0-4631-a91e-47ba14fe1d11",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d619dc-aabf-438b-ba7b-a3160d8adeb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e706b0c0-15af-4491-b00e-ed123aa99281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5a0415-b659-4758-9236-7d7b3bfa45ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "544d9a13-1a2a-472d-9633-c0816d1205c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00845e73-69e1-4657-8c3b-f2558366ef39",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83962993-e3d0-44c2-a586-458c94a4d463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "691f3624-8123-4717-8e4a-7e83bc48855c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d85592-121f-4f0e-99a5-9e22fe788c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "afcde16d-2645-4675-bb5a-2f4a0c3fdfeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce87fb3-554e-4dd5-a40d-3ea696b07fc5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c95eab1d-89bf-48e7-8d0c-c0ca5cf30ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63e083db-8cfc-4d92-a1de-6247abda4204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5656440-53a9-494b-924d-75c4ce5627e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "80620ebd-69c2-4153-b713-bae5027db2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e67788-eebe-4d2b-aac1-4c227d966e1a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66daff54-8d99-4f84-a940-8fb64b859ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14fa709b-70ac-4259-9f76-48f02af3abc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622480d1-00d9-4e0b-b50d-2ada8b58014d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2237be93-2377-4e74-ae12-10963b1179a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75b61e6-1911-4c27-bb24-b30374e0471c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a2f085-bb8d-4fa0-9831-3e04a5748634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55ddab9f-ab5c-462f-b53d-68650ba37f9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dad0a24-c636-477b-8ce5-be2e3d7b310b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "16d528d8-47fe-43bc-b384-20fe5be9edad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ade5420-cee9-4d3e-9845-70560547b3de",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2f5841-ff9b-4501-9d82-8a627fc7058f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f0943f-b366-473d-a4f8-b5c31bb2668a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d333cfd2-8dce-466f-82b2-4aca65abd56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "760234d9-a842-432a-b5fe-c5a5aa365244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bdc7c17-fa6d-4774-91d8-53f5357ae839",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84b6bc6-eb22-4785-b6a9-ce26c62fd4a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "824ed55a-ac46-4d54-9312-d7d9d3d695ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f7db18f-fe5a-4593-9420-392f4856b710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "385d793d-229b-41fe-a21c-461fcd964980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3cf94c-9824-4451-ab0a-3729d39caa8a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd156e0-f7b0-46a6-b909-8faa89832715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50aeae42-09b4-48a6-9d74-6abfdb166463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231b9068-f9df-49be-9a31-c0a253a793b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d45d0e70-6f3e-49f9-b290-080c09b620b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3c6649-3b29-4a44-9310-7fdab1fd7f93",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805aac23-55cc-4406-9336-dc5a5c69e51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d72a9f-b9ca-46a4-869d-c3a24a656d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43b48d9-c119-4687-86da-a864061b7183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b135ff3-553a-4904-88c4-072deab30d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc2d2ad-8adb-4844-bbb5-ec2e258d934b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521817a9-32ac-4e07-8be6-7d08cdb87c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fd295f7-1302-4a4a-8852-a0a398a2b62f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ebec6ab-603c-4cf5-9772-d4169141d458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bfd9362-a8c9-4183-a128-bf0d72269dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "682fdda3-ea3b-463d-b013-e3d7a6d054ea",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ebf221-8d5e-4430-b2e4-301726051bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4195c589-a9ab-48ec-9a77-98a196a0b13a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772f51ef-d922-43e6-a10c-867a1870934d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a4b84f5-a19e-484c-ab71-45a8b7535446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e268cdb4-e718-422a-afa8-dcc62c86800b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24e496d-cad3-40a5-af61-46e83e4be512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccc26707-2240-428d-aa97-38e8bc8756c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbdf0c69-c998-428e-96cb-f5ba85734fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4780a4d9-9fe9-4ad2-97d9-3f2e3abe0018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4ae5b3-96c2-487f-9490-aa3a9e981032",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3f75e5-3191-4a78-8c55-080a71299605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "955032c0-ecc5-46e8-be3a-065378629dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9a968c-0e62-4945-b3c3-8c3ebbc67499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5ec36391-7e72-43e6-bcf7-a5690954ffed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4abadb05-48e2-4d4a-b296-ce7ca245b9dd",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18069a82-52ca-45de-a5ca-e2739b7293f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e23f5c5a-83a6-4ee9-b760-f505bc3f0174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a1008b-aa74-4441-82bd-2e71df4f42a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "49dba986-9e14-41ac-9840-0fbe0b9b48ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1b0ebc-ced8-41e7-8e10-2f41b2e23cf4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e0789b8-89f8-4a96-b2f9-52032eeb5f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39279b78-a9aa-40c8-a5e0-b2e4b321879e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a572e935-34ac-444e-bd91-3f1729fabb40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad22c960-3763-4b5d-b946-001e001b238f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da47f021-a067-4d2a-b0e5-2458a3ba9d99",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bade6e78-84fb-41f5-922c-23124b0ea1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9b49577-38a5-43c0-bf78-3fc6c9f83499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb8f88af-25cf-4673-b9be-20f8aff7de9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f375bf9-535b-49aa-a62d-a2139adcf695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de8ffd2-0c3c-47fc-8bef-a21fe2945b6e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751de973-33b0-4e57-afe2-3a837f2d740d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c48a20db-8d95-408e-85d6-ab64017c269a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d9cd82-a477-45cb-a6d1-47bb0d78202e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "412a724d-62e6-4691-bf91-e8c002626e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8289b1-4d28-4fd2-8ae8-a5b011781211",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66c3270-f562-4b29-a125-ffcd1012f5e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85039a57-d9e2-4a40-88bb-2180c8da6901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b1b104-978b-4565-9062-f6c1e305ef86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ea64d91-7b20-4ac4-8bcc-3a8e9946502c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b3037e-e9d6-4c35-b868-fac131f50211",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f241aa9f-480e-4d30-9222-0609fc8a8448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ed7ec19-097d-4294-94dc-c2707315fe40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e723f5-f36a-47be-9707-356e3b8e16fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6be2d681-edbe-4e9c-bad3-759f84fc3259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2d574d-c8dd-4c05-a905-c9f866863cea",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f4906f-8a05-4462-887e-d65ac0304574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83511559-c691-49cc-9f07-da246eb2a4bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54fac892-a3a1-47e6-9fe2-aed4414fa1d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "78758a32-1f32-460d-91c8-9a9a26547a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbe9993-be2d-4680-b185-1988d118f8ab",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9ce143-df75-4d87-90ac-82f1144301cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08715ab0-6592-4aab-a01d-803b7be2d2a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4c495b-5a25-44e9-afe5-9393cce91f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f55b2788-c26a-485b-8ca8-8975a38216a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180bf0bd-5ef8-4b6c-a86d-a287aa7de100",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e185761d-1d75-4c34-bd90-63fe9408753c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d52c01cd-b9f9-430b-a4f9-6fefda48c9ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62280a0d-d618-4616-b9fe-699f17657137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d333b751-56b0-4029-802d-4c64b309a9e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13515801-9d2b-4f9b-9348-153595d0a85f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fba0340-a63a-4476-b80e-106be9ee2cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac19469-5d36-451c-9f7a-d7b6c9c9a8e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f910eb8c-c7c7-4b95-927f-d56541c0275e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab229c7b-8893-446f-a57d-0e56579c6b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "781f7bf1-9e00-4b8e-916a-bf7392d7ab2c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "245c87f1-bfd0-4453-9baf-1248697d82d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10137644-5a4d-4f6a-bf7d-91a28516c393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e9f8a4-303b-409a-8d6f-a89bb443a1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e088bb50-467b-48c6-aa2b-aa36dcd2e363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88f0c78-2a6c-44be-bc05-244be3aa49de",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f2ebca-3000-44cd-8e6e-4e87b34b6d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a616c449-e34e-42b0-9138-850d4a8b4777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1f1c9a-dd8b-4edd-9357-a7345425d077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "51ec3fe8-611d-4403-94c6-e61c3d4a0192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0cb28c1-4495-435d-af6f-c8dac575875f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44249544-7178-4465-8c05-24786e0d8ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b124ebd-b321-452d-8f18-37bee3e33ed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c8340d-9fd7-444b-becb-fde6743698df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a628e75-2abe-48d4-9c75-91b9fc1aa87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9104ae6-b9d3-4fd3-a382-cc5e541a7e27",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f69eef1-68a9-4aa9-8d80-14e6f27600df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e676dae-ac24-4f68-8c2f-85aeb6c9c6e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "325b4d2d-f445-433b-8a33-ebbf2f3b449a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f4a0870c-7c3e-4424-92aa-078167eeb987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1fe6856-a8bf-4b1c-b3d8-b43589ed7e61",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a94947-eadb-409a-bbd5-606e89cf4bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7834d28e-c1bd-45ec-81e8-7be306335527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f551b7-e845-45ad-8b67-04631b86b838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb15981a-98eb-4811-9c26-5f40c045501e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a8c574-9f03-45ff-a76a-67d5bad67eb3",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "936df802-b95e-4627-b036-ec47a10338e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "949def5d-168d-4ec4-949c-e9a0a2d98bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd10a99-374b-430f-837e-6769eac30997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8145257e-d79d-4ac7-9ee7-c8a70a8b16d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193efa38-40e6-4389-9d13-1eb1946c1b96",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ccb189-4f8f-48f6-837b-45ce505ecb0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed1b1a1d-ad93-4107-ba2c-cf470794f716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619e13e1-906a-4045-a00f-e9a2456e4c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4090959d-8ee6-4ae2-ab42-949f6beb8b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caeb933c-49a0-4dc5-90c9-393def50bf79",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "552840bd-e0fa-4eb9-9d65-651a1fe5da7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a078a6f4-bdcf-4f1d-a18c-e56345f8c5b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1a2b65-055f-421e-93bc-8114e8ca1dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dff535c3-c11d-40fc-9240-272a4de8d585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56aa6168-618a-4659-98c7-4ef641f9caeb",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02aa15d2-c943-4ebe-8d38-d03d404678bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29836c0b-fb7f-4957-8cc1-2f25d249200a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce05b5dc-b266-4531-8454-18926af095d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a9dff24-3009-4f68-829b-bad5916d9b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d257a46-5f19-4a75-9bb1-d0aec2e7ac80",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1825118-e033-4b93-8b40-6e9fac5e1973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3395140-f145-4163-a6a1-c451f6b3caef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1752e9f1-a0fe-4f5b-88d3-e9d220613992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "bbdbb3b4-3237-4506-abe5-b60c48c3e562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4512e15e-0419-4256-b46e-601ea18157b6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfb6340-e196-4d25-a1e1-1af836148989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70831053-9251-48f2-a84e-49a4b462f801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09640bc-cd29-4b72-92d1-7e47b0455821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e54851-d426-4bc4-be2c-56e1a4cd99ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a571d56-0e2b-44ff-9dbb-56e7def1d326",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec472cfc-fd22-4bbf-b029-b0b09dbf8006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b740a4ed-1882-43f0-8b5b-53ebbe3a0e50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890d5b5d-a359-46cd-8088-8754802e2343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "69423bdd-3a1e-4902-acaf-9cb07faad9a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96900f24-91b1-48c7-8813-4fde35742420",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f747dbe-115f-4857-acd2-c563a901a018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f4eb9e-c720-4d75-a07c-e1850f47977b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d56563c-9ecf-4633-a66b-273b2e850194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d26d9200-a910-44bc-b1bc-3d2cd0cf84d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e791840b-67ed-4467-8f82-52262c0aebfc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08574858-62c7-4a91-81c8-8984faf52ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02740d02-55e9-41d0-ac83-9aff827f0d1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d4fe7c7-6864-41a1-b47b-d9e8b53e4865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec306996-b1b2-468c-98e3-8e8ae8c5b98c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ceaf65c-93ae-429c-b5e0-53954c9a4b27",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87de587-209e-406d-8a0d-e8e461deb44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a2d66ea-1229-4479-b23c-8c3710f7c640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a7e6e5-991b-46ce-a622-f55dc3f08ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8eeb21c7-2c9f-4ff5-b784-96b08730d226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e90ad0c0-c87e-40f3-83cd-668b66558df5",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ece2559-d641-479b-9560-a6dd9f26f56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ebc94d9-4115-4248-8da3-38e14139bbbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6711dd-a1f1-469d-85a3-e6475feec426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d3302f2-bf13-4ca6-b9a7-11219b47840e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f02a3b08-4d40-48ab-adca-e54c60c50ffe",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a00291b-d3a8-4a93-b042-46a813edeec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e026d56b-c5f5-4512-8586-c56a741e6dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a89a9d-04c1-436d-aca6-625afe5d8edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2124c3a-c518-41a7-8368-e0268d4e837c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c033500-5e81-437e-a84f-19bdc39f8451",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab4173d-7068-4112-9532-335e2d6e8db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f613871-3083-4bcf-ac71-0594a058ac32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e001bd-1380-4f05-a34a-c26afbd7008d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9ce56c4-9b50-40f5-8d5a-c22535e26f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c06a16-b192-4121-8bda-b47730e5918d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "519ff297-3e3b-41c3-a63d-94d7cd886dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e8d73f9-4cf9-42c4-a59b-a449cd694d3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac86288-7671-4517-9873-2e38d485d9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73c32591-8ea1-4951-9763-128ffd096c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb08b85b-8512-479e-b953-2b115973f989",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9191b05e-4ffc-4405-88e9-02fb5ae27a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a93f4101-a898-4a6d-9a7f-093183be9518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306416cc-f043-4d9e-8985-ad3b8f69e578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b001ebdb-ef79-47ac-86cc-e1c98fb0ad17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a962dea6-c39a-46c5-87f2-71298fe4309b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13395866-030a-489b-8180-fa12b0818710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be3a466a-6647-49aa-bbdf-0956e77b43d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87066724-754e-445d-b8e1-edcf61a02704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3d30f5e2-4a1d-4fad-96b4-7c712c246f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23591e50-2420-46dd-9278-2e80aacca53c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc43a23d-b116-45d9-b6a8-770bbfa9fd59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87c189fa-69d4-4e63-a125-71724a4c5676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086c58fb-4956-4e0f-89dc-12ea5cbd6cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a36ed1d-b31b-4b37-82ff-f1dc2a92cc97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0102a7ab-f743-4fd2-a11b-b8244fe12cc6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3291ca-8616-4d79-8fbe-1cf6def826d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe9a5ff2-d6ed-401d-bb34-9abba13cb80c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb5dfed-fb38-4b4e-8507-8b3efe092419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb782d9-dacd-4d51-a0d4-32572c071539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e019bbd4-cba6-4a1b-bb8a-91eed78644b2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4327e953-f088-4b69-81f7-19719c56e0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbf32b5f-f0aa-4ebc-b16e-b36df6e5cf53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f9dbb1-8d52-4baf-9f62-03d546e721b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4813e7f-9fcb-48d7-bf36-7ecccad6f0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7429ffb2-7c16-48a7-922b-42c0e3ba5c4d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4809b897-f99d-45cf-8a11-4528b6f95d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "596ea5e8-ae50-4f3a-959a-850612a67f41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "764fd9bd-18a3-4593-b42a-835ae1821d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40cec77a-7cd8-4172-bdcb-2b0b7b618d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1deca92-ba94-4311-879e-05adf03ff514",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cfd7ae9-1eee-44fc-86ce-d071941aa3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd616b3c-334e-496f-8980-e356260f6261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a879239-3d99-475c-9d1b-1fa14fba27f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f93e31d-f8aa-4242-a57e-ac4e6f3141a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efd6337-8a09-449c-81dd-f094ef3890e6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85dad65-1e61-4d4d-9ba5-7fe3a9effe8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464176ad-9603-4b0f-a903-4814046b8787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5ddb82-c8c7-4d1f-851b-c568b34d40df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d229998e-1f27-4ab6-9a46-b8ebe39b9e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae803940-8ad9-4178-8b47-771b46012603",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13cb58ea-1c3f-4c9a-a77e-742cc4f3f484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09f4dabb-899f-473d-9d47-3f78d8d8caa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfe526e-1a30-4893-a6d6-cdf1178e4dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90d854fb-5a69-4fdb-8524-a88a3cb3d10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275eb0f9-9374-4c45-b6fa-cac2db0f170d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20fa309b-c701-4a19-8963-69891d6bbc69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea21b81-dec2-4506-9083-8f09533e1594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214df6d9-1156-4740-9e39-d17af9143095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7770a02-be0a-4ea1-a5eb-ae7c80475c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0fc629-4b99-4e71-b519-fc17933d3af6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5b449a-0be8-4ba2-9c9a-1b5362d1ab40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e389a12-7323-48e6-a169-432bab0b2151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d6869f-7b4b-470d-9df2-ba40b1db029b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73be181a-466c-462e-b181-cc1f90c6d2ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae718e6-d44c-4de1-8c15-b4f8b787a334",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "420992e3-1dfe-45d4-be46-55e0ddd5b7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e62541-a46b-4d35-92b2-0f66c2166bd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865e9944-d844-4a14-bdb6-577dc20692b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5de90b8-4cc2-42b0-920d-484ce8f2a00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed97f2c5-be34-4435-9e01-50d004a1ec99",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b314e7c7-08ea-457e-98b1-e3da3779bada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6cffc39-2ee0-4fd2-8d6b-5269c93df187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120174be-9e9f-45a2-9b98-1c26d6f240c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc1385f-9550-4e7b-ae3b-cac6273c61cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bda2084-ad11-447a-9232-2ca94f49234d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "021270ea-336b-4fbb-a742-979be8fcc3f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49fe9c0a-5e6e-4790-a0fb-65bb4cc4481e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf610553-f320-49b2-a746-8ab22cf34d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "da40933b-eb0c-4a1d-9e9c-497bdc2381ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47806c10-473d-4e63-b290-10f2babe777b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01f3f7d-077b-461c-b0ee-5feb2c3bfc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "222cd1ae-a42a-45ed-a142-ca09cce68c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ab9095-9feb-4bbc-89fd-bace7dd2a187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c5eb00c-b049-40e3-95d2-eb0ff02cad66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b97531b-3489-478a-ba4f-edc7f9b756c9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82a19ed-3536-473d-b556-443ddbbb7de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "183679df-1738-4a83-8f52-89c221bc202d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7584215f-3169-4133-8680-2e06ed1e2373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6e65b2e-3f8d-4705-8713-0154f407cae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0557bd8f-dab5-459b-a464-a76c884f7e82",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804b2d23-d8f3-4587-a1ff-24739f144f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dbeb835-c2da-4920-afee-e448ecd31b92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e8a4a9-c6c8-4c5a-b2cb-6dcebe0ddfd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "038d2499-ffe4-4e7d-91cc-367d43dc6c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e546ec45-61e8-4162-9c0a-9b79a7d13d9b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ced1115-a0be-4e81-84e3-0533e5a8c880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11375b91-4e5c-48df-9fa4-401590585b50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ee1706-a7e1-4a9b-9451-c4c29dc942b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef59834d-1b5e-4ccc-99ac-24b42dc3a940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471dd77d-f2d5-4014-8d2c-ae0c4c9f0c84",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef407b85-8299-4d2d-b101-f20685a7b916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3c6433a-8f92-4e55-999a-a7807bfd8bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b991b329-bb99-44cf-9da2-9836eacd2616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1205c2f-2948-43c1-ae1f-079b7b14034d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db724bd0-4813-4d52-bde9-3657b406f0a5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cedf5f2-d066-46e9-9ff8-98c233b0bf33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "159b4f1a-d839-4e62-b319-a470ab85fd92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39aec822-8e2b-4a92-9364-c4ce99126f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc43968-5f49-4c5e-bc78-f4e90c1ceecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d5b9eab-594a-49b9-94e1-40e83f8fe173",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfebd7dd-31f1-472f-a5d1-e903ad071415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f0ab38-a9d5-4ca0-9b8f-a39bf196e6bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4d20d4-ae7b-4594-8554-4627ee1ecf1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6335d205-eba1-47f0-9029-dad9ab3a8f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d041c3-cab6-4338-bc42-c9b83318b2b4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfffe3f3-6d65-412b-8180-b1848a6fdfc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed4635e-d28f-4772-910b-818277b21b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf06917-73e6-4542-8399-fbbf2cc4f8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "497779fc-54b3-4efe-a0f6-7237cd66dfb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6971a2dc-d8bd-42d2-bfd9-84bf054b02ab",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f03c277-09e5-4c37-b6f2-336705f8bcf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76d7ee58-b632-49fc-b5c9-406ac1ba2125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf53e48-6fbd-48a7-8f1a-751e77f9d3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c38d7937-d3e9-4a41-bbb4-0b7b0f9ebcd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669271ff-3bdf-47b4-9cf0-7c4a52911417",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dca50f3-eeb0-40d0-809f-abb062636f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb15d717-fbc5-460e-8a9b-1058a068d8f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea0d74f-c7a5-4e47-b8a0-efe0c696ff6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad45f33-558a-4220-aa43-19314dda3e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b917a0-6a53-47e5-95f0-572705f4ef62",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bcc48f4-f553-4000-b433-a3bab9306820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5af9d62a-077d-4c06-9872-684ec6571a35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5f47eb-0332-4c09-b66d-8162eb0dbf03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d40473b-1506-4e80-80c5-ee8deb89cdd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6591e86e-eb69-4f89-95aa-571df4670f6c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9371e09a-7bee-40f8-bd0c-a758e251fbe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d19db7c3-d415-457c-9c35-f257900bdd0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e1e38d-f8f8-4326-88ab-040bb180fbc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f689304-9825-4aa7-94a9-77143b6d89ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f5b58d-465e-4afd-a2cc-4a285e630d40",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a225c7af-1717-43f7-a328-8fafa54ef494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2e1c1cea-e770-47b7-9882-c11751277964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4089f489-9793-4dca-b66e-31bb77055d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad3d5082-589c-4390-a432-d193568bd933"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "968c391b-b831-4071-8b00-70312457ecc9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9a6bc425-2e9d-4d0e-a31b-ae4de225b760",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca12a46-3446-4ffb-a9c0-a6ea3744a619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d1f496e-13aa-4056-a00c-418316f9f785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4cbcaef-6ed6-47cd-93d7-5811bf048abe",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "db6e2fa6-96cc-4f3c-85be-9f93c2053012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069e9a5d-dbf9-4a80-b7ec-c27f119dc65b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df16d1b-c3e3-4dbb-8194-e16ae4cbe230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ebca67c3-bd8e-4c75-87e4-e5462d697602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf72004-bd8e-49f0-9751-6596f7360036",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b0bb9a95-f415-4922-ac88-f707f598f35a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e84a519d-cd21-406b-b951-c32c58aa53cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d2ab8ef-e26d-4ddc-bf4b-f5caade65de6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be717a06-0a63-4af6-9620-14a2c335bc26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0dd3d5e7-badc-4768-b086-19d74ee02dea"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f0c3269b-7c7c-496b-8394-30e6fdf2f550",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "92ecfe32-6579-48c1-9014-ffcf6de35514"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0d27bcd1-9e2f-4e8d-900e-1775c77508b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c6ff85ee-5b6b-43f7-82df-e0016f051441"
                }
              }
            ]
          },
          {
            "id": "0c12a751-8363-4dec-bed5-b501dc0e08f7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "97f3641f-3eaf-4d18-8e6a-a956e2eecfa2",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "45ef31ba-d862-4bf9-b80f-b80a5042ab98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4ef314a5-3c14-4a58-8c00-c90ad6464f3a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d806c8e-83e9-4cfa-b911-c1f2d7ad3fd8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "80e78cb8-774d-4bd2-b717-c0ab2fc0de8b"
                    }
                  }
                ]
              },
              {
                "id": "2e2522aa-b21a-4b06-8afd-eb3419b4e129",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9fc6cf6-d278-42e0-b2c9-51df49a187a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d3b506d-b874-43e2-84fb-c440713149c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfc9fecc-138f-4351-9ade-70de2c9e28a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "33025105-bd97-4de6-8d60-f9e3cd180f7d"
                    }
                  }
                ]
              },
              {
                "id": "f2b9af73-2f89-4e07-be7e-5da01803aa08",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3efbe73e-f3f2-4bc0-8610-68feb1f15db0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d4f728a6-6598-4cec-b50a-aaf801d972da"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a05d80d8-7046-493b-8efe-577a7aa59838",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5126687d-d9e5-4343-ae03-738214be7a09"
                    }
                  }
                ]
              },
              {
                "id": "8a81021f-95bf-4b24-a161-eaa568f1cf82",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d810c243-8a98-44ee-8825-45464229bb14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cc6d02d7-ecd6-440b-b603-44178b68bbf5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d43f35af-e917-46a6-8ab6-60eb3b7f39e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b77676a9-e32f-4a80-8092-e63564cf999a"
                    }
                  }
                ]
              },
              {
                "id": "86ca9b92-a4a8-429d-938f-626286efc07e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b29a48e-ae86-4dfa-9943-1380b61b0768",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "328b9a3c-19ac-4def-9a48-5f2786b49b9f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fcd53908-cbbc-43df-be57-d787b03459d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "db7d5392-f97d-431d-88bb-86748e5b4078"
                    }
                  }
                ]
              },
              {
                "id": "c5e60bf3-666e-4e6d-a5c1-6b02dafb2dbe",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2a99d8f-41ae-462f-98ec-a4b61ede45c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "66fc1a9a-5fbb-4454-b979-2b82b8b036f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cb5cea1-cd7b-4319-9791-23a5979d5095",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "82f3f657-7888-4bfa-a9fd-2285b3800865"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e695ebfc-871d-464d-a9cd-894a044c46b8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c7f0d25-4944-49f1-9684-f393d9c1978e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ce1dac94-a573-43d8-aa03-e99b4b182c95",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8241f4aa-7249-4e6b-a35d-7cf6401675e3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d9b6cd89-467e-4a23-aaa7-4e5dbb313f5e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c6197fc6-2c14-44d6-9b41-f27edf94f772"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b65edc74-71da-4da8-891d-985479fd0bc2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "513cd417-a27b-4630-b879-a07f37c9a144"
            }
          }
        ]
      },
      {
        "id": "10050e4f-08f2-416e-89b8-3dcf588cea15",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b4a401c4-2fba-4daa-b139-daaf10e93201",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a77aed82-845c-490e-962f-09ec13dc1241",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "018dd2b9-3471-42ce-9d99-f90764bd4cdc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2ad8cb-288c-4e3e-80af-38908b9b282c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c379b970-fb5a-4e69-82bd-f04f0e4780cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46cf15a-c982-4056-a727-60c77a5a1644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "62aa3780-1b8e-44aa-8d21-12ea4de27735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05600791-1abe-4110-b1d1-b66d1b3db0d8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc478d68-5751-4215-ab3a-76d3f4103a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b4732d-9c69-4e54-ad08-e44afed1e362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a524d4ca-bd9c-4e48-8ef5-43100546a706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "55de3ecd-2602-4109-ac71-68c8a028f319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26c8312-8b09-4259-88d0-b30e004de379",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "719c1a2a-de71-48ab-a762-ec123febe4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5258145c-5ce7-46eb-a39a-65f7eddea7f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0616800d-f9c5-4be7-9661-4e8776b758fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b79b826-0f0d-4020-9185-d7ffadb894ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73e9bd1-1d27-4632-a562-091ee16aa226",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9847550-04f4-4723-b7af-109258b62ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dae465f-0373-49a5-a607-4d509889b271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb5f6cc-19ee-4409-99bd-32453c755b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "50353dc8-515c-4a05-8957-b658c0fe1d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb40a25f-d452-4dbd-8067-eed3e95d7dac",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4cbc04-3762-4287-8a79-917874164acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f7019e-e7ff-4a98-a703-efcf5a296bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e5b538-ea86-4531-a0ae-2733d0ef08d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8234fca-f4c8-4dfc-aa55-5889bc4a1da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b1b5b6-4c75-43ca-afa4-5966390f2578",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00fa82b7-1d2b-4f74-8fb6-611c0ca71edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c532f9c8-b246-4434-b1b1-f88d16717707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c0dede-eb78-4965-a988-3fc12ef7c670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f9b6f0-2def-4f28-a606-e3b7c406e20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14000b01-e012-42ef-ad92-3530f6ff8632",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b14e9e-3567-4a74-b58d-cd47173ceac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670ceccc-43af-4a37-b054-c459fd3fe164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f5f740-d6b9-41f3-a463-caa454ad1ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce741d33-f7e6-41bc-976c-cf60acdbc1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c41ef68c-023e-4ff2-9148-c63d15d17277",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ef4e7b-7560-4f02-be07-526c197509ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a4e92f7-3083-438e-aa9e-d8a67099fa8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f828f9-bbb3-43fa-b9e4-db44495ad338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fd23eee-ea05-44ee-810e-266889b6137b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef9844d-79ca-46c1-bdf1-41086b127bfe",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75922bf4-cae9-45cf-be37-a72382ffdb62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1b4c1e2-df8f-463d-adf5-e2eee8fd40e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc931f59-808f-4613-8238-aa7f393575d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa20324-00e7-44a5-80f3-30c28f9ae9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661bf92b-c49a-4f37-bb77-43d28efa0df6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da135753-17e8-4c85-8db8-8b7976402188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a265190-edf0-4a11-8dac-175b22b23ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dce64ce-10a6-4538-ad01-32e65ab1719a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "37e538ff-3dfd-49f6-9f43-b83cad6bc149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3358f06e-5214-454f-bc18-fecf7ddcf553",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f4d474-5156-4c05-8ac0-da13fd29c2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f43cfd84-a59f-4986-9590-99a5e2b3ef30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f13924-f819-4752-8a33-cea8a748db1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "41a86ec7-685c-4085-8eb1-30b52d8aeecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3528708-5ffe-4edd-8ffc-872b3c31b115",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1663e8c-7b0e-4f31-be16-b45e71bc7e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "072232f2-5865-4a45-8b05-4a19d3bf6533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dddd10ec-4d34-4c8c-9e7a-78e4160ee819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4660e8b6-9b9a-4d31-84a0-9837d1577a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6449ee65-b546-4d71-ba8f-4bc5e0e5282c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a28fde-0442-4173-8605-3981071daf2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13f84209-1ca3-4909-9b36-d6b1e572d13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf0ef93-ed36-40bc-8e34-06a8149a25e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e4d4645-0e54-4598-8085-670e3ae4c0b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21c55d16-7501-4c64-81e8-d80a34d2e673",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e704933-641d-4ca1-90b1-84aefdb047f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65360772-8603-4776-b51e-1346b2071a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d7867e-f8c6-45f0-86e6-11fb8781f7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "38688fb0-ab6b-40f3-a57f-93c01857d200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccad9095-4346-4c17-bf9b-7c16ef851833",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0043fcca-c110-4717-bd1a-3e2f2f3645c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba6a37b3-6c39-433c-be90-b2d344ab670a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec973a7-b340-49f9-87e6-d208d8b4da14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "338c7b08-3981-4e13-bb6f-1091f4651aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea5b8d49-41f4-4a6b-8460-255c0d987092",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5d3aa5-b5a1-4234-ade3-a123cb83a6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108c3b21-184f-45ef-b90d-d4718c40f0e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c986a77b-bf9d-4384-a084-7d47607b6b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c01ff69-3f9b-47f7-bb91-5d6e849ae292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710c6979-a48e-4588-b031-e52c64f1d402",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4aed01-7fe9-4955-a788-d72e99a51c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f14a308-9be4-49aa-bd5b-de4bed5028e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f952f1aa-5305-4bb9-8984-8b92b8441c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c35abba-1847-4413-8c21-5de0ebb11d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb12dc45-627c-4fe2-ad7c-eb364be3700d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd0b2c0-997d-49ce-b9e2-19d665d9a21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b5e183-db3e-49fe-bbf8-bb74b4780241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2687ef50-6942-4752-b062-542ae61b5484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "abeca89f-b913-412c-aa42-1ceb93c850b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9cc371-2976-48f5-be4a-c518fe84e934",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "606c0743-f67d-433e-844f-594b42259f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49356c02-1d09-4738-88bf-dd10b5e10f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ba0b23-106d-4faf-b11e-94412bbaba90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f90f11a-158f-4d48-95dc-ad4f4742d670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6820434a-e96a-4e60-810c-f0fdcd0445f8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e649cbe9-ea43-4d87-aba4-375c02609e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27ddc0fa-4c6b-4238-971e-22c54ad57062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1af115-1dec-4c09-b9cb-f15e60180173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "335def29-846b-4ccb-baf1-1feb01679671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248a16b1-066a-464d-a808-72203d5e8c97",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4dd4b36-5370-4535-b6fc-2b48fa87448e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d3eeed3-7db8-49bd-92a7-9ace3ad2749f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac1ceeb-d2f2-4407-9ec3-d8106592d503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "586ca53b-f2d7-4a86-92f2-6e8e9408ee13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182de610-caea-4419-b3e1-da301b4b7aeb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb337078-994c-413d-9499-8d36c583e392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c52f06c6-c14f-45f0-9905-62a454564409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3ef225-ac2d-49e8-9a20-b5548b15c595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "322307f0-5ef5-4ba8-a7d7-fa6d971d6bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68eb40e-e913-4c00-88d0-9efd449dbf57",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "689251a3-db8d-4dcc-b985-4460333c6e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc97e6a-b11e-4a6c-a4da-2620fe3e2d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc11b9d-47e5-4d48-96ed-0b4240ae82b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11b7e11a-30df-4afc-9f7f-4017a0414ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559b59cf-67be-46c8-a9eb-9be7a6f23b3a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "305f7eea-4083-400d-9cb3-93e1bad2cecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1d8726-27d0-4de5-b34f-564b19c9655a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14bf032-79c2-4449-95df-8bba68bb7a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e6aca3f-5842-4423-91d2-3148bf6b3526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b93b09e-77a3-4268-b971-55e464462cd9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a97b98-37f6-41d2-bc98-e9b17612d570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63ba81e1-c835-4d98-8712-58498373394a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de38b07-0811-4e92-9d1c-f791a61b77f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5119473-d940-4df8-b941-07c37c2fcfc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f7f5e8-1e5e-4375-b025-682c0da4aead",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93127061-04fc-4dfa-84b8-2d44749b3e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c880e1c-476f-43d9-8c91-4e0a7ae8eb54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0f0843-d7d0-40fd-9bb8-3f9cff20350a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffa715b2-ec50-4fc7-912c-be832985f0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349ab80c-33fd-47e2-a98f-b0d005bd3324",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f5c78c-fa33-40dd-b39e-dca42e4263db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a6c7e8e-e186-43eb-be6b-b159adc9ca72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1ff785-e59e-4e7f-8ace-2ab2adfb4800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "686c7e96-599f-4702-8ebf-5272194b8ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662a89f0-2e65-49ed-b403-8e4b28e3b037",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74809f3b-d4d0-4acc-a595-c34f3800b954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75d0b3ba-4ffa-41e0-adeb-d3c51db680b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50c9545-b6b0-4cde-bd21-a715511bb22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f46ae29e-4b37-415f-b031-59ee83ffcb9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2c0d96-ea0e-4fef-bf75-3d3ea9279d90",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae348761-409e-4de9-b1e5-c173a692014b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43faf276-ebb1-4a44-aed8-0aa5a9937467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50013d8-81f4-421e-814f-bba6322123c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3d379f-9d99-4c88-b5df-d2a3b3bed870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974a452b-d1ab-489d-8ea3-c3472b25f186",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e591003-5b0a-4147-846b-34605978355e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa856fa2-cbab-44fb-8c36-894e28ea27b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82cf25f-2711-4dcb-b3e1-8856cca79df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f2c5209-d254-4aab-a46f-8c2ebb896f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d49212f-7b9f-4913-a9dc-e5965acb0df3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "243f4392-c34b-4a82-8889-0355f53e366e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b196958-4d1a-46ba-9ae8-d5fafe2d0a7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f81bc6-bb91-4d66-b677-cbdea795f9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff449b7a-e29e-42f8-94a2-43608a8c1765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e2594a-5849-4d7f-88c0-55a53fa6dcc0",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1608af3-6405-4cfa-901c-cbeced7af3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6eab354-2d0c-4a2c-bb8c-e4366c7a4289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ff081b-d515-4efc-8628-9d62851ee0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26b60ff6-a83f-4ea2-82cf-5eda81f185cb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2417f870-9228-4062-9f47-92f8674549d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e8a1dce-3ebc-4497-8465-78f8ca137e21",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9339477-bbed-4444-8963-9d4f36fe7ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6032df65-dc08-4c88-9e70-4f9c4449375b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0117a81-35d1-4014-bfd9-1fd3a2ec648d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb5f7629-27b6-4de0-8126-9c966bef503c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c81910b-549f-4aa2-9c57-341679dc8226",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3311c2ef-9587-4cf8-b329-471ed60f89ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "213c3d9d-b697-4845-869f-fdc70b7596a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e05cd9-6133-42d1-80ec-6c37788c8c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fea0498-bd56-4ea4-a704-4a0328360c75"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f3da672-b0a2-475f-8d1d-2b4281425c6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de4e4e9a-5a3d-4319-942c-0dce9ef6e306"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d548c12d-f5a1-42b0-90d9-786dc47591b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e3d8675-2f34-4f56-b0bc-39b6cf7b171c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ddedad23-baca-4f43-90b9-7bfbe933645c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ba6b95ec-4d25-4e4f-b5cd-c640debeac3d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "80891f39-cfe3-49cf-b67d-f520536f85d1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5c6f902b-2f42-4512-8881-6422bc68c6bb"
            }
          }
        ]
      },
      {
        "id": "7d08d2fa-23ce-4804-a879-5e06a8e252b4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "047162ab-4e20-4931-a8a6-a544b146f8dd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ca1f0665-6ca0-4312-9831-6d0c4e1929d3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "27e1bc36-12de-4bdf-8940-83ef8332daa3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e6f68b-dba1-4d25-b1c8-7519498a3c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0376637-691a-439e-91ae-dfd7cd42e0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621f7968-7fe0-4f5a-84a9-d193cd811b35",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5747541-6b13-4aba-a100-062792cdedd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92fe3a20-a739-49bf-9a09-fcb757fda90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99eadebe-7c5b-4311-beda-4aeae92aaf86",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6311824d-4738-4a33-8bd5-b82d4c052031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b0fe314-0e24-4e06-bf65-63c4d1da4158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f87f559-6234-4a9b-ad39-a371a053bd93",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf7dc4c6-b9fe-459f-943f-1a1b9323ec8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec694a9-d289-43ac-8382-ace297b9fe16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26513da-0199-44ea-b46b-7b771fd658fe",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "758acb5c-7b8a-4a40-8c3c-26971ecafa53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58e44b18-fbb5-49e0-96fc-013a402f6984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a716354-ddbf-4bc7-8acb-026338ec9678",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68dc8852-4eea-4d9a-8bde-4096e448ea44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e7278a-6cbf-46e9-af65-7c10d0f4216a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51581500-b5b4-456e-aaae-40418abefcce",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195a7d26-0b9b-43b5-a77a-a66a20fb583a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68560b51-62bd-40eb-98b2-590698cdd2b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63dc68c8-70cb-4d9b-8656-7deb82beb348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61a7807d-df78-40c1-9aea-dc5f8b14fc1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e54ead8-d342-43f7-ae1c-d6de5c8bc0ac",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7dd476-c9bd-49dd-8cdf-3aca353b9a15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed07fae9-a991-4268-a1a3-79330e4ad381"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e27f86-39d0-4976-92cf-b10c8ffb415e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21ae3984-be93-4bef-bc1c-1f7eb347bcaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e673b0ed-3e25-49c5-9d5d-8af138a96005",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe3ef3d-c564-45b5-b129-fbc2bccdd6a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdabcfe9-bf4a-422e-ba54-1921d202ac2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2ed6e1-b3a6-411e-afab-cd47d8b4a32e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5123e0a-0b35-42b0-b0c0-c3274b4751a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6af2f5-6d55-4640-a969-ce8dcd675efd",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3556baca-da83-4a8c-a69a-d957d3982546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99f3a0ba-23af-45aa-8dea-ce92916b6423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e0ec84-31bb-42a3-9d3e-7ea148eb3f10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "482256a2-4627-4eb1-a717-f5f5dd259b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2383079-a316-40f0-8633-96ad62d26ebd",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cec51ac-928b-48b5-aa1f-7fc5de091edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc98844d-37d7-428f-82f1-1cce58816b10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae543e82-fe3b-48dc-af23-21fb82ef5dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a96345-4fcd-4a5d-8cdc-11b87f293cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78ba0b8-1d31-46ab-a68a-44bbecc28c9e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f474944-0af5-4ed6-9aa5-f8560c557ee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a481d5-ab3c-47fe-92ea-989b8cd49430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cd9469-5c8c-4d3d-abe0-2d0167990b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "000fb808-de69-4a78-a771-3552582f8540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50bdb375-7ad8-438e-b443-3803b2ab869d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0fd3a4-8b09-4108-8381-710558f2d316",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9193ec12-a1ed-4a3f-adc7-ab2114a091da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e8fc5c-d4fb-433f-8fe7-41d2a5d306b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13becfaa-51f4-4273-af41-d328da6073d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d17029-2163-44f6-aecd-ef086856da22",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1468b4-e132-49cd-817f-8be20a8fac02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c936d1a-92b9-449e-8cd6-014e9f1332f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b69beee-e601-4c65-8ad0-70f7242922bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a96b97f-9dc8-4462-97be-b25eb31cee87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59f421c-3834-4520-9c0d-fffdeb75e090",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35487a28-6805-4111-af96-cd4065e3b696",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43fefa86-5f0f-4f1e-8128-71ab7cb66a1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4db92c-3e27-4f40-b3c6-c7b4bffaa83d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da0c1e4f-d0a8-401e-ba98-e8a5d8a431db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0c8a66-7756-4d17-a64a-6a42e10ef9ab",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7ce031-c7e1-40f2-bad5-7ef3412f7c70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0ca692a-2def-4a93-a717-e6f5073efb50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "550d1c13-59a3-4028-a9fe-1be82c75064e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd80e8cf-376d-4007-bfab-e6191d23bac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2efd2390-ae7f-4862-8244-485a5a064794",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de1cb72-fb04-43e8-84e0-361713bb82af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "796ebdbf-38e7-4df3-b450-6a6dafcfeb18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fda50c9-bcc9-40b8-837a-8053c9454d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3da9766b-5185-41dc-9cb8-855db21bedc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c3d6b7-8d6d-4d41-acaa-f78fedb91b85",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c81dc46-4385-4caf-b0a8-4d64bd6f92c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2fa376c-d6a2-49fc-a555-8d0de71f816e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52243a99-4204-4b2e-9a1b-7cb48de2364c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf1d43c-4533-4796-94fb-d7d36d79d8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ba26c9-de06-4999-8c1a-c2989380f415",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de71732f-cdf0-43fd-880d-2aff60c5fb60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e49a033-10ae-4467-b6fc-91ffeba40ac8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6398d0-8ccc-42e6-94c7-3f6aaa178d85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c442fee7-b36a-482e-b615-f7abbf5040fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f90c7f-02c6-4bf6-8661-cdefbc606e35",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42052365-911c-45fc-8427-09f8d38574f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ed0103a-e696-472f-883a-027b4b06d20c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "477375ed-a945-44f0-bd07-5a836d17d8f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d11afa37-a953-4ce2-8937-d80a5c744462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1969b89c-c2d5-4abb-9dc4-e52eb4f7c1d0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b9fa30-ff3f-4e8f-bb80-84bc20248e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dcea947-cac2-4dd4-a5b1-6255ed9344ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e17f3f5-7323-4b8e-988c-8a5dee0edaff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ebdf616-eb3e-4117-84d6-58f8fa5f21ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcae4b52-398b-4986-83ae-3f3c59049dc9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566d3878-6cba-4f21-8dcf-dbd5fa5f4105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "873293f3-4ba0-4bb6-8fe0-cc410ff3fd29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabe9291-811a-48f7-9b1c-ad164c31f443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c7addd9-4d61-404f-a3d7-36a56bf2b9f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa18948-ba3b-4b2d-833f-514e55cae0b3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5f9e4e-e3c5-4df8-923a-ea66bd1a8963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "137f9573-c6fd-449a-baa2-7a2c52755457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ce48b1-1a6b-4771-b362-8f8faeff0da1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3b14ae3-d654-4717-ad78-0f4d677078a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e19e94-ab0d-4261-a56c-23b48f33145e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cfc5e30-8a62-4634-8849-678122711257",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25dae09e-fa43-4bbf-92d6-657e3f72b0cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0cd9d0-f452-4f1c-b4ce-d6744a49c86c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f1fc14-ca16-44ad-8bfa-80124b74945b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7866b4d-84d5-455a-b97a-6d2a62715acb",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307dc2ab-9237-4088-8869-3e7ba7c0442d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0250281-e2c2-49c9-8435-9e9c0cf8e250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee27f5e-693e-469b-86a9-070d82ab4237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc131a69-175d-41d3-900b-fe830822dad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c86ccf7-6f08-4e66-8eec-c9e0b69c3946",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa4008f-de96-4091-afc9-1e2ea69d90f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a800cdf7-5404-415d-9e92-1573d098481c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6661a319-2a2f-4024-9756-33fa9905791d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a07f003-95ef-468e-b879-7161a6762fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a0e692-ae3b-4f21-ba81-6d300485511f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7000c3a-92ae-47d1-87e6-3f7599ae47bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85af2c07-3ba0-4ddc-ae9c-6bb9e702816a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19cad425-255e-43fa-bbf2-047ddd7c5d27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "533b2fd2-1314-4fd5-a2f7-556dbeb45b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69e9a7d-2efd-43f0-b6cf-bc82eb816686",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c74e00-3b3d-4216-834c-41cb9bfd8524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad9f9c6-06b3-4300-bf89-8c297a3c96b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "209d55dc-d280-41c4-a03b-fdc35541ed1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32bf6b85-0c69-40c8-a1ec-9895f176f5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd12fcca-5705-459e-b019-e5d2e6382c8d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b159006-3f4d-484e-9568-9376a6a5da3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e401f7d6-3d56-4b4b-9efb-e7bb96cc2f7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07dec84d-2ebd-498d-9bfc-e3838d76283e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e64f893-8a0f-4f91-aecc-592c8a6ddca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2171784-a273-4cca-b56d-622c049f4a09",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09583a8b-327d-4603-8bc1-33c11c5284e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dc16aa6-7212-4052-b574-a8b854619ead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c497b46-4096-4ec4-a349-92868848c62f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "691e949f-9d9e-4f6e-bc9d-e09884280ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ef554f-e5f8-4f96-9ab4-1ba79ddb231e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2779b031-093f-4d8c-b5b9-15f46fec9d02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41f68ef7-b0d7-4e5e-81dc-a040aedf800f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd83878d-90e8-4d07-9d88-e60628d84f7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e47ae3df-cb3c-493c-a326-b58d7760e62b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f241108a-730d-463b-a09c-b02154ecd42a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42bd5d5a-7b96-4fc1-aca5-4408ccc69b66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60d0906c-5a18-426b-829f-0b1d6624ef3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d51f63-1d14-497a-91aa-ad35aea4aab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad6d2d98-bb2a-4447-befc-a5f2fc2ad29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6872c12a-0ccd-4eba-a752-45bb685a1a69",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e074ba6-3aa9-4790-8418-d3c6428ede21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3eaacff-53c5-441b-b402-8908cf667558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30ee4cd-8a42-4774-afdb-4709a90daebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a76f691e-7103-4b97-940a-64bfea0612bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc710809-1cf7-4afc-8eac-d3c2eee23975",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12946ef-000d-4f4c-adcc-047a6c9c6699",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58547cec-4e2e-4612-89e1-a532f4cb021b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad4bec8-3805-44f5-87ed-8c9452936607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d79caae5-ac14-4a67-90c4-fd4f7d6daba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0566c625-ed1d-4696-a934-5b54769bc191",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81be00ac-806f-4263-a658-f55c072c90d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69b0f874-3e77-4430-abd4-f126e2a4f74f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a0c7e8-4c20-4c70-ad85-055024668c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "632fab0a-6b33-433d-b067-cb66b3c33ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7cb954e-02ca-4a92-93e4-e39d2c6c21b9",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1d8d82-9ef2-46a3-8f05-e232778bafbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ef9a94-4858-4846-86ea-9fbffb182eb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba72dd22-cfe0-4a64-b159-4c7c090228e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f88c1a84-4a9f-4d62-9a72-8bca7c9ac2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d967545a-cbd7-4b27-b03f-b1ef21c06867",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a49a921e-44a1-4060-875f-da4f5532ca1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6442e168-34ad-4d88-a7c7-0115650ba4ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a34ca8-0482-48e8-a24d-312bcbc6d5ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "165e2a43-1454-4907-b8a1-37cec4c5124e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ad9862-9505-4e75-9308-0ad2225582b2",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c05b0da-c3c7-4d51-8930-4d9947f2c78b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ac07b25-a795-437f-a0d2-95650944c411"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7fbe20-e3ba-43c4-887e-06978642184f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "201d5d43-98f2-4b98-9e87-9b32e101c642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5015b2a4-f0bf-42dc-9367-36c51cd45106",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ee70a8-f7f0-419f-b65d-c723cb7be863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8314a22-50cd-4997-9dc2-04b2cd5db149"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfea48b3-656b-418d-9e82-2f29b809ed0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b47dd4-a5fb-4936-ad03-a2b3b36c456d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617dafdd-7216-4d0f-a5e3-953c3da29e05",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1487c89a-2a03-4481-b678-12df9bd17688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80c5caa2-7396-4799-9c9b-85fcd3381f29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2852e30b-f002-4fd6-ae95-969c11411c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78143ee7-596d-425e-b3c1-510164e3abcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d7c7ca-aaac-4096-a9b3-4aceb8a2985f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2902b266-fc24-4c0f-921c-8b88a2584f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e7120d9-14db-474c-b8a9-dee830a79ed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb77877-8eba-40a2-b692-a91440e9135a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6770659-597c-4616-adb0-b16b20686d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a625473d-49db-4306-a6a8-cf0c35e9832b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4be38f-e087-43ad-9e92-6375f536b8b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf600087-4086-41ae-9617-2b3a6b0c58dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "284ccc89-e270-478d-a66d-d751c4152f66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d60fd6f-26d3-4595-b0fa-43c397717f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642d0c61-abf6-4ce5-a2de-2f20aaa539c3",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae37a2e1-f783-4347-a5ea-ee4da5f9a38d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1e79448-1f43-4c7b-b6ed-21abb221451f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c966a900-49b3-4a50-82ed-f3371a39d2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd1a2e9e-a9c4-4cca-bb88-4d23f8599f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60dee363-c91b-49aa-ad69-02b22e859819",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88831f80-4b5a-41a5-acee-5602f8314b31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4edfa80b-205e-46d3-ab9b-9b5853636ef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ee8798-31a1-44d5-8080-d045ee0920dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "865d17cd-1c38-4050-8d0c-16debe32efb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e2984c-5fd9-4b03-8c90-6bf6be22575a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947d0920-229a-440b-800f-8843c69038e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c66846c1-6046-4db3-986b-4ea697c87288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f921869-0624-4546-8791-5a7f75d29931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1671eb16-0a1d-4eee-8dff-74b7fe619a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87ded81-b99b-4680-965c-1f2c6afb3f83",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e09168-c69a-43b3-98b2-ab67553c57f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bf864c7-ddf0-4b2a-9f7a-e351caa2c1d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b933a5-cb5c-4339-9d8e-6835f74265eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10fb3108-1f18-407b-9527-5940aa65a2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f44bf42-bd1f-43cb-b4eb-2eb4b7f729f7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8260d003-2b13-45e2-ac80-e03c2d7ab3e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd1034ce-e847-4076-98d3-613bc5cdd675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99da6325-1a35-4daf-aff7-8b54cfaadddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c33f93-f97f-4b5b-a5d4-4eebb4a3600b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47adf243-38d9-41f8-9fa6-dce92269a450",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3bbd7c-5899-42a7-b9af-194c19a551ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae38563a-1162-4be0-b632-c74b12f24817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd02a757-de6e-4834-b46d-e1ea890b21b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a27b95c-e17f-47c0-9b1c-e45f647a0f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fad8d06-ac38-4d3d-8fa0-70a727b8d1ee",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2067552f-87e5-424c-8487-7bd7b431e6eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c0d9f95-658d-45b6-a2bf-312f4ca24b9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "361afa1a-206e-40cf-a347-5e944fa64cc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a9b2a8-7c02-402c-b7a0-296c70133cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c5e8ab-588b-46aa-8fe2-e479881313ad",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997b7b2e-6042-49c5-adc5-576269b32f7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2ed577-5bd7-4a13-8167-6e857da3b7b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff2ecdf6-6453-4d52-bfa0-8f6de0ba8201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef6f749-d216-4bd7-90dc-6cb5b9572a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a491ea3-1ac0-4328-b05b-356f703eae8a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4efb78-e745-4f7c-b560-a5179efb921f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70258d65-edea-48f9-a4af-a0c74941b509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3078dfa-f0e1-43d3-8df8-103991c3daed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3039bdc1-c6f6-4b63-b104-c824ff8a2e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b324455-0456-4855-84cc-3a66a416f561",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e22c76-976f-48dc-89b1-fb21ed932f16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61688a9c-86e4-435b-85ad-d081cd0393eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2aadcc-b7ce-41d3-a639-1405f9c149d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc46954c-0416-4daa-a8ff-7752200816e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381010e9-2242-4d9b-a225-0d580cf60798",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2820c8-7322-428b-b1df-223f969b2f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa792128-df23-4975-adcb-322d3c1ab340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c652cb2d-e951-4728-8f26-38f84dc30d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65874d2e-5ec9-436e-94d6-4dafbce18d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d1a086-3059-472e-9b07-e7640dc8ef1f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7bad7de-c5e4-4c24-b406-82cb44e6238e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a07ec3f-e46d-48a1-86ba-5e642f8b7117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c8395e-41c4-4a2f-b2a7-5687e4fc8cce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "097c5126-3507-4aef-baa5-bf9c875ef682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b9449a-1feb-47a9-b9c6-ab877c718147",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be2cb95d-4b21-426c-8275-0b5c195a11b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06953d8a-40ef-401f-a129-7030109715d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45748aa4-33e4-4dc1-9a22-9db8188988c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d92366d2-2966-4578-af11-c91f0450d4a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62723484-38fb-4191-9086-772396674f30",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f63fd3-6598-4d1c-959e-17861fa99021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa5aea7-93ca-46fe-82ae-8c90aeeaf83d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19426fe5-a439-466a-9887-1678c7cd7fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a574beb-3ac1-406a-96e0-84c8d3e94af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ddfc96-616a-4170-95ee-d462641214a9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e0409a-3254-4957-ba3c-2c422fb120f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d76b58bb-850e-4494-8c2b-c8c352501485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e479e7-143d-49c3-ab40-8804cb484665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faf1bd51-300f-469a-8a7e-90871eb1c2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e570cb0-b935-4224-bd4d-522b64f08250",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaef52c8-8169-4b47-8d0f-f5373e651efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "519bed80-f144-42df-be24-4e9d60ad0a52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5c8d47-67a2-42c8-a731-dadf732ee69f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d8ab827-f3c9-457c-8fb5-4e3b56dc7a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6bbde01-b744-4e13-89c5-be9068a9dee5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce800046-26a3-4b02-a438-dff238426118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7998003-cb35-4184-8ae9-8a96de57171d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3948a4bd-033e-4e4e-96ad-17f5b1c75bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7f18330-9677-4c7f-a258-95145eb9ff7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3615e349-b308-440c-adaf-14dadec345fc",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77f0f4a-086c-4183-bd5d-0f29be950d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c47d07f-7fbf-4295-9059-c58dc253ac83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1e8103-a570-44b4-8ea9-13749381898e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc7f4a91-2f88-4b17-b25a-57981fcfdf87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11808a08-577e-4938-9b23-4994cc53ddcf",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b84166-a791-4e5a-abad-138d58918286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e41fd0f2-a17d-45bd-9877-6a979f0e98e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0aeda3-ee1b-4584-8371-128a5c43cb36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c975d920-d286-4695-ba82-475a77949aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33184921-8556-4f78-a494-e6f39859500a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0eefe5c-0784-45a2-8d78-202f3a5e8493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ccf27b9-8692-40a0-a034-902430668084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86911d7-c69e-4978-9e67-50be777520f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15ee09ee-c7db-47b9-a30a-e7ea0f9eb859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee25a3e-a611-4abc-bffc-d38117ef66ed",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be84acbb-75e3-4a72-a142-0c2a01d675aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dae7dbd-d934-4877-8b33-d33b9bb6943d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "994b8738-416b-4d71-9667-db8d2e8713a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4acf0fc9-f63e-439a-8954-417b17224f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51268baa-8c7a-4ea4-b624-9eb21f63568d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44b2bd9-1373-4d84-9577-faeae3f37562",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "549d93a1-d9df-45eb-b70c-16d3c460b0e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0c7f08-edbf-47ab-8dde-98e8cdfb1e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33e480bb-8c60-4622-ac7a-2d77cc7a4fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651ae789-04d5-4337-8ca6-7516d7d3c1b1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e95bda-9279-44f7-9edf-496b3260a11f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75de4db6-98e3-43b4-9e75-c914be77eb4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1705f25a-3def-47ec-b7ee-b5ce3aaf8dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de82cbf5-3d7e-4aa0-89da-a7dfb0e7c6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf7df5f-8709-4808-b951-2523d97033b7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ad5908-7499-4090-9ba0-b1f684ff993a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11539edb-a86e-4a62-b421-6e71da6053b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8baf9b-6475-4258-9fcf-81a3924b9eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1254e3e7-2701-4a97-8ac3-a603ed88d30c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d634346-0267-45a8-bb17-53056857ff3a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2472e0-a64b-474e-96ba-7436d5b2a608",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f59153a-09ad-45b8-9f77-733cc88ca08f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a46147-79c1-4063-bddf-77305913cc19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "617a4fe3-1c2a-4aa1-8e89-7445873a8925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805ccfbb-933b-4cc8-9509-f402021fba00",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c4335e-d2ad-416d-b65e-038a91725d46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6503e953-f47e-4cfb-a7b1-4955f5a1dd2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3673ba9a-ef70-4142-9156-d203840de0d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "875c1a20-7dfe-45ce-8c4a-63a766c0838b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068ec223-7d4e-4418-a184-5f4ce4b74d7c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b1b9f7-e6a1-43a6-a6ad-52b628735c1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba7dfaaa-8b0d-4109-8ff0-81aea0b079ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "265ac2b2-9f66-407a-b230-90871f246479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaf47896-8b80-4402-853a-68a341fd0af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea10690-f789-4f5c-b4c1-b94649f01ee9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04474db2-5281-4096-93e9-350c6572e3bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08770062-169d-4a73-855a-21c101396676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5aa7986-80e0-4562-8e63-0e1304b0b1ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8105d6f-c5f0-4b5e-953e-86ce45955599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e50c8eb-a3a6-4da3-9888-cdcd18ddafc6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59482b36-1250-4aa1-aa8f-341929af2a2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d309b48-5557-4b84-b125-ecbdb36e57bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0f8ffe-5ce8-4359-9174-dfa1263d2319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70290499-f189-475f-9592-bcf5cd8e24ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567767e5-461f-4fc2-958a-c02419020346",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd62d62-02f6-4cfb-8f5a-24f71031fcb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88505d0c-4e06-4a47-9ab2-843081b77c31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f239e7a3-2602-42dc-a465-34d37446c432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5a082fa-55f3-43ad-9478-daf110aaa875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c33712-0cbf-455c-9b55-47ef8a8a4221",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4222e1a-1c63-4bab-9487-1b1cffbe8f12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d95f7e22-fcb2-423a-ae24-6f41d7df2266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9decc5ab-6e6f-4e40-ab30-f169474700df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b83dd1e-5405-4dba-90af-4c08aaf4635e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c789b7-85d8-461b-b474-be946e9f1f42",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7dc8d1c-93a7-4d15-bf9c-165671d53b7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1510e08a-85a8-4d6c-a274-c7ccb5994868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2064944c-aa20-4bc5-ae9c-b95454bf4765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1db81f29-c87a-4a98-ba6a-691ba8141cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a23f02-4d86-438b-9859-2f695b230f78",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8826a294-63f5-4e40-9bc2-3ffef4b8b525",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7eae3e5-9b12-4e18-b591-fff7b0906143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbac1b7-8fc9-425d-b8fa-6fe8f33c4b17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b9eae5d-aade-4d28-bcd8-7cd6dbf34e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fdaa6f-f7c9-4fb4-8ad4-136fb6657b02",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7e0963-646d-4113-a057-6c69ea8928a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1a97bee-d3c9-4035-bda9-ab7e5eb2bc5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab6aecb-d921-4600-ac28-2942875fae8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb3d39e-f6c1-4e9b-b1c5-d071e5846c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8dc756-e2fe-416a-9e8d-b11f223c38b8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0737c799-7387-48e4-8983-164d70422e45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b391b165-3973-4eb3-b667-a2b51a1f04a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4af7bf2-9254-48b6-b892-c53f83814ecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0af87184-829d-4756-ab85-65b27f01979f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19989e19-1e31-415c-81e7-e9c7dbd30385",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d68c2400-268e-4cf2-b4bb-d4f7cb62a4e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b26ee201-27d2-4150-aeec-c2274c0338dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f85bda-20a6-4b24-8c0e-a5a6310bfe16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "face466d-3f8e-4cf3-8dd6-492d885440b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1324ba01-4b08-46a9-8423-c34856205f5a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a017329a-3f4c-4eb1-b80b-77085eaa4d1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6d98324-fc8b-48ea-8445-c11d93880cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7909f0b8-d4d7-41e1-879f-43ec1de860df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09eb8887-c9eb-4abc-89c8-5e9616be42e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b65c54b0-2c21-4d0e-83ce-aad5f3aef370",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75758d06-7eb9-4c1b-9b39-5cc49feedb13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce1e3695-fbfd-48e0-9393-0588fb79c0fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b677a2b-854a-46a9-b70f-861113e8f2ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8cea3ff-d926-4b59-85c2-becf6afd3f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eabbf6a-f753-4497-b830-2d1e6e27c650",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6328f768-93a1-4926-a30a-ffb6360485cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43592e29-12bf-4b42-ad1c-72e963934673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c542de90-67fd-4b12-844d-90db06027db1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3807ca8d-8210-4748-8427-85a8d9c5d385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f8324b-48db-4698-933e-93967d42425e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447241c5-d08f-4d4b-8ce7-7c08283da082",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "501572c4-6557-4d29-8eea-a458cb6c93da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2f8f26-9dc2-4713-a2e8-2e023f99a412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23d8c22e-37bb-48cf-a723-847a9966760d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc807e9-df9b-4df4-ad34-0e2903778310",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8218687e-941d-410c-9b6a-52c24136e5af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1387cc57-9320-45c0-aa9a-186cab767512"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2b665b-5a9a-43c5-8297-5dced38f7573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49aaac7e-3999-4b62-a486-b3a43dd8be2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b84be4e-e892-4a20-aaae-ac5258907d5e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efdb516c-13a8-424c-8db6-b5d650302a30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a19c81d-fb3f-4e3a-8df8-ad2205fe37d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4242259e-d769-401c-9aa3-236e784db6b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53758d0e-30fa-4e2e-be51-f9c28bdd4f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f91f0d-fed1-4338-93b9-0026edeaaccb",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd447e02-3f08-4c35-8af4-fb24b63f6d02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5ec6d19-3995-410b-b9ff-a5638204ac91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3834e4-9242-4c0a-b76e-8bf14bb17d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f22f987-b555-433f-9aa7-ff89b5695489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f3038e-cfd0-4d9b-8b6c-7a2a9db065b5",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d749457c-cd98-4ae9-8e4e-a1f25f786fec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5d79d34-5dd4-4de4-9ee0-f5bc341be6cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a97ca3-52f4-480d-92fd-71faf3d0b880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bac51f9-5aa9-4d44-849f-6feebf821531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f981f0-a3f8-4ade-a094-a2341ecd7cc1",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68cbfe3f-6253-4a8f-b5b5-092662cb0e79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7de0f0d-71c7-48fa-afb4-295ba97d5b90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1e67a9-2add-43bb-8167-ea015993b97d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c84ff5-bf6c-4dc4-902a-8f2da0b35672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273b87ec-cf96-4149-82ff-17d76c49b584",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7faa44-6ff1-43e4-9c09-05e22afb4b1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a87fd130-58d1-4aec-a4f2-2b38256ff1df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8077e60f-6f02-4e10-b61b-46cd020fa09c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deef74d8-b1d0-41f0-9e12-0679bcf30045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b817658e-7938-4df7-b250-a303abca7126",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a5df8c-db23-4252-9795-f9dbc98f5197",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dc96ebe-f52e-4d80-9309-628ee59ea79a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbac376c-1548-4b6a-86ff-b7f62192a86d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fbc00b1-bf4a-41c1-9c8a-c492f74a1459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e971539-a891-41b0-8679-7867a05370a7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b375818d-264a-41cf-95b6-d72d3fc957e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34b92c8a-28b0-4953-80dc-0e46d1cc87e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f92583-8da0-47e9-94cd-a6b9b255f266",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "278f725b-53f0-455a-9de6-ad21a573a964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a21772-5546-4d93-bfed-76bcfd7c9ff7",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5bc189-5e90-4735-a890-bc5ec258bff7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daabcc43-0bbf-4fa8-a3d1-aa6c873f0446"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bee2c5-29e9-45f3-a058-e977b72d77ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a977750-cd48-4b50-af96-bb8e31facce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8c12da-ae41-4dcc-9001-57232798e18f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19cc750-6274-4b47-8e4e-1e62831f2423",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff923dfd-259c-4535-ac19-ee99d545745d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cff8e7b-d1e3-48c3-bd3a-76ef97ceca57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe83dca-f62f-47b2-9815-f6541fd8d690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c818256-05c6-449a-99ec-8a6e68ab0c4c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c6b2a8-2569-49ed-9cff-0ec751e08ec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "828da87e-36b8-4132-8e1a-a8c6593a23e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0151fff8-a854-4352-a143-bfda5e67b5a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd186587-bf4d-4824-aeec-98145c2edd0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb6408c-3a11-4fb2-af71-f7da56e9d94f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cda8fb5-9ca2-4c10-b454-b22ebd0fe26e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "877d0e0f-9778-4759-aaa9-7b191866cf31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "258512b5-f0d6-486b-8206-7da88bc1fb05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5069bd1-df06-4655-80b2-366dc5b78eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8afa7e68-8bf4-4f37-a210-fe8913a5fb86",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba508a6-f103-4ef3-a70f-e492c2e4cd6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "406eae0b-32db-4629-925b-b2e1e94fc6fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b270b4-f5b4-4a60-9c8b-31cd03ecc3b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2ed9b5-7b56-435a-b477-29a85b97ee9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee891e2-10c6-4f9f-a969-4332ef8ea948",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f43d07a-f2c9-49ea-9771-386d355929a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cc177e2-9ed3-4aab-9edd-8a4af832092a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7cc6516-c43e-482a-bdc6-d996ec7fc182",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4252882b-6b30-4fb2-a5b4-f5b5a918e845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a297ce6a-a349-44a9-ada9-1a2926244c8d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4deb1cd-a456-4986-a9fd-6075f36d0a97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "412bdecf-b9ca-4025-8f41-a4bc73c67078"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5ba37b-0d3b-4124-9015-8e61536ab927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e481aa5-a5e9-44c4-a75a-24ff05c00bcd"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0f6e9de-f955-451c-ac16-18df89682751",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1f4c711-9013-4e27-9d14-2c4324ca7469"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0dda84d1-1cc7-4794-9229-daee8268b55e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "504fde5d-b12e-4c4a-9695-84ba1290ff25"
                    }
                  }
                ]
              },
              {
                "id": "59d08013-397e-4d46-865f-0f61215d9a1c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c394bad-dc88-4e8d-809f-157dcefaa113",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e0294b-bf1e-4175-81ab-22db47ea1f3c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "87560469-2631-4430-9008-19546c88731c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c195c9d-a078-4a96-bf09-7d35160758c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53e44971-e913-4e6d-afd7-09fdadb61f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f143e3-ec36-4e08-84d3-d35f0c889ff7",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7585b357-60e9-4398-bcd6-1a15324be2ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f6dd830a-3c0d-4904-9ad3-877e545c68a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd8c0e6-3969-44b2-a13c-6bf5cd6db666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3367ccde-3732-47a0-b434-eee2423233ad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a9f03a8-9592-4f65-b9ff-1482e36ae6d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8065f96f-5522-4131-96e8-aa27562ebc33"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4f2e7ea-2a27-4a50-be3d-63d838c41e7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63d8ab7f-2241-4436-b526-ba6f4e85e285"
                    }
                  }
                ]
              },
              {
                "id": "24f6aed0-9e86-4706-869d-014e15804a6f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1874a5a5-e607-4213-a5cb-c71937faa843",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba3b76f-96ea-40bd-b137-7a2c2d1f9095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b6c2511e-bc05-4b50-8e1f-b2c79938ab0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd96a2b-34a5-4977-a355-6892aece0223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb7e32ee-cd53-4ae6-996c-0de024bd786f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d537adf1-415c-44d2-8bc6-6c07435c65a6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7803072f-a5e2-4714-822e-37a273124cdf",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "75f57a9b-4a46-472b-9506-2b040eca68a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "138cca0b-21b4-4c92-95d5-a8d92c8537f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03dba491-02a7-4b29-abab-c54eb40f42f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3677c03c-eb8f-4ec1-8d82-b83ff70f7ce1"
                    }
                  }
                ]
              },
              {
                "id": "3e2ac354-7fe6-405d-9897-3550fbed29cc",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99583bd9-75f9-4ab6-8854-40cb822e3baf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5bc7121f-b128-4e06-bd40-3749c803a925"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "893e3755-1db2-4406-8056-1a278e830dfb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68822f7d-7643-4498-95a7-a3f67616462d"
                    }
                  }
                ]
              },
              {
                "id": "3e8cac89-59a8-432d-8e1f-f7c778beee22",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13252d4a-45fc-404d-95ec-75152a2486de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9f31eab0-d9bc-4686-ad05-f3d3b4c49ec1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "634059a7-d404-401b-b9c9-61ca4aedddbd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e3fc158-3100-4626-b3e0-ad2597aa4604"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42bbad9d-c368-45ee-8e59-9e633979c54b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "18713de7-f53c-444e-8d8b-7d47575bbf87"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a1ba4515-a639-4cba-a5a0-79714c1bd4a1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c18137e1-56b6-441b-87dd-fb87c43855e5"
            }
          }
        ]
      },
      {
        "id": "0ee6669b-ae6c-46b3-b3c4-a4dd419ef398",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9c0d408a-37ba-4c00-b712-9d19eec6e5fa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "359e4d75-36c5-4a7d-a02c-e87aac75169f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d6883026-165a-47ad-8b8f-a56efd33c241",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1748a5-428c-4564-a2a4-f788f25d4f4c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "38883777-4ad0-463b-bf42-b670113088af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23426995-a20f-4b8a-b96d-4a8b6ac6423d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5af1fc0-e62e-459f-afea-e0a2c0594e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157759d4-e8c9-4fc3-a4d6-dbd984418ad7",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6bca1d-ac19-48ff-9588-42ce200fcc2a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "42accf04-3660-49dc-919d-4580a286f548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ebde55-840b-456e-a5d3-3bd6096aaf1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bac7a8cb-29f0-48d1-b9c6-b8012347d0ed"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b9fd105-f971-45e1-a800-64563dea5fe7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e33271dd-a247-43d4-a3ab-dbe3dd23579d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2b6b0bc-2dca-42f8-9530-828a113a3aca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "660a054b-adc2-4630-88a2-43beb0af5693"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f760bf8-fe5e-47a2-ae4b-87e6ae251bda",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b303ca5a-be54-4fe5-8965-006af947c05e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b212e88-8935-46f6-8f01-adc7c4c1753f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c20b313c-c7cb-4a56-9c57-fb3ee1df2e0d"
            }
          }
        ]
      },
      {
        "id": "3626ac78-07f7-49ae-956e-9223014d2d7a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "dce5ff24-ad51-4dfe-8426-da3bf6257644",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ca172c35-9c52-415b-85b5-c87a47e0324e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c4db6d4-d7f3-4291-ad48-d0a2af7d5d92",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712cfc24-a5e2-4c80-ab61-1cebd42aecd2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bdc52284-7ba5-4a34-823d-1129020bf140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb616ab-9fde-40fb-ae8a-2fbc1c1a4926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3788acca-c508-4f57-b4b9-5b212aaf4778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd37636d-2a72-4d19-89ee-4a584d424aff",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e60e59-bf1d-45f8-bd14-acdcde966659",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "198472dc-955a-4d63-a383-84344b701a08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae57f26-145b-47d4-98d4-cc7ec19047d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7dbf9af-a921-4dcb-a074-cd9b83fb2800"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d6a6c3e-1943-47fe-bab5-c8ab36c7b9cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39bc9a97-ff47-4e4e-a20f-ef5ce20fa143"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1db5bb24-77fd-4ae9-993a-df494f148a30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d944285-5a5d-4fc9-8ca5-34f87b3eaafe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "76089db6-9d14-4a7f-b618-057d5b9950ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "201d37e3-db06-4864-81b2-abc7c3de8901"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b4feee7-7d21-4899-b104-c6c92cd4ea7b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7dfcaa4e-e2b2-423f-85cb-24236a7dedab"
            }
          }
        ]
      },
      {
        "id": "07ad8263-6ad3-4a20-b246-6adb5ff689cc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "84fbaf45-4fa8-4973-848a-7fa8e6398f5a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0325ed7e-774e-4113-a081-60d2629a32f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "86453a64-3a09-4d73-a0fb-b5db400b2617",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d962c7-2748-4dcd-a374-5eef578e6b2b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "92cb3423-5eb7-43b8-b72a-245f22969971"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09b3047-ea5c-45ea-a720-635a92d4453a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93846373-c4e6-4dcb-b64b-14af9f53634e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9df928-d7c0-4e00-b44f-fe67f8d9fd2c",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e16a80c-b1d8-4e28-8894-89b15c336ad3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "381df7f3-0931-4dd4-a5ac-fe01f98ac23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f61c41a-d8a0-4b78-9192-828916161b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e1a7b1d-c347-461f-a0fa-132f2213ef39"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a03e616e-941b-47aa-924e-a947867e5f19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "acc4f40d-e111-4152-9999-6ccc2d261af5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a16b892-2f00-4dec-9328-329d0c750578",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42ffa401-116e-4f7f-876b-9ed07412990c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba663c2f-0493-47b2-b69b-ad6f4a5ae964",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a1c8a738-23ab-49fb-bce6-7dbe17e6bf76"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca692d19-dd8a-41b9-898d-795fb9eac09a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "939d4ae1-38d7-4683-838d-e6fe985aba7b"
            }
          }
        ]
      },
      {
        "id": "a148fe00-e5b6-44a5-a189-a4c543ce66fc",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61b7acf3-0723-4313-9ccf-61d348383663",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "400d1b47-7f6d-4122-acc8-e7bfa96cfd91",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6415ffe7-d5c5-480c-901f-d09efa28bc5e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "daf9204f-7937-4cca-a964-0a0fed56da4d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49be05cf-79ad-46d3-b7d1-be758b1e95e6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 70.18773946360153,
      "responseMin": 8,
      "responseMax": 712,
      "responseSd": 117.56576052964128,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1670892137403,
      "completed": 1670892168716
    },
    "executions": [
      {
        "id": "7956e96f-7975-48cf-b920-a93dd5abb18b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8560b624-b7c1-4872-ad43-f316a44b1cf5",
          "httpRequestId": "5ae52b1e-174c-4f46-b0ea-3bca566d2f5f"
        },
        "item": {
          "id": "7956e96f-7975-48cf-b920-a93dd5abb18b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7be5349d-dc1d-4c30-bd89-508708c961b9",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "72a07422-a5f8-4161-8804-855ffc88075e",
        "cursor": {
          "ref": "19e869b7-fe54-4c42-be28-01f346a323bd",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "254ccce3-5697-4dd0-8ff5-5cb959af019e"
        },
        "item": {
          "id": "72a07422-a5f8-4161-8804-855ffc88075e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2c35ee68-244c-4616-8ab4-ee1f51ddd8b8",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "4ddcf8f6-5a01-4165-906e-d15494142d93",
        "cursor": {
          "ref": "b8c9ecb6-7bf3-4f64-863a-8152cb8f99b9",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "088b1956-77af-41d8-9606-ed57bb6ef874"
        },
        "item": {
          "id": "4ddcf8f6-5a01-4165-906e-d15494142d93",
          "name": "did_json"
        },
        "response": {
          "id": "ee0c13a0-f058-4980-aeb5-7089167bb605",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a03acee5-71c7-49f7-b2f0-a5f953b8c67c",
        "cursor": {
          "ref": "12306995-6e72-49ad-acd2-7c78954a70fe",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7d6f888c-8de4-4429-9e5e-f6cdd105e86c"
        },
        "item": {
          "id": "a03acee5-71c7-49f7-b2f0-a5f953b8c67c",
          "name": "did:invalid"
        },
        "response": {
          "id": "be103e10-416c-4c1b-9eba-32b4f1f67782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a03acee5-71c7-49f7-b2f0-a5f953b8c67c",
        "cursor": {
          "ref": "12306995-6e72-49ad-acd2-7c78954a70fe",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7d6f888c-8de4-4429-9e5e-f6cdd105e86c"
        },
        "item": {
          "id": "a03acee5-71c7-49f7-b2f0-a5f953b8c67c",
          "name": "did:invalid"
        },
        "response": {
          "id": "be103e10-416c-4c1b-9eba-32b4f1f67782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc740d76-507f-467d-93e0-ee28c81ba6c9",
        "cursor": {
          "ref": "3ac4471a-d970-4033-9288-1ea675f031fc",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "68d45499-08d1-479b-b9ed-9d259e522594"
        },
        "item": {
          "id": "fc740d76-507f-467d-93e0-ee28c81ba6c9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f20c3f42-3750-48f2-93dc-8752660aa53e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 91,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8604d6ba-69b0-45d6-abd8-5f886c95a332",
        "cursor": {
          "ref": "fd71c804-268c-45d5-80cc-10653b73d024",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a6dd34b6-ebd9-47b4-92d2-dbec9e2b9bcd"
        },
        "item": {
          "id": "8604d6ba-69b0-45d6-abd8-5f886c95a332",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e3c70ee7-c7bc-48ed-9e00-a9a8f9785aa3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 12,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf54cbf-375c-42f3-831f-2d8c9e0cf854",
        "cursor": {
          "ref": "b1b1a7e0-40fe-4dc7-940b-0b34c82dbe9b",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "761dca90-dc23-4f4e-a095-246ab44ae7e9"
        },
        "item": {
          "id": "4cf54cbf-375c-42f3-831f-2d8c9e0cf854",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fc8c6223-2b53-41aa-9e3d-cd537ff6d29d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f60d5f1-344f-4e2e-a9a5-1dd26c9d0ba2",
        "cursor": {
          "ref": "3a1f77b2-c752-4803-8fbe-fd93eb691d3e",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ad09f7f9-d37b-470e-986a-4cc67ec80c09"
        },
        "item": {
          "id": "1f60d5f1-344f-4e2e-a9a5-1dd26c9d0ba2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "42afffb7-522e-48dd-8b37-f26a80ae1064",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f60d5f1-344f-4e2e-a9a5-1dd26c9d0ba2",
        "cursor": {
          "ref": "3a1f77b2-c752-4803-8fbe-fd93eb691d3e",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ad09f7f9-d37b-470e-986a-4cc67ec80c09"
        },
        "item": {
          "id": "1f60d5f1-344f-4e2e-a9a5-1dd26c9d0ba2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "42afffb7-522e-48dd-8b37-f26a80ae1064",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1405bd-b200-4810-b57d-326f07663c16",
        "cursor": {
          "ref": "29f31a11-49a7-4947-a79e-97f49c395e72",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f4bb86e0-6877-492b-958b-0ae1629db6a8"
        },
        "item": {
          "id": "4b1405bd-b200-4810-b57d-326f07663c16",
          "name": "identifiers"
        },
        "response": {
          "id": "42fc3130-ded1-45fb-9c6f-a8580f9bac03",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c1a746-c27c-48f9-97fb-ec90fd3aa666",
        "cursor": {
          "ref": "35e02448-c74d-4e42-9d4b-dc71f1f09a39",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ec806bd9-9efa-45b9-9638-f83d458315be"
        },
        "item": {
          "id": "34c1a746-c27c-48f9-97fb-ec90fd3aa666",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "70b801f6-2376-45c5-be14-1ddeefc2608c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c1a746-c27c-48f9-97fb-ec90fd3aa666",
        "cursor": {
          "ref": "35e02448-c74d-4e42-9d4b-dc71f1f09a39",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ec806bd9-9efa-45b9-9638-f83d458315be"
        },
        "item": {
          "id": "34c1a746-c27c-48f9-97fb-ec90fd3aa666",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "70b801f6-2376-45c5-be14-1ddeefc2608c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d13364d-08f2-41fd-b7a9-87bc17547e70",
        "cursor": {
          "ref": "0837511b-b7bb-4de5-a7ec-c89a3e27361f",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e6564037-c764-44dd-b501-3646069e8201"
        },
        "item": {
          "id": "1d13364d-08f2-41fd-b7a9-87bc17547e70",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "98914b03-43b5-4cc3-b09f-733747963a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8e3f41-5a99-430b-8dce-ef16bb493376",
        "cursor": {
          "ref": "3300fda8-8f74-462f-a5e6-5c2496aa45c1",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "10f3f4c8-4830-4bcd-be43-7a5ae5142f46"
        },
        "item": {
          "id": "af8e3f41-5a99-430b-8dce-ef16bb493376",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "314be8ca-f881-442c-b0ab-5c863dadaf0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f4994f-7aec-4e49-9606-4a66d4aa0d57",
        "cursor": {
          "ref": "b6d55ba7-f2e8-4a60-9f24-9384dfb858a6",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4ac0d646-da50-4442-87ad-0a4441d40ac1"
        },
        "item": {
          "id": "74f4994f-7aec-4e49-9606-4a66d4aa0d57",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "df41eda2-914d-4176-a84d-1c841acfb42e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fdca0e8-3cbe-4b94-b5ad-f7cd22a2ecfe",
        "cursor": {
          "ref": "7efafa50-4d68-47c2-9f6f-cbb2767a650e",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ded2acfc-af21-4860-806f-842c6df273f8"
        },
        "item": {
          "id": "8fdca0e8-3cbe-4b94-b5ad-f7cd22a2ecfe",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "77e0d37f-9c97-4743-a2da-7bb3cc99b8fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac8d128-72f6-470f-9276-50d29e35879b",
        "cursor": {
          "ref": "b44a7228-2cf2-429e-9d3b-6fc260d78949",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "bc9fa2fc-cd4a-4f24-9137-bbd6299a131e"
        },
        "item": {
          "id": "3ac8d128-72f6-470f-9276-50d29e35879b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4b316bb6-23cb-4d3f-b7ec-dc415323f996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8423ba-6a1e-49cb-95a3-b0dacd92024f",
        "cursor": {
          "ref": "2f9f7b80-90f4-4f77-b8fd-47d90f3bf00d",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5ee6f65d-5ae4-43d2-9c25-00f62577bc3d"
        },
        "item": {
          "id": "ad8423ba-6a1e-49cb-95a3-b0dacd92024f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2d7b6e0d-de39-48ff-afd3-b2dd5dcd22b6",
          "status": "Created",
          "code": 201,
          "responseTime": 712,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "1addd72f-e015-4083-8786-a2e90633fdc0",
        "cursor": {
          "ref": "e225ea3c-46de-472c-8938-c33af55d8233",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "72d742c2-30f7-43fe-8d2c-a164e4a1c8cd"
        },
        "item": {
          "id": "1addd72f-e015-4083-8786-a2e90633fdc0",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a9c4277b-6656-4431-8897-457d69a5aaf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd58502-0300-45d7-bdaf-6c76deca02e6",
        "cursor": {
          "ref": "4b9552a8-e132-43e1-9686-26d64103b58d",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4f0c179f-7fb8-47fa-b01d-2d003623c98c"
        },
        "item": {
          "id": "bcd58502-0300-45d7-bdaf-6c76deca02e6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ab2539d1-61d3-4245-bba8-1c6efd365e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f16fa49-32f0-43c3-9f4a-c3d26e757cba",
        "cursor": {
          "ref": "127d9fd8-47af-408e-9ed0-904520b8f620",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "df0a9908-0096-4aba-a8ec-643933bf103c"
        },
        "item": {
          "id": "1f16fa49-32f0-43c3-9f4a-c3d26e757cba",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1dccee82-089a-4d0e-930c-29a82679327e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce694a0-519a-467b-9bc2-a255c0f83133",
        "cursor": {
          "ref": "9e9ee2a6-25f9-41eb-9916-04caee18cc65",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "20e10230-5d16-4dbe-82b0-7e99b8dde4d3"
        },
        "item": {
          "id": "bce694a0-519a-467b-9bc2-a255c0f83133",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "83b78485-aa41-48c5-890b-4cad40c62026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebf67ea-f771-4dc6-b677-02a112ef0662",
        "cursor": {
          "ref": "b4a714ec-9d35-45e2-b64c-175a414ca94a",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "17c69aae-759a-4a01-8451-4e0924bdd232"
        },
        "item": {
          "id": "5ebf67ea-f771-4dc6-b677-02a112ef0662",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3a3bb7ca-49be-4b18-9cd0-0ae59d085afd",
          "status": "Created",
          "code": 201,
          "responseTime": 440,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "a175efeb-212c-4a46-aa60-575d4d63fac7",
        "cursor": {
          "ref": "2207e955-8f85-4b70-809d-26877eb5ede7",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3386ed55-6d4f-414d-9b05-bdb0eba2034e"
        },
        "item": {
          "id": "a175efeb-212c-4a46-aa60-575d4d63fac7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "77f26bb8-7b70-4d5d-8413-c11b1a705c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b6c098-c83d-493b-9082-c574d119a3cb",
        "cursor": {
          "ref": "23940c82-5906-448e-bc47-9b30d8cf8e2f",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "11e5a29b-60b3-432b-a268-ae0b8b332246"
        },
        "item": {
          "id": "35b6c098-c83d-493b-9082-c574d119a3cb",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "42024c42-c78d-4c4f-99ba-ad597abe2edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2544bc83-8c7a-41d9-9ae4-254f54371765",
        "cursor": {
          "ref": "7c73156f-ff7d-40a8-9b05-30ccd7cffa7e",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0cb21762-a3e4-405e-b6b2-e036917b66cf"
        },
        "item": {
          "id": "2544bc83-8c7a-41d9-9ae4-254f54371765",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "208b4067-80c1-4b9d-87ce-ddea89a78751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487048ee-c58c-44f1-a63c-282d165d7cdc",
        "cursor": {
          "ref": "bd66b86f-c883-42ca-91ee-a30c8e8c2294",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2606f504-abfb-4f09-8b0c-d807650d2111"
        },
        "item": {
          "id": "487048ee-c58c-44f1-a63c-282d165d7cdc",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c2f44b00-c941-40b4-8311-6a3d2f19655c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ca45fd-fa19-41db-a818-8a0b8275c8da",
        "cursor": {
          "ref": "a000feff-e6fc-4637-81f0-0d43dd9906b3",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f29a1f6a-4b7e-4355-92cd-717a502c9605"
        },
        "item": {
          "id": "33ca45fd-fa19-41db-a818-8a0b8275c8da",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "86fdaf7a-8195-47dd-8dfd-a53fbee50aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fb7ae3-73c9-4bb3-8a03-fb6f43eb962e",
        "cursor": {
          "ref": "c7ae4509-7c47-4140-b74d-6cf386a47924",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "da6b7c27-1ada-48f5-bfe8-cc5c0d07aa58"
        },
        "item": {
          "id": "87fb7ae3-73c9-4bb3-8a03-fb6f43eb962e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fe18b89d-bcd2-4cf9-a877-f6727f30df09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8241ea-d6ed-4640-b768-17d28e7c34c6",
        "cursor": {
          "ref": "501fffea-bf90-4dea-bacb-a2bea138ab84",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7374d198-ff3e-495a-a3ec-cb59382a2a79"
        },
        "item": {
          "id": "0f8241ea-d6ed-4640-b768-17d28e7c34c6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a3ea566a-a59a-4ba2-99ac-a9bc69c421f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25437c5c-f531-42ef-b583-8d664b3b8dbc",
        "cursor": {
          "ref": "8dc5f98a-611c-44bb-a236-0a3052d5b403",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "74899efa-9b41-4a07-b64c-0cfb0a75a2a5"
        },
        "item": {
          "id": "25437c5c-f531-42ef-b583-8d664b3b8dbc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "782d61c4-fcd3-4577-857a-98c55bd4fc2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c5e1a2-3db9-4675-a2b6-ba885bf62f98",
        "cursor": {
          "ref": "f8669fa0-dea3-460a-96a4-ee9504ad1501",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4963b203-9127-494e-9bcd-8342a0781f68"
        },
        "item": {
          "id": "54c5e1a2-3db9-4675-a2b6-ba885bf62f98",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d366bb8c-41b2-42fd-bcb7-c994db3d75ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef7bcdf-5774-4352-a8e9-4f4315451502",
        "cursor": {
          "ref": "7086cfbb-e831-4f54-8e83-a580fedd8dc1",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8231f7f5-fd1c-45ba-a4f5-727e1ef0e4b7"
        },
        "item": {
          "id": "9ef7bcdf-5774-4352-a8e9-4f4315451502",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "172817b8-b304-4142-b6f5-27b126be789b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41aba217-a71b-4f50-9778-c334af5a8163",
        "cursor": {
          "ref": "eb90002a-1c9c-4682-ad69-36fab6289237",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a1606394-b873-483d-bb62-637bbb062729"
        },
        "item": {
          "id": "41aba217-a71b-4f50-9778-c334af5a8163",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "13bcbbe2-2cab-4d97-92aa-ece81a321aca",
          "status": "Created",
          "code": 201,
          "responseTime": 392,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "697d9fa7-bda0-4631-a91e-47ba14fe1d11",
        "cursor": {
          "ref": "d6b298c7-f669-42a3-acd7-ab7a632b0a3a",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a34f879c-8fc2-49dc-9b6d-7c498471abb5"
        },
        "item": {
          "id": "697d9fa7-bda0-4631-a91e-47ba14fe1d11",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "09402b57-8cd6-455c-9801-4ae34da3dc38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00845e73-69e1-4657-8c3b-f2558366ef39",
        "cursor": {
          "ref": "afde6300-0b80-4d36-abdb-a99e0c951ddf",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "eec2c703-1202-45c0-bdd3-8200de8cb24c"
        },
        "item": {
          "id": "00845e73-69e1-4657-8c3b-f2558366ef39",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d534ba8d-ef1e-412c-8be1-f086cdace191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce87fb3-554e-4dd5-a40d-3ea696b07fc5",
        "cursor": {
          "ref": "a454ac34-ba46-4f9d-a80c-590b8fc6b5e6",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f15d25e1-b714-4863-b809-62b66be41244"
        },
        "item": {
          "id": "0ce87fb3-554e-4dd5-a40d-3ea696b07fc5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2f5f40f6-87db-46e2-8bc7-9ca62c08a849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e67788-eebe-4d2b-aac1-4c227d966e1a",
        "cursor": {
          "ref": "ddde0113-6902-44f2-8fa9-79af4905737d",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "75142497-3167-4186-b0e4-cabb241722bb"
        },
        "item": {
          "id": "55e67788-eebe-4d2b-aac1-4c227d966e1a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "daed2a41-cd29-4a10-a882-019b4e0389f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75b61e6-1911-4c27-bb24-b30374e0471c",
        "cursor": {
          "ref": "92cfd837-28c9-4674-9852-ca30f094f638",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3d60233e-0062-453c-ac4b-efa903db004b"
        },
        "item": {
          "id": "e75b61e6-1911-4c27-bb24-b30374e0471c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "87cf86a8-5bc4-4851-8b43-5bbf9850b4b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ade5420-cee9-4d3e-9845-70560547b3de",
        "cursor": {
          "ref": "274e5ac0-f065-449d-b879-29085db7389b",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f38071d5-fdc7-4521-a289-161ac7af183a"
        },
        "item": {
          "id": "0ade5420-cee9-4d3e-9845-70560547b3de",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "977fbc80-ca2e-442f-b292-920f97678549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bdc7c17-fa6d-4774-91d8-53f5357ae839",
        "cursor": {
          "ref": "a61f1235-128d-487d-89ee-820ac7a5a452",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e6853021-ebb0-47bb-8005-e1ee1a9a6df5"
        },
        "item": {
          "id": "2bdc7c17-fa6d-4774-91d8-53f5357ae839",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7bfe9934-d277-4503-b33b-dd8e54ebb034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3cf94c-9824-4451-ab0a-3729d39caa8a",
        "cursor": {
          "ref": "24c0c237-490d-494e-a7ea-94e7741cd9d5",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "848aa04d-afde-4d7c-907a-449c45544a58"
        },
        "item": {
          "id": "ee3cf94c-9824-4451-ab0a-3729d39caa8a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f8b0f5a2-2af5-41a4-b27f-feda4cf2822b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3c6649-3b29-4a44-9310-7fdab1fd7f93",
        "cursor": {
          "ref": "be17216b-20c1-4deb-93af-5b8e071172cd",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a58c6f31-c8ab-4d65-a838-d739ed0d7de7"
        },
        "item": {
          "id": "7c3c6649-3b29-4a44-9310-7fdab1fd7f93",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0f1a6152-e441-49cb-96e3-a25fbafa8a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc2d2ad-8adb-4844-bbb5-ec2e258d934b",
        "cursor": {
          "ref": "833f4580-4b6a-49d7-b6a1-4901d659a829",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d6fa48a1-0656-47bd-ad0f-d17ac38c5f62"
        },
        "item": {
          "id": "3bc2d2ad-8adb-4844-bbb5-ec2e258d934b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "43dee479-ccb6-4f21-b301-8692ee626b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "682fdda3-ea3b-463d-b013-e3d7a6d054ea",
        "cursor": {
          "ref": "066533c7-d3ae-428a-a83f-674c4b2049e4",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2d9708fb-05c3-4d27-93fa-feb3617070ab"
        },
        "item": {
          "id": "682fdda3-ea3b-463d-b013-e3d7a6d054ea",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f68fa21b-e184-4a77-9687-e7666cdf053c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e268cdb4-e718-422a-afa8-dcc62c86800b",
        "cursor": {
          "ref": "a2e7417d-31e7-43e2-a459-6e609d61ca67",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2e388a4c-0a21-4ff9-badb-7528bed6911f"
        },
        "item": {
          "id": "e268cdb4-e718-422a-afa8-dcc62c86800b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2e928d2a-e966-45b7-8400-80b3e48395db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b4ae5b3-96c2-487f-9490-aa3a9e981032",
        "cursor": {
          "ref": "38a733b6-b7e0-462d-8a94-f24d035132cf",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fefbddd9-72c5-4dda-8919-6291946dcdd9"
        },
        "item": {
          "id": "1b4ae5b3-96c2-487f-9490-aa3a9e981032",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2ad4946d-ba3b-4058-8d88-3857468f95ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4abadb05-48e2-4d4a-b296-ce7ca245b9dd",
        "cursor": {
          "ref": "32699b75-33fb-4a6e-b414-ad084b430ac5",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "36daeb70-6d0f-4abd-854e-05753fd702b8"
        },
        "item": {
          "id": "4abadb05-48e2-4d4a-b296-ce7ca245b9dd",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c44fb47c-3656-49f9-b78e-67f453c7b4a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1b0ebc-ced8-41e7-8e10-2f41b2e23cf4",
        "cursor": {
          "ref": "971f8441-d797-4793-8cfe-7e63049ab7aa",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "acc8647c-3c7b-4e78-ae11-a9d3c21af6e3"
        },
        "item": {
          "id": "bf1b0ebc-ced8-41e7-8e10-2f41b2e23cf4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c02c5b0c-26f5-4c42-8b2d-acb7f09196d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da47f021-a067-4d2a-b0e5-2458a3ba9d99",
        "cursor": {
          "ref": "d1c1347c-c774-4fbd-83f8-cb932765c271",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "441979ff-5d19-48f6-9dc7-6716d87229da"
        },
        "item": {
          "id": "da47f021-a067-4d2a-b0e5-2458a3ba9d99",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "47e5afc7-4d9e-46e2-81de-64e18e37fcb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de8ffd2-0c3c-47fc-8bef-a21fe2945b6e",
        "cursor": {
          "ref": "17785876-ec00-4f8a-9cc4-9b3ad2f404e7",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "766b3d5a-3313-4e99-bafe-52242b0d902c"
        },
        "item": {
          "id": "9de8ffd2-0c3c-47fc-8bef-a21fe2945b6e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3469b875-5bd5-4433-8726-eeeb1267d870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8289b1-4d28-4fd2-8ae8-a5b011781211",
        "cursor": {
          "ref": "bba0e26b-4589-4b7a-b40f-85c1ced60b41",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f09b14ae-0afa-49a8-b29d-e9776ca8c54b"
        },
        "item": {
          "id": "bc8289b1-4d28-4fd2-8ae8-a5b011781211",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "41853863-e55d-4759-b752-c619964ba697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b3037e-e9d6-4c35-b868-fac131f50211",
        "cursor": {
          "ref": "24b737f6-8d27-478a-97ca-abb9b2a0c8fd",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "660f33d9-6622-4560-b7ac-dd52273dbe9b"
        },
        "item": {
          "id": "79b3037e-e9d6-4c35-b868-fac131f50211",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5f246905-1cea-480e-b5eb-6d30d9d900b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2d574d-c8dd-4c05-a905-c9f866863cea",
        "cursor": {
          "ref": "0c3102c5-8b41-4daf-af67-596904cc1f1f",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9e656dc1-06be-4d37-8185-24bdf3312916"
        },
        "item": {
          "id": "da2d574d-c8dd-4c05-a905-c9f866863cea",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5ffa4db3-6168-4c4b-9df1-38debd964dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3fbe9993-be2d-4680-b185-1988d118f8ab",
        "cursor": {
          "ref": "31f86f76-55cf-4088-a1ca-7e6f1e1c73bc",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "31a90d09-9c23-4237-84cd-b2d785c96ea6"
        },
        "item": {
          "id": "3fbe9993-be2d-4680-b185-1988d118f8ab",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0c633273-1db2-4dd9-9f41-549439c59ec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180bf0bd-5ef8-4b6c-a86d-a287aa7de100",
        "cursor": {
          "ref": "13012f7c-c731-4300-8130-48f7a85273a9",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "edb959a9-9767-4219-8b84-c8c429f73eb3"
        },
        "item": {
          "id": "180bf0bd-5ef8-4b6c-a86d-a287aa7de100",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a0389919-9a0a-4ac2-9e3a-29225d005b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13515801-9d2b-4f9b-9348-153595d0a85f",
        "cursor": {
          "ref": "7e719285-1005-4d15-ae9f-a5ae9d9584ae",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d5e373ca-212f-40f1-8e15-8166d79139ca"
        },
        "item": {
          "id": "13515801-9d2b-4f9b-9348-153595d0a85f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "022e365c-bbdd-4272-a6b8-d0d7e03457a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "781f7bf1-9e00-4b8e-916a-bf7392d7ab2c",
        "cursor": {
          "ref": "561155d0-e6a6-49ab-af7e-0dc97e28f8ad",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c94ab1b5-21ff-498e-92b2-ae3ac888df68"
        },
        "item": {
          "id": "781f7bf1-9e00-4b8e-916a-bf7392d7ab2c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "aa10fd4c-bb41-42b4-8d59-1c56bef75f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88f0c78-2a6c-44be-bc05-244be3aa49de",
        "cursor": {
          "ref": "ce1061b9-94a7-4308-97b3-a03c95a2d020",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7eba4929-e00b-4450-baa1-4122dc2972aa"
        },
        "item": {
          "id": "d88f0c78-2a6c-44be-bc05-244be3aa49de",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "df143aea-7c0a-44a6-8b36-8262d7c7acf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0cb28c1-4495-435d-af6f-c8dac575875f",
        "cursor": {
          "ref": "c600b596-12e0-462d-9e0b-4c7338b6b0db",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c7271238-68d9-42a8-afa8-f5f4a97c1cd5"
        },
        "item": {
          "id": "f0cb28c1-4495-435d-af6f-c8dac575875f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bdb17acd-fcc1-4a34-b352-b6dfbc2dd490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9104ae6-b9d3-4fd3-a382-cc5e541a7e27",
        "cursor": {
          "ref": "9ba4d40a-e2a5-4544-bee1-25460e05dfc7",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "eff79f4d-c4b4-4ac9-ba97-865ba0b47e5e"
        },
        "item": {
          "id": "c9104ae6-b9d3-4fd3-a382-cc5e541a7e27",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "31920a49-3cd2-4cca-8745-011c782ae2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1fe6856-a8bf-4b1c-b3d8-b43589ed7e61",
        "cursor": {
          "ref": "281ff09d-45cf-455d-825f-4e503557a8bf",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d766707a-640a-4588-ab30-cbf43d61633c"
        },
        "item": {
          "id": "a1fe6856-a8bf-4b1c-b3d8-b43589ed7e61",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c50a5eaa-1c2d-460d-9477-6dd2ff8962ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a8c574-9f03-45ff-a76a-67d5bad67eb3",
        "cursor": {
          "ref": "e7ea2052-7034-44a0-9fa9-3b3f0faca683",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0d3fd515-464d-4afa-ac13-f8d7f0fc53bc"
        },
        "item": {
          "id": "96a8c574-9f03-45ff-a76a-67d5bad67eb3",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c4b9a055-bbe7-49ff-9b95-273f05a503cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193efa38-40e6-4389-9d13-1eb1946c1b96",
        "cursor": {
          "ref": "1f4b794e-5a42-487f-8b68-7f017739216d",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f4c2dfba-6332-49ad-9ad5-66c64eee7fcd"
        },
        "item": {
          "id": "193efa38-40e6-4389-9d13-1eb1946c1b96",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "df76b711-0a44-4983-83aa-b339f8766740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caeb933c-49a0-4dc5-90c9-393def50bf79",
        "cursor": {
          "ref": "54db48bd-98ef-4711-9c78-ff0250248ac4",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "dbabb58a-1a9b-486e-9c19-7a5a97d11e06"
        },
        "item": {
          "id": "caeb933c-49a0-4dc5-90c9-393def50bf79",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "88427b45-96df-4854-9e91-4c99dc8ac15f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56aa6168-618a-4659-98c7-4ef641f9caeb",
        "cursor": {
          "ref": "634407b0-c4ee-40fe-afd8-5013ea42c831",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9fb2281a-874a-475b-8923-ff2015c46312"
        },
        "item": {
          "id": "56aa6168-618a-4659-98c7-4ef641f9caeb",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "49090080-fe8e-4d45-8a5a-2c872265c25e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d257a46-5f19-4a75-9bb1-d0aec2e7ac80",
        "cursor": {
          "ref": "1b507acf-54be-46ac-b819-d03534baf134",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b216657e-8e01-4eec-9a4d-70eb8179dcd2"
        },
        "item": {
          "id": "4d257a46-5f19-4a75-9bb1-d0aec2e7ac80",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ee39fc9c-3650-4c04-a445-64c548b80581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4512e15e-0419-4256-b46e-601ea18157b6",
        "cursor": {
          "ref": "a5d1c091-69d0-49f3-8de5-24c6fca43fec",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a884b725-19bc-493d-bdbf-cce8da1b3565"
        },
        "item": {
          "id": "4512e15e-0419-4256-b46e-601ea18157b6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4ed92fca-4c6b-4949-80d1-5fee10cd70a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a571d56-0e2b-44ff-9dbb-56e7def1d326",
        "cursor": {
          "ref": "bc7754e1-3e78-4b17-84af-d0d74042a184",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "23a83e68-40b6-4cd2-b181-867048eb2f69"
        },
        "item": {
          "id": "9a571d56-0e2b-44ff-9dbb-56e7def1d326",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ba7958b0-f0a5-43e7-af30-83142f4f7a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96900f24-91b1-48c7-8813-4fde35742420",
        "cursor": {
          "ref": "26482386-ba73-4599-a746-ccfff9265afc",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3bcb2077-946b-43f7-97eb-2b4924efb0b3"
        },
        "item": {
          "id": "96900f24-91b1-48c7-8813-4fde35742420",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "6dc9f7ff-ff62-4de9-af31-f27fa7ff9b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e791840b-67ed-4467-8f82-52262c0aebfc",
        "cursor": {
          "ref": "e57f435e-f062-4caf-b4f1-aa2965953ec5",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "53f1675a-bc16-4f15-8aca-bb0e132bdbda"
        },
        "item": {
          "id": "e791840b-67ed-4467-8f82-52262c0aebfc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ff9394cf-c1df-4230-be4c-18d72a84d5f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ceaf65c-93ae-429c-b5e0-53954c9a4b27",
        "cursor": {
          "ref": "7665be8b-33fe-4512-a2e3-f167ee6430f4",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "04b46831-a4e3-497e-ab1b-46c3203beff2"
        },
        "item": {
          "id": "1ceaf65c-93ae-429c-b5e0-53954c9a4b27",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "81c16867-ba54-4cd8-9863-e5f3ce3bf6cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e90ad0c0-c87e-40f3-83cd-668b66558df5",
        "cursor": {
          "ref": "5e0218ef-ccfc-4599-adfc-e947f0f2b70a",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6bd281a3-6ed4-473f-ae7e-be847f8460b3"
        },
        "item": {
          "id": "e90ad0c0-c87e-40f3-83cd-668b66558df5",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a8ee6fd9-9253-44c0-a76d-6cc911676804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f02a3b08-4d40-48ab-adca-e54c60c50ffe",
        "cursor": {
          "ref": "d2fc9c62-9e1f-4ee0-a0eb-370a5d4ad093",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "12cc4dde-705c-4128-8b6b-160203cd4927"
        },
        "item": {
          "id": "f02a3b08-4d40-48ab-adca-e54c60c50ffe",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "29184e68-f885-452c-ac5e-23aaef998f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c033500-5e81-437e-a84f-19bdc39f8451",
        "cursor": {
          "ref": "2fa45619-055d-4bd0-80d9-5130d9fd7f4a",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ff86ffe1-ab62-49d3-811c-aba6035c4fc8"
        },
        "item": {
          "id": "9c033500-5e81-437e-a84f-19bdc39f8451",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a4324642-33e5-418d-92ef-598745aa2108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c06a16-b192-4121-8bda-b47730e5918d",
        "cursor": {
          "ref": "7bf6d32c-03f2-42b6-ad57-c4283564b64d",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "29944bee-a406-47bb-96c2-0eb32c542499"
        },
        "item": {
          "id": "a6c06a16-b192-4121-8bda-b47730e5918d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "45d09ba2-e321-49ca-961d-b7143ffa59e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb08b85b-8512-479e-b953-2b115973f989",
        "cursor": {
          "ref": "7e903b22-51a2-449e-b686-deb82b86c29d",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "692fdfb9-7c87-4bb0-9f2f-4067efe1c40f"
        },
        "item": {
          "id": "bb08b85b-8512-479e-b953-2b115973f989",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0a221b16-b3dd-4238-9cb7-d05fc9f2c04c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a962dea6-c39a-46c5-87f2-71298fe4309b",
        "cursor": {
          "ref": "24018d40-613e-42d0-9d55-a68bb92f6d92",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e336568f-ee63-4a1e-83a8-19258ee7fdb3"
        },
        "item": {
          "id": "a962dea6-c39a-46c5-87f2-71298fe4309b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2d21b709-20ed-426b-b1b9-1358053de6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23591e50-2420-46dd-9278-2e80aacca53c",
        "cursor": {
          "ref": "87a1952c-7f3a-481d-9f71-99bb719e5833",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "bb1a695e-90e0-4d3f-83ea-ad95a677771b"
        },
        "item": {
          "id": "23591e50-2420-46dd-9278-2e80aacca53c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f2e01ae3-6e20-497f-a182-19452f731cac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0102a7ab-f743-4fd2-a11b-b8244fe12cc6",
        "cursor": {
          "ref": "0c64f82b-4e1b-466e-ad7a-ca0a7ffc8906",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2d175182-8421-47ea-b189-35d2e9685a4c"
        },
        "item": {
          "id": "0102a7ab-f743-4fd2-a11b-b8244fe12cc6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "97465bfd-4e44-4eab-9dfb-e2e98a006f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e019bbd4-cba6-4a1b-bb8a-91eed78644b2",
        "cursor": {
          "ref": "ad4bb552-ed6c-4737-9e12-c738fc4c6c1d",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6ce9593d-2549-4069-8b28-b2158b0fc195"
        },
        "item": {
          "id": "e019bbd4-cba6-4a1b-bb8a-91eed78644b2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4c40f1ab-3b5e-420d-a379-eb7184cd5eee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7429ffb2-7c16-48a7-922b-42c0e3ba5c4d",
        "cursor": {
          "ref": "e9491c09-e5b0-4a7f-bbe9-6dcbeae12c94",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d36bf42b-122a-40f1-a78f-88352e254a66"
        },
        "item": {
          "id": "7429ffb2-7c16-48a7-922b-42c0e3ba5c4d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ad8c6f2d-fe7c-43d7-983b-bb3ee04a23a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1deca92-ba94-4311-879e-05adf03ff514",
        "cursor": {
          "ref": "33ad6273-05a2-472d-af7d-d3512f80123c",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d4f27659-dda2-458e-aefa-d2fe0a93903d"
        },
        "item": {
          "id": "b1deca92-ba94-4311-879e-05adf03ff514",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "571633f7-69a4-4377-9425-2581e78e5923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5efd6337-8a09-449c-81dd-f094ef3890e6",
        "cursor": {
          "ref": "42366cfc-f7cd-451b-930f-a6f596bbf638",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "31cdcc40-ff10-426d-ad9c-9c670fb127a6"
        },
        "item": {
          "id": "5efd6337-8a09-449c-81dd-f094ef3890e6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bd1617c2-dfa3-4ee2-b825-36a1c608954f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae803940-8ad9-4178-8b47-771b46012603",
        "cursor": {
          "ref": "9916deea-db70-4698-a483-2d74be77494d",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "683848be-39ca-4c62-a78c-e25eb79b10b5"
        },
        "item": {
          "id": "ae803940-8ad9-4178-8b47-771b46012603",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3997fc96-9ee9-4f33-a94a-4414cec1ac01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275eb0f9-9374-4c45-b6fa-cac2db0f170d",
        "cursor": {
          "ref": "9c12ca73-8258-44e8-b0db-d480eeb2a224",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2c5d3a09-27d7-486a-bad3-e7165fc0c9a8"
        },
        "item": {
          "id": "275eb0f9-9374-4c45-b6fa-cac2db0f170d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ca48037a-e7a8-43e1-84aa-714f8d4410c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0fc629-4b99-4e71-b519-fc17933d3af6",
        "cursor": {
          "ref": "784ce165-52bd-419c-9ac5-f424ed1dbd10",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "dc3f9d14-3806-4483-ad9e-02378d9a03cf"
        },
        "item": {
          "id": "6d0fc629-4b99-4e71-b519-fc17933d3af6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0a581a4d-972e-4bb7-9ecf-45352c89c4d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae718e6-d44c-4de1-8c15-b4f8b787a334",
        "cursor": {
          "ref": "1b987ea2-5239-42af-af18-bfc127ab71f9",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "10f71695-1bd1-46e4-99ab-82d8ccede9c2"
        },
        "item": {
          "id": "3ae718e6-d44c-4de1-8c15-b4f8b787a334",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "fed1a959-ce45-468e-b474-70e9fc140027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed97f2c5-be34-4435-9e01-50d004a1ec99",
        "cursor": {
          "ref": "cdbe9653-e3a1-4a57-a0c4-138181f42a86",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a7906b77-fe32-491f-b078-2adff7ab5287"
        },
        "item": {
          "id": "ed97f2c5-be34-4435-9e01-50d004a1ec99",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "6ebbab3c-8617-4be2-9a1a-e56d96f04069",
          "status": "Created",
          "code": 201,
          "responseTime": 373,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "2bda2084-ad11-447a-9232-2ca94f49234d",
        "cursor": {
          "ref": "0bdf36dd-7803-4dc6-9701-8dc6718c07a5",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "64150463-4152-406f-9524-99ade315c265"
        },
        "item": {
          "id": "2bda2084-ad11-447a-9232-2ca94f49234d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "16cd1198-ecaa-4a59-817d-8d470907b14f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47806c10-473d-4e63-b290-10f2babe777b",
        "cursor": {
          "ref": "9ac0a36d-3c97-4917-9c57-d62b99baa05a",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "321370d7-8aca-4d91-9bd9-570606d81a73"
        },
        "item": {
          "id": "47806c10-473d-4e63-b290-10f2babe777b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "debae032-537c-4645-aa72-990feccb773f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b97531b-3489-478a-ba4f-edc7f9b756c9",
        "cursor": {
          "ref": "cbe28a83-6d55-4145-849d-e68e411ad968",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8ef65727-fc6d-4b27-ad70-acc796f3bd80"
        },
        "item": {
          "id": "0b97531b-3489-478a-ba4f-edc7f9b756c9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a831b05e-5b27-4f67-afc7-4c94c3c2267f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0557bd8f-dab5-459b-a464-a76c884f7e82",
        "cursor": {
          "ref": "439b591d-6e7d-4164-950a-6fcc14f4c155",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1a626db3-e2e6-4685-8c1d-761e24663365"
        },
        "item": {
          "id": "0557bd8f-dab5-459b-a464-a76c884f7e82",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d09d26d6-3abf-452c-a5b1-ae3f5e2c0cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e546ec45-61e8-4162-9c0a-9b79a7d13d9b",
        "cursor": {
          "ref": "afd6817f-5dfb-404c-a3f1-cba06764c5d2",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "664735d4-5f2d-42b0-9f46-973c75cd22df"
        },
        "item": {
          "id": "e546ec45-61e8-4162-9c0a-9b79a7d13d9b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ad91bd16-4f4a-445e-ac37-3d962429ce29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "471dd77d-f2d5-4014-8d2c-ae0c4c9f0c84",
        "cursor": {
          "ref": "50453bf8-9988-49d7-b991-cb6e269e3450",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c1b3af06-f77e-4032-b14e-2031ec33d09f"
        },
        "item": {
          "id": "471dd77d-f2d5-4014-8d2c-ae0c4c9f0c84",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f02f088c-d3d6-47f7-9f21-08a4c883edc3",
          "status": "Created",
          "code": 201,
          "responseTime": 372,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "db724bd0-4813-4d52-bde9-3657b406f0a5",
        "cursor": {
          "ref": "ae83278b-262c-45aa-b8be-93005b2a3c25",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "99706a98-0ab9-4535-a845-979d598873f2"
        },
        "item": {
          "id": "db724bd0-4813-4d52-bde9-3657b406f0a5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "18cd3fca-37ec-46c0-8da7-5b63b74a2c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d5b9eab-594a-49b9-94e1-40e83f8fe173",
        "cursor": {
          "ref": "9d2abf1c-3ee8-4126-915a-9c4d3da6d8d9",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "74d45d6d-b3b3-4fef-90d5-abb8e368c7f7"
        },
        "item": {
          "id": "1d5b9eab-594a-49b9-94e1-40e83f8fe173",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ed2307a2-292a-4048-9aa1-cf1a0c2874de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d041c3-cab6-4338-bc42-c9b83318b2b4",
        "cursor": {
          "ref": "03279d4b-e199-4822-8fb1-b437ede0ba60",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ba7cec8d-548c-432f-b90e-78d365727e05"
        },
        "item": {
          "id": "52d041c3-cab6-4338-bc42-c9b83318b2b4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "24963ba7-bfa9-4096-878f-5a225b0ca154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6971a2dc-d8bd-42d2-bfd9-84bf054b02ab",
        "cursor": {
          "ref": "11b6ecee-12a8-4624-9f91-7e9e3a2552a6",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c12629b2-bdf4-40f7-a7fd-b6950b55a185"
        },
        "item": {
          "id": "6971a2dc-d8bd-42d2-bfd9-84bf054b02ab",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "60ff4215-c981-47b0-9b72-de4be6895185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "669271ff-3bdf-47b4-9cf0-7c4a52911417",
        "cursor": {
          "ref": "2d1ce266-42db-4054-bb29-57ea0c0fe6a4",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "be320c78-b39e-46de-bd43-223f66a8928c"
        },
        "item": {
          "id": "669271ff-3bdf-47b4-9cf0-7c4a52911417",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9497b666-b408-489d-95ce-b269a95ee0af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b917a0-6a53-47e5-95f0-572705f4ef62",
        "cursor": {
          "ref": "594dee93-b6d4-45e9-b51b-6b5589d84bd6",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9465f19d-cea3-4a53-842c-6a449f5ca487"
        },
        "item": {
          "id": "45b917a0-6a53-47e5-95f0-572705f4ef62",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ac281b35-39e6-4394-b8ce-0f7852bf0556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6591e86e-eb69-4f89-95aa-571df4670f6c",
        "cursor": {
          "ref": "054d66e4-3a78-47e2-a94b-8e3523e70ffe",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3f2e8688-0667-44f2-9f83-489f92ea255b"
        },
        "item": {
          "id": "6591e86e-eb69-4f89-95aa-571df4670f6c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a61aebeb-18c2-4947-963e-615ef73de9ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f5b58d-465e-4afd-a2cc-4a285e630d40",
        "cursor": {
          "ref": "d43025b4-2d43-4586-aa62-7574c12a1596",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2b415978-a51d-4109-ae3a-7580140cef32"
        },
        "item": {
          "id": "51f5b58d-465e-4afd-a2cc-4a285e630d40",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d0af7e52-7bd8-4306-86db-d66607a326f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6bc425-2e9d-4d0e-a31b-ae4de225b760",
        "cursor": {
          "ref": "0fc36ea1-9601-425c-919c-0ffddcfe8d79",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f459525e-63f9-4ca3-b2d0-b2915a4ecb2d"
        },
        "item": {
          "id": "9a6bc425-2e9d-4d0e-a31b-ae4de225b760",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "10e8e4ed-cf86-4819-953f-0772a2703152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "069e9a5d-dbf9-4a80-b7ec-c27f119dc65b",
        "cursor": {
          "ref": "38a61a8d-24ff-45c1-8066-d81e72e80911",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bf7ad10f-1a7c-41b4-8224-a2b41729b886"
        },
        "item": {
          "id": "069e9a5d-dbf9-4a80-b7ec-c27f119dc65b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "212a946f-08fa-4f2e-8859-8ae7ab042b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "97f3641f-3eaf-4d18-8e6a-a956e2eecfa2",
        "cursor": {
          "ref": "bd3aff08-360f-4c08-8e08-b5c775f9122e",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "cb7bf26b-6ebb-4314-88c8-5975e8924202"
        },
        "item": {
          "id": "97f3641f-3eaf-4d18-8e6a-a956e2eecfa2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d9ec5a5b-be37-4c55-b3e7-cbc177ea76ac",
          "status": "Created",
          "code": 201,
          "responseTime": 367,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e2522aa-b21a-4b06-8afd-eb3419b4e129",
        "cursor": {
          "ref": "fb5fcfc1-8597-4b42-b8fb-69beff61f448",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "54a01bde-774f-4522-ae9c-e11fb1bda574"
        },
        "item": {
          "id": "2e2522aa-b21a-4b06-8afd-eb3419b4e129",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "dd4569a1-9e0d-4038-92ee-dee632a5321e",
          "status": "Created",
          "code": 201,
          "responseTime": 380,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b9af73-2f89-4e07-be7e-5da01803aa08",
        "cursor": {
          "ref": "984a5db0-2f00-4fd9-aefe-4cd98fe72efa",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "908378ff-223a-4e66-b04a-e04a8097a4e9"
        },
        "item": {
          "id": "f2b9af73-2f89-4e07-be7e-5da01803aa08",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2127aa7d-edb0-43da-8342-7d798900bedc",
          "status": "Created",
          "code": 201,
          "responseTime": 428,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a81021f-95bf-4b24-a161-eaa568f1cf82",
        "cursor": {
          "ref": "da87f90b-b0f1-47ed-9ba2-9cd6a4cf95dd",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0e9d8495-1d17-4a34-a839-af5b31b63ef1"
        },
        "item": {
          "id": "8a81021f-95bf-4b24-a161-eaa568f1cf82",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3b06cad2-7f92-4e89-ae76-66b9f996c4c6",
          "status": "Created",
          "code": 201,
          "responseTime": 379,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ca9b92-a4a8-429d-938f-626286efc07e",
        "cursor": {
          "ref": "4856a3a2-6f91-4d5b-8ec9-16ef0bb156ca",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "414249db-adfc-4835-bb70-6c666476f049"
        },
        "item": {
          "id": "86ca9b92-a4a8-429d-938f-626286efc07e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "92f0b98e-1e4b-4ea0-9dbf-f924a7f4bad5",
          "status": "Created",
          "code": 201,
          "responseTime": 418,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e60bf3-666e-4e6d-a5c1-6b02dafb2dbe",
        "cursor": {
          "ref": "302e737b-b413-424c-b97e-46fc407fba3c",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "55c8156e-79e4-48ed-a0c2-577888b086a1"
        },
        "item": {
          "id": "c5e60bf3-666e-4e6d-a5c1-6b02dafb2dbe",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "22130b00-67e4-4289-9cb6-ce10e7a133ca",
          "status": "Created",
          "code": 201,
          "responseTime": 465,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018dd2b9-3471-42ce-9d99-f90764bd4cdc",
        "cursor": {
          "ref": "357b712e-eb29-4ba1-ad5a-87f4dcfa853a",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2992cd38-739e-4162-8187-7d2ca95ea7c8"
        },
        "item": {
          "id": "018dd2b9-3471-42ce-9d99-f90764bd4cdc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "db60ca2f-a71f-4d4f-97db-392a1455f1bc",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "018dd2b9-3471-42ce-9d99-f90764bd4cdc",
        "cursor": {
          "ref": "357b712e-eb29-4ba1-ad5a-87f4dcfa853a",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2992cd38-739e-4162-8187-7d2ca95ea7c8"
        },
        "item": {
          "id": "018dd2b9-3471-42ce-9d99-f90764bd4cdc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "db60ca2f-a71f-4d4f-97db-392a1455f1bc",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "05600791-1abe-4110-b1d1-b66d1b3db0d8",
        "cursor": {
          "ref": "3d574da4-b251-4ce4-8f6f-c29f853b007c",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0a4fa895-cd02-422c-a193-69aee84b0e59"
        },
        "item": {
          "id": "05600791-1abe-4110-b1d1-b66d1b3db0d8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "121ecfab-0bda-4692-9bfb-c2c0a2e6942c",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "c26c8312-8b09-4259-88d0-b30e004de379",
        "cursor": {
          "ref": "165e6096-dd16-4dd9-a8dc-08d60afeea79",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9cc302fe-8e31-476a-b26c-21f4a3496101"
        },
        "item": {
          "id": "c26c8312-8b09-4259-88d0-b30e004de379",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a6d7628a-8dc7-4312-8bf6-24128f040944",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "a73e9bd1-1d27-4632-a562-091ee16aa226",
        "cursor": {
          "ref": "495ba183-645c-4870-90f6-19664f113486",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "db1ed247-95e8-46a7-8552-99af906c4506"
        },
        "item": {
          "id": "a73e9bd1-1d27-4632-a562-091ee16aa226",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "04d135bb-be20-4f19-a106-5ab3da27e2bf",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "cb40a25f-d452-4dbd-8067-eed3e95d7dac",
        "cursor": {
          "ref": "f5b3ba92-7343-41ee-96c8-151a2ed88b1e",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "70ac6407-8d55-4b45-a8b6-a892f6198f1f"
        },
        "item": {
          "id": "cb40a25f-d452-4dbd-8067-eed3e95d7dac",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "57480330-e83d-463a-8163-1389b0711ce9",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "62b1b5b6-4c75-43ca-afa4-5966390f2578",
        "cursor": {
          "ref": "7523b35f-24f1-41d1-93a7-eb9eaafb8781",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "243b249d-8bac-4505-bbdc-c0e9676e0528"
        },
        "item": {
          "id": "62b1b5b6-4c75-43ca-afa4-5966390f2578",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d4f4bfe2-7649-4115-96ef-9c6e7f9601dc",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "14000b01-e012-42ef-ad92-3530f6ff8632",
        "cursor": {
          "ref": "8c50b45d-b60c-449e-ad4c-b438ebd9ba39",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "08d9b0a8-eabd-4b0c-a12b-82dfbc639c84"
        },
        "item": {
          "id": "14000b01-e012-42ef-ad92-3530f6ff8632",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5ab3db0c-1699-4b53-b69e-dca503705c55",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "c41ef68c-023e-4ff2-9148-c63d15d17277",
        "cursor": {
          "ref": "4ac1d021-241d-46f8-8e8e-f0418ac49c40",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8374f924-21f2-4384-ba8b-6688355f2d50"
        },
        "item": {
          "id": "c41ef68c-023e-4ff2-9148-c63d15d17277",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "decf57b6-3710-4e26-95b3-fd19dbd743e4",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "5ef9844d-79ca-46c1-bdf1-41086b127bfe",
        "cursor": {
          "ref": "9d1a12da-237c-403c-b2d4-3bb4a6abe5df",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "063add9a-ebf0-4282-89f4-5f1535071459"
        },
        "item": {
          "id": "5ef9844d-79ca-46c1-bdf1-41086b127bfe",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ad53ae19-595d-4c76-85f6-7ab797e353b4",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "661bf92b-c49a-4f37-bb77-43d28efa0df6",
        "cursor": {
          "ref": "cfc27722-d4ab-4089-8d68-8a8a9cc60d06",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "de151cdb-9de1-41af-b814-fb672baf9afa"
        },
        "item": {
          "id": "661bf92b-c49a-4f37-bb77-43d28efa0df6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b839d733-b47e-41b1-b15a-535d6e2185f1",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "3358f06e-5214-454f-bc18-fecf7ddcf553",
        "cursor": {
          "ref": "289c4882-4a31-49b1-98b4-59e887d084b2",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "bfa0eb7c-bb46-43ec-b3fc-0fc39a9d1775"
        },
        "item": {
          "id": "3358f06e-5214-454f-bc18-fecf7ddcf553",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d0bf2b9c-6ee4-42e1-ba88-3492d734e4dc",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "f3528708-5ffe-4edd-8ffc-872b3c31b115",
        "cursor": {
          "ref": "6a2cd34d-89a5-477b-9c5e-541bd3c00567",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9af05198-cd30-4185-9c14-eb0026cf0592"
        },
        "item": {
          "id": "f3528708-5ffe-4edd-8ffc-872b3c31b115",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "157c4082-85cd-4d26-a727-77468ee0f670",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "6449ee65-b546-4d71-ba8f-4bc5e0e5282c",
        "cursor": {
          "ref": "db67b8bf-71c8-4518-a332-26fe7009c078",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5921e4c5-bfa7-40f6-8140-7c7648b76eb6"
        },
        "item": {
          "id": "6449ee65-b546-4d71-ba8f-4bc5e0e5282c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d710208e-4cb0-4f2f-98c1-c3640c5010f2",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "21c55d16-7501-4c64-81e8-d80a34d2e673",
        "cursor": {
          "ref": "38cf5479-d4fc-4aa9-9097-879b256a9987",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "95fb13fd-b1df-428d-ad12-8f7013cde386"
        },
        "item": {
          "id": "21c55d16-7501-4c64-81e8-d80a34d2e673",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fd18579b-8f0c-4654-8aa1-8bcc9e357e31",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "ccad9095-4346-4c17-bf9b-7c16ef851833",
        "cursor": {
          "ref": "28adc9ae-5297-4c55-8821-6ae918cd7d3e",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a8af6bc5-d5bf-4900-81ee-14f1079ed6b8"
        },
        "item": {
          "id": "ccad9095-4346-4c17-bf9b-7c16ef851833",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9a057304-0e23-4812-9eac-809ee5e1bcbf",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "ea5b8d49-41f4-4a6b-8460-255c0d987092",
        "cursor": {
          "ref": "cd6d0e5b-bfd7-4f8c-a113-02096e14a086",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "44aa8a4f-a66f-415d-b6ee-db2baa006efa"
        },
        "item": {
          "id": "ea5b8d49-41f4-4a6b-8460-255c0d987092",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "974ad7ff-8df9-4c63-9472-520e32753ea8",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "710c6979-a48e-4588-b031-e52c64f1d402",
        "cursor": {
          "ref": "de1c5c05-6a4b-4f34-8b8a-3ab9a06c519a",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8ce0306d-dc31-4525-948e-f3b873627e49"
        },
        "item": {
          "id": "710c6979-a48e-4588-b031-e52c64f1d402",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6a8f115e-df41-4e91-a838-bcba998f74bb",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "cb12dc45-627c-4fe2-ad7c-eb364be3700d",
        "cursor": {
          "ref": "11b7a3b4-cb15-4995-b693-d533e65effa0",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3f616a2c-f4a1-4911-bd48-c0a3549705d9"
        },
        "item": {
          "id": "cb12dc45-627c-4fe2-ad7c-eb364be3700d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "24ea0a5c-b7b6-417c-b902-daafc40971db",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "8f9cc371-2976-48f5-be4a-c518fe84e934",
        "cursor": {
          "ref": "fdea42de-8634-458f-ab2b-1e549fd18d65",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "eee495a0-620d-4a0c-89e1-8a121ad74e9e"
        },
        "item": {
          "id": "8f9cc371-2976-48f5-be4a-c518fe84e934",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d0a528d9-53b3-46ec-b985-24ad9de2be8f",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "6820434a-e96a-4e60-810c-f0fdcd0445f8",
        "cursor": {
          "ref": "a5042ac5-61cf-446f-b80e-99ea51a538ee",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "67f875f7-0f10-495e-84de-cb7a23564c50"
        },
        "item": {
          "id": "6820434a-e96a-4e60-810c-f0fdcd0445f8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8516306e-baec-45c7-b602-14bf48d1330b",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "248a16b1-066a-464d-a808-72203d5e8c97",
        "cursor": {
          "ref": "beab7434-a9c5-4617-a3bd-6aae42e8d91e",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "90c70a50-7b0a-41e4-9492-2af772f5fd75"
        },
        "item": {
          "id": "248a16b1-066a-464d-a808-72203d5e8c97",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fb614fc9-716c-4157-8310-09eb911a63c3",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "182de610-caea-4419-b3e1-da301b4b7aeb",
        "cursor": {
          "ref": "1c86e094-89be-49a3-a96f-60d3d07ae448",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b218d83e-2ab9-4f0d-b537-a1c505c0dc4b"
        },
        "item": {
          "id": "182de610-caea-4419-b3e1-da301b4b7aeb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "faf84eaa-7370-4889-9bab-f85ba3345738",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "d68eb40e-e913-4c00-88d0-9efd449dbf57",
        "cursor": {
          "ref": "6a1108b7-8bcf-4155-81c6-d291c095d1d0",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "1e99f873-ab3d-47a3-a425-de4bb07384a9"
        },
        "item": {
          "id": "d68eb40e-e913-4c00-88d0-9efd449dbf57",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a4f69f37-4efe-4c06-a4ec-07872bbb3450",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "559b59cf-67be-46c8-a9eb-9be7a6f23b3a",
        "cursor": {
          "ref": "f8c3827b-efd3-4e63-96be-bfa5d75fe600",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "908622e4-d9cc-4e6f-a7ad-9f0ed653fecd"
        },
        "item": {
          "id": "559b59cf-67be-46c8-a9eb-9be7a6f23b3a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ba8bc265-0753-4053-bcee-df4f309f2d7a",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "3b93b09e-77a3-4268-b971-55e464462cd9",
        "cursor": {
          "ref": "17c53d02-5cf5-4cd7-a80f-552143f43f1c",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "dacac71b-e0a7-4639-afbc-4aa5dc0682ef"
        },
        "item": {
          "id": "3b93b09e-77a3-4268-b971-55e464462cd9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3a03418c-252a-45e6-9247-80299d288b64",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "e6f7f5e8-1e5e-4375-b025-682c0da4aead",
        "cursor": {
          "ref": "c8885b44-5735-4dbe-b8a2-114c6eec9945",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d760ec42-1bdc-4124-898b-ea1ecfdd67ac"
        },
        "item": {
          "id": "e6f7f5e8-1e5e-4375-b025-682c0da4aead",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "26896006-ef72-4037-80a4-3f4d4e1505b8",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "349ab80c-33fd-47e2-a98f-b0d005bd3324",
        "cursor": {
          "ref": "6f264b2c-fac1-487b-9533-7b86bb84d47b",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "01b94962-4d2c-41af-b5ea-cf9947cd094d"
        },
        "item": {
          "id": "349ab80c-33fd-47e2-a98f-b0d005bd3324",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c5a59633-32ff-48d5-adba-08cfc7123a36",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "662a89f0-2e65-49ed-b403-8e4b28e3b037",
        "cursor": {
          "ref": "3adba557-4a5a-471e-b34b-6e96adedbdac",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ad56e244-e3b9-40a6-9c48-bf2d4e793562"
        },
        "item": {
          "id": "662a89f0-2e65-49ed-b403-8e4b28e3b037",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e07196ab-d707-4e01-9985-8cef819c4906",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "0c2c0d96-ea0e-4fef-bf75-3d3ea9279d90",
        "cursor": {
          "ref": "6b58ded3-3f71-4f5f-94fb-a93588d29244",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0b2abed8-3155-49c3-bef7-9871fa85dea8"
        },
        "item": {
          "id": "0c2c0d96-ea0e-4fef-bf75-3d3ea9279d90",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b9d055cc-9c83-42d2-9cb7-412a1962a187",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "974a452b-d1ab-489d-8ea3-c3472b25f186",
        "cursor": {
          "ref": "70c8d580-7b5f-4c16-a4f2-f357cbdd9b96",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "79e1ac6f-b003-4971-b45b-80abd3fc645f"
        },
        "item": {
          "id": "974a452b-d1ab-489d-8ea3-c3472b25f186",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "73cdc222-20e7-47ba-9e42-901599ae51aa",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "2d49212f-7b9f-4913-a9dc-e5965acb0df3",
        "cursor": {
          "ref": "d106a0e1-5dce-469b-a9eb-34c1943ee22c",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c23b5a3c-f62d-4024-9f9e-8c2434b4de1a"
        },
        "item": {
          "id": "2d49212f-7b9f-4913-a9dc-e5965acb0df3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9c3ec48e-70ae-4b61-939f-ac50a2705618",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "19e2594a-5849-4d7f-88c0-55a53fa6dcc0",
        "cursor": {
          "ref": "fbb8c601-c6b7-47bd-8bd0-7762355d9413",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "14270591-20b8-4874-b7b4-36e2a2072ec9"
        },
        "item": {
          "id": "19e2594a-5849-4d7f-88c0-55a53fa6dcc0",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "13bbe3c4-3ef2-4e16-9257-472666009d6d",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "1e8a1dce-3ebc-4497-8465-78f8ca137e21",
        "cursor": {
          "ref": "ada0780a-ce09-4223-b0b3-7216dd954c6e",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f18cc16c-55b4-443c-bed0-1a4e4f790aed"
        },
        "item": {
          "id": "1e8a1dce-3ebc-4497-8465-78f8ca137e21",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2eeeb984-7af9-4014-bde8-21c549d38e91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c81910b-549f-4aa2-9c57-341679dc8226",
        "cursor": {
          "ref": "aceb76b9-32b8-46bd-b8aa-9b7998bac120",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "234a72c6-1343-416d-adde-b8e7c1721275"
        },
        "item": {
          "id": "2c81910b-549f-4aa2-9c57-341679dc8226",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "72edc2b9-8e20-4c57-9986-71963a08aab5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e1bc36-12de-4bdf-8940-83ef8332daa3",
        "cursor": {
          "ref": "b85545e9-205c-4fac-b3c1-d02fc4006c73",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "12eacbe9-a4e0-42d1-8441-7cefa599b209"
        },
        "item": {
          "id": "27e1bc36-12de-4bdf-8940-83ef8332daa3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "13d5f858-90ed-4512-a0d5-0f7c35ac3095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e1bc36-12de-4bdf-8940-83ef8332daa3",
        "cursor": {
          "ref": "b85545e9-205c-4fac-b3c1-d02fc4006c73",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "12eacbe9-a4e0-42d1-8441-7cefa599b209"
        },
        "item": {
          "id": "27e1bc36-12de-4bdf-8940-83ef8332daa3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "13d5f858-90ed-4512-a0d5-0f7c35ac3095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621f7968-7fe0-4f5a-84a9-d193cd811b35",
        "cursor": {
          "ref": "992c7074-1f7d-4f35-ab99-8ac226eaa3d7",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "753447c8-f908-4fe5-b4b8-bcc4751b045a"
        },
        "item": {
          "id": "621f7968-7fe0-4f5a-84a9-d193cd811b35",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b532d2b2-d7d6-4b3b-806b-55ea81a2f879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99eadebe-7c5b-4311-beda-4aeae92aaf86",
        "cursor": {
          "ref": "fb1655cc-f6cb-4d04-b3a6-04632fe13307",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a875714d-7af7-4c46-bd40-3ddc7be36a25"
        },
        "item": {
          "id": "99eadebe-7c5b-4311-beda-4aeae92aaf86",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c217b5fb-0bfc-4f24-9645-2ed79259eca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f87f559-6234-4a9b-ad39-a371a053bd93",
        "cursor": {
          "ref": "1295ac43-d202-4b13-815f-ba13aa5cde2f",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "99eaee7d-b56b-4afb-bf0c-0d0fdaa11574"
        },
        "item": {
          "id": "9f87f559-6234-4a9b-ad39-a371a053bd93",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d0e5f7e0-863d-4f2a-b92a-253e864f9a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e26513da-0199-44ea-b46b-7b771fd658fe",
        "cursor": {
          "ref": "c87b052f-a054-4a32-8ad3-bfb991bdcd71",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "673c4cd7-2651-4d7e-a36d-d720ccd2bc1a"
        },
        "item": {
          "id": "e26513da-0199-44ea-b46b-7b771fd658fe",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a8e90808-f567-4ae3-bc5a-850cab84682e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a716354-ddbf-4bc7-8acb-026338ec9678",
        "cursor": {
          "ref": "8b276ef3-fc94-41b9-b130-acf0f1f74fd6",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2853954e-4633-416d-a983-a0af65168aac"
        },
        "item": {
          "id": "9a716354-ddbf-4bc7-8acb-026338ec9678",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "66b883c9-5847-40a8-971c-6cc68ce074be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51581500-b5b4-456e-aaae-40418abefcce",
        "cursor": {
          "ref": "046e1e38-9e8c-43ad-acfa-7aca643dbebd",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6c508e3d-c1dc-4f0b-978f-76c23b21d64d"
        },
        "item": {
          "id": "51581500-b5b4-456e-aaae-40418abefcce",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4892a5b6-6f87-417f-9d42-14c133edd6c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 360,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e54ead8-d342-43f7-ae1c-d6de5c8bc0ac",
        "cursor": {
          "ref": "0d82fc05-1eaf-4ee2-912d-c7f153e6ecc4",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "111553c1-fc79-4982-b324-d393e8f0ad7d"
        },
        "item": {
          "id": "3e54ead8-d342-43f7-ae1c-d6de5c8bc0ac",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "931afde9-4ee4-43ea-b407-abae09e3e2c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e673b0ed-3e25-49c5-9d5d-8af138a96005",
        "cursor": {
          "ref": "c784078d-c7c4-44d0-8e6b-e2b808eeb3f7",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c7774516-6e43-48af-9ddf-8bff5a7404f1"
        },
        "item": {
          "id": "e673b0ed-3e25-49c5-9d5d-8af138a96005",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c1de13e0-7c89-4739-b768-88bb0e8ecc6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b6af2f5-6d55-4640-a969-ce8dcd675efd",
        "cursor": {
          "ref": "b1f4dd4f-0553-4b73-b8c7-7a183dcafa0f",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ef0266cc-097a-4a9d-aad9-ec29bd7ba78a"
        },
        "item": {
          "id": "3b6af2f5-6d55-4640-a969-ce8dcd675efd",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7c654180-7823-4a53-a934-eacee4b883d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2383079-a316-40f0-8633-96ad62d26ebd",
        "cursor": {
          "ref": "3a071071-2afe-43b4-be11-cb634e6c7bad",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cbe1159f-a956-48da-acd7-8c1369813f2b"
        },
        "item": {
          "id": "f2383079-a316-40f0-8633-96ad62d26ebd",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f8ee3ea3-6a3b-4e7e-bc9f-a3231b1db23a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78ba0b8-1d31-46ab-a68a-44bbecc28c9e",
        "cursor": {
          "ref": "a78074b8-c05b-4083-8af8-095e11016312",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "62a247fa-a8ba-4d5b-a5a3-8713cdd833af"
        },
        "item": {
          "id": "b78ba0b8-1d31-46ab-a68a-44bbecc28c9e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e8a7e1b9-e27c-4feb-9870-683e67feafed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50bdb375-7ad8-438e-b443-3803b2ab869d",
        "cursor": {
          "ref": "c4bb046f-3b34-44b5-8620-9f5941775fd5",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2d5d98a0-1520-4700-a8fb-1225217a486f"
        },
        "item": {
          "id": "50bdb375-7ad8-438e-b443-3803b2ab869d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a58190d9-9d8d-4072-a96f-2b9b36cabec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d17029-2163-44f6-aecd-ef086856da22",
        "cursor": {
          "ref": "a314b4e6-dca1-48be-8212-cd06d08a0cdf",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4c1c0c32-c583-4784-bf5c-965770be27c4"
        },
        "item": {
          "id": "03d17029-2163-44f6-aecd-ef086856da22",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "69755133-7796-4a40-84e7-77683d59176b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59f421c-3834-4520-9c0d-fffdeb75e090",
        "cursor": {
          "ref": "15d2d346-38f1-479e-acbd-ef49243f8edb",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "29c60c99-6895-43d1-879d-e15673647a35"
        },
        "item": {
          "id": "e59f421c-3834-4520-9c0d-fffdeb75e090",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5ebba8aa-df67-4e77-b78b-38e6be73196c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0c8a66-7756-4d17-a64a-6a42e10ef9ab",
        "cursor": {
          "ref": "82a1e680-f4f9-40a6-b70c-a81136da8614",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c88699fe-23f6-4d2d-a9ab-febc1bc14d5c"
        },
        "item": {
          "id": "3b0c8a66-7756-4d17-a64a-6a42e10ef9ab",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "85b594eb-134c-40bd-ace3-ab897ac0f2e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2efd2390-ae7f-4862-8244-485a5a064794",
        "cursor": {
          "ref": "4d37a3c4-c810-419d-bafc-b178f2e37826",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "43bca252-3b67-46c8-a5f3-edf59ca0ac1b"
        },
        "item": {
          "id": "2efd2390-ae7f-4862-8244-485a5a064794",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2c5b3eff-29c7-4f88-922f-616e410768cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c3d6b7-8d6d-4d41-acaa-f78fedb91b85",
        "cursor": {
          "ref": "4fd2f6f6-e21c-4f3f-b36b-dd34899c3967",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ac61bb1e-231e-4c27-97dc-7fd72620e01e"
        },
        "item": {
          "id": "a6c3d6b7-8d6d-4d41-acaa-f78fedb91b85",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d3576c17-f431-486b-b254-fee498ff4c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 260,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ba26c9-de06-4999-8c1a-c2989380f415",
        "cursor": {
          "ref": "4a2d4f26-9718-4acf-a72b-35934d0e3b54",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8a35cb1d-37fb-4c34-95dd-246932205f97"
        },
        "item": {
          "id": "05ba26c9-de06-4999-8c1a-c2989380f415",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8e3a320b-b14c-4dfd-aa59-e99051122a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27f90c7f-02c6-4bf6-8661-cdefbc606e35",
        "cursor": {
          "ref": "2280e6f5-64bf-4a16-b8dc-e11a7e410cac",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3891e3ac-1fe3-4fa2-b8e6-5d3c26464667"
        },
        "item": {
          "id": "27f90c7f-02c6-4bf6-8661-cdefbc606e35",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "53dff2b8-c1ca-415e-8bbf-1ea3270288f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1969b89c-c2d5-4abb-9dc4-e52eb4f7c1d0",
        "cursor": {
          "ref": "ba601632-e29c-4323-8861-6c2fd8d53e3b",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "97aca912-b92c-4160-8cfb-f4d033ad76a3"
        },
        "item": {
          "id": "1969b89c-c2d5-4abb-9dc4-e52eb4f7c1d0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "24abcc2d-69b0-4d6e-a148-9ea8ebe419ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcae4b52-398b-4986-83ae-3f3c59049dc9",
        "cursor": {
          "ref": "31e292c7-7610-4c00-a74d-1224d59a525c",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f35477d8-dd76-46de-9cb2-ac18e4495ae6"
        },
        "item": {
          "id": "dcae4b52-398b-4986-83ae-3f3c59049dc9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6e5c97d3-3c2f-45d9-bc5f-81b45c8bcff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa18948-ba3b-4b2d-833f-514e55cae0b3",
        "cursor": {
          "ref": "108ebed0-282c-4de8-8ee9-2df5631555f5",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0891bd82-4e1f-4270-a875-07f222cbacdb"
        },
        "item": {
          "id": "1fa18948-ba3b-4b2d-833f-514e55cae0b3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d65b3ba6-2ed4-45a5-bc92-7f1354f22cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e19e94-ab0d-4261-a56c-23b48f33145e",
        "cursor": {
          "ref": "52ea6561-a634-43b3-ad2e-c08a163b7411",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9bfe00a8-417b-4c1c-8c7b-c2923c309e2d"
        },
        "item": {
          "id": "c2e19e94-ab0d-4261-a56c-23b48f33145e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4bdee779-3d90-4f5a-813c-0f8b643bdee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7866b4d-84d5-455a-b97a-6d2a62715acb",
        "cursor": {
          "ref": "e2fe0ad9-e0bb-4c5e-9fa2-ad8e113c4fdd",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1bd0e192-0e85-4cb6-8cf8-29e5760df986"
        },
        "item": {
          "id": "b7866b4d-84d5-455a-b97a-6d2a62715acb",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b8d68f3c-311b-4259-9694-2dcfaa5457dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c86ccf7-6f08-4e66-8eec-c9e0b69c3946",
        "cursor": {
          "ref": "f3aecd7e-5b92-4803-868f-52f130e1b115",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ac5a7b98-343c-4d38-8dc5-9f2e7d3a6a51"
        },
        "item": {
          "id": "9c86ccf7-6f08-4e66-8eec-c9e0b69c3946",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "159d53c7-8c4a-492f-af4a-ed38f13869f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a0e692-ae3b-4f21-ba81-6d300485511f",
        "cursor": {
          "ref": "620a24e2-5887-4eb8-9ef9-34010325a3e9",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "84237cd9-cad3-4066-931d-2c8d9049cfcd"
        },
        "item": {
          "id": "11a0e692-ae3b-4f21-ba81-6d300485511f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4e945f0b-4712-4dde-9d5c-e399dc04b315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69e9a7d-2efd-43f0-b6cf-bc82eb816686",
        "cursor": {
          "ref": "8fb4c698-f0d4-4551-b2a9-b4d61e904ee9",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3f385cec-004b-4b86-a77f-7513641cac83"
        },
        "item": {
          "id": "f69e9a7d-2efd-43f0-b6cf-bc82eb816686",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c84073b1-a177-4021-87db-7e25ff12cbcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd12fcca-5705-459e-b019-e5d2e6382c8d",
        "cursor": {
          "ref": "55fe4355-58a9-44cd-a3ca-e43c7042f642",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f0a3c9c2-941a-4b96-8587-790bf4848ef1"
        },
        "item": {
          "id": "cd12fcca-5705-459e-b019-e5d2e6382c8d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5bfdaf58-3ab5-4869-a35f-786b6ecd3630",
          "status": "OK",
          "code": 200,
          "responseTime": 204,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "b2171784-a273-4cca-b56d-622c049f4a09",
        "cursor": {
          "ref": "53d4b6a1-2317-4c0b-8358-2c9451b8f9a3",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b837a98c-5cf5-4be7-ba74-4fd19c2fb299"
        },
        "item": {
          "id": "b2171784-a273-4cca-b56d-622c049f4a09",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ae071f19-e22b-46f9-947b-c8ef13c02109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ef554f-e5f8-4f96-9ab4-1ba79ddb231e",
        "cursor": {
          "ref": "d7d50d53-85a0-4558-8d4d-1c19ca856f63",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9b06b52f-e6b9-424a-b49a-9d646831ee64"
        },
        "item": {
          "id": "e5ef554f-e5f8-4f96-9ab4-1ba79ddb231e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e32cd49b-9e67-4f21-b14e-c6857479a33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f241108a-730d-463b-a09c-b02154ecd42a",
        "cursor": {
          "ref": "e1c76774-8759-45c7-bb89-a4ad368776d1",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "585e227d-bd24-4446-88ad-0fa685e4db6d"
        },
        "item": {
          "id": "f241108a-730d-463b-a09c-b02154ecd42a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c0df7673-76e0-4f3d-adb2-475d06de5160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6872c12a-0ccd-4eba-a752-45bb685a1a69",
        "cursor": {
          "ref": "dc5b52d1-c64c-466a-8295-5f217fabc73b",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "aa1797d8-efd4-4f06-86a1-7fb781425c10"
        },
        "item": {
          "id": "6872c12a-0ccd-4eba-a752-45bb685a1a69",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "01b40bfd-f44a-4509-883b-9a0a654b1406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc710809-1cf7-4afc-8eac-d3c2eee23975",
        "cursor": {
          "ref": "8d5dbd52-93fb-4299-bc85-322b927c9213",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c0e0d4ff-5dd7-41f1-b62b-f85e4fea6911"
        },
        "item": {
          "id": "dc710809-1cf7-4afc-8eac-d3c2eee23975",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "67d48eb0-fc47-45b9-8bc5-defbd71fc565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0566c625-ed1d-4696-a934-5b54769bc191",
        "cursor": {
          "ref": "9e5cb066-9566-4977-87fa-7b78f6a07211",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8a226013-b129-4f52-8a0e-9847be1bef70"
        },
        "item": {
          "id": "0566c625-ed1d-4696-a934-5b54769bc191",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7f5644ce-5650-4c72-a903-672456beb098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7cb954e-02ca-4a92-93e4-e39d2c6c21b9",
        "cursor": {
          "ref": "0b6484b4-d86f-408f-a3c6-679b1f2e6b83",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "96a15a1e-9a80-4928-84ce-a4d643da564c"
        },
        "item": {
          "id": "b7cb954e-02ca-4a92-93e4-e39d2c6c21b9",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b9555353-6ccd-4f05-a3cf-12b4de0fef95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d967545a-cbd7-4b27-b03f-b1ef21c06867",
        "cursor": {
          "ref": "91dab03b-f82e-4007-ba42-9c3c54ef8028",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d147d846-33c0-4a57-8602-bf2e39185a31"
        },
        "item": {
          "id": "d967545a-cbd7-4b27-b03f-b1ef21c06867",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "35623c0f-1530-4f8d-957d-5a480b8b3baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ad9862-9505-4e75-9308-0ad2225582b2",
        "cursor": {
          "ref": "776aba4e-2012-4969-8336-2d6bf06447bd",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5787d02b-a850-4b93-a38d-925108d5261d"
        },
        "item": {
          "id": "f9ad9862-9505-4e75-9308-0ad2225582b2",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "27fe7615-e372-497e-8644-6305f018ef70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5015b2a4-f0bf-42dc-9367-36c51cd45106",
        "cursor": {
          "ref": "1324dd36-4bd5-4e01-a29f-096f37090203",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c6d7f545-adeb-4b72-9ce7-7a40d8a95d25"
        },
        "item": {
          "id": "5015b2a4-f0bf-42dc-9367-36c51cd45106",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "31d4a732-3de1-4736-8e47-be49e6fbdb31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617dafdd-7216-4d0f-a5e3-953c3da29e05",
        "cursor": {
          "ref": "44235b40-c81a-42b7-b7bd-431fc04af54b",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "53099a21-c61c-4fce-b9cd-9995dd676a69"
        },
        "item": {
          "id": "617dafdd-7216-4d0f-a5e3-953c3da29e05",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "41a4fa72-4700-4b89-9328-510f16648561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 315,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d7c7ca-aaac-4096-a9b3-4aceb8a2985f",
        "cursor": {
          "ref": "62e8370b-00bf-4e79-93bc-7905e7952fb6",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "319c62ba-1761-4c8d-8d0e-356e3eba68f9"
        },
        "item": {
          "id": "d5d7c7ca-aaac-4096-a9b3-4aceb8a2985f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1931b178-6650-4618-826b-47e238fa43d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a625473d-49db-4306-a6a8-cf0c35e9832b",
        "cursor": {
          "ref": "5ba25a8a-b833-41ef-aff5-3b372eb93489",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d9533189-6b37-47c4-8aa3-0468ec0a8870"
        },
        "item": {
          "id": "a625473d-49db-4306-a6a8-cf0c35e9832b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "313c54fc-cef4-4c83-882f-7d3e040c0952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642d0c61-abf6-4ce5-a2de-2f20aaa539c3",
        "cursor": {
          "ref": "86d45dbe-bd12-416e-a6ba-53a146402798",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0ba1a3e8-b3cc-4d37-a5a6-249bfb975f65"
        },
        "item": {
          "id": "642d0c61-abf6-4ce5-a2de-2f20aaa539c3",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a5167504-a7e3-48d4-99fb-331431095925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60dee363-c91b-49aa-ad69-02b22e859819",
        "cursor": {
          "ref": "17f049e3-e018-460e-a390-090080536304",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8acd65b5-a4d6-4210-853d-e0af7801d2e9"
        },
        "item": {
          "id": "60dee363-c91b-49aa-ad69-02b22e859819",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "210fff84-bb82-4840-af88-c641cbf6e79c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e2984c-5fd9-4b03-8c90-6bf6be22575a",
        "cursor": {
          "ref": "57e48f12-f058-49cf-98aa-053f8c2ff77e",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "12be42bd-cb1c-4c04-8140-87c9962e8ce4"
        },
        "item": {
          "id": "71e2984c-5fd9-4b03-8c90-6bf6be22575a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b31c216f-63fa-4eba-beaa-1252c418aed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87ded81-b99b-4680-965c-1f2c6afb3f83",
        "cursor": {
          "ref": "a8b9299a-8ab2-437c-8a78-13b6acbe4956",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2b499865-4687-4c8c-8fe2-06db39fb5a0a"
        },
        "item": {
          "id": "a87ded81-b99b-4680-965c-1f2c6afb3f83",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bf8021ec-0420-49b0-a9fe-4d87f3b4e270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f44bf42-bd1f-43cb-b4eb-2eb4b7f729f7",
        "cursor": {
          "ref": "9451e664-8c96-4330-b25a-58a8bf472aba",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f7874baf-2d1c-48c5-82ff-781948d0cbbd"
        },
        "item": {
          "id": "0f44bf42-bd1f-43cb-b4eb-2eb4b7f729f7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "96862908-9eb2-4d2c-a932-df03c071c8a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47adf243-38d9-41f8-9fa6-dce92269a450",
        "cursor": {
          "ref": "496efb03-2e94-4417-8980-d4cb8578e074",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "262e1b1e-102e-4752-951b-f597d6d08afe"
        },
        "item": {
          "id": "47adf243-38d9-41f8-9fa6-dce92269a450",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d8dd014c-d60e-41ba-8790-78c4d711c9f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fad8d06-ac38-4d3d-8fa0-70a727b8d1ee",
        "cursor": {
          "ref": "4c53ea32-db0a-49e0-955b-e51bb5f48b90",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "23593ffe-5bb7-40d7-9743-baa6e81953f4"
        },
        "item": {
          "id": "6fad8d06-ac38-4d3d-8fa0-70a727b8d1ee",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3018c3e3-5f14-47d5-84b0-a0c01ed530ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c5e8ab-588b-46aa-8fe2-e479881313ad",
        "cursor": {
          "ref": "3db8b32d-d558-4003-9e6e-c4ca0ac68ae8",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4c47b5ab-9a3a-4c10-8450-0e1922fd646b"
        },
        "item": {
          "id": "86c5e8ab-588b-46aa-8fe2-e479881313ad",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fea35d9c-5274-4f4d-acb9-760e5d97a53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a491ea3-1ac0-4328-b05b-356f703eae8a",
        "cursor": {
          "ref": "677b552a-7f49-4590-8f86-ae2614292d45",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f2a5f5fd-2c85-4bc7-a757-d5da8d36b0d8"
        },
        "item": {
          "id": "9a491ea3-1ac0-4328-b05b-356f703eae8a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ece6f25c-aaf4-49d1-8231-79b1a7216ee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b324455-0456-4855-84cc-3a66a416f561",
        "cursor": {
          "ref": "9ab35237-a964-4554-afbc-8df3587dcf92",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d91931bd-dcad-4320-88ac-8cc087ddd6dd"
        },
        "item": {
          "id": "0b324455-0456-4855-84cc-3a66a416f561",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2e905435-5725-4191-a259-0bebd09903ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "381010e9-2242-4d9b-a225-0d580cf60798",
        "cursor": {
          "ref": "004f346d-97c0-46ae-95d4-6e13ee36acfc",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5be3165f-2898-43ae-a33a-c7b41f05a699"
        },
        "item": {
          "id": "381010e9-2242-4d9b-a225-0d580cf60798",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f0e498d3-d557-4761-9b7d-75ac6bbe0d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d1a086-3059-472e-9b07-e7640dc8ef1f",
        "cursor": {
          "ref": "cf71b91f-21ca-495a-ad28-d2314108c2d9",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "dee1d95a-7427-47da-925d-e004b00c3c49"
        },
        "item": {
          "id": "83d1a086-3059-472e-9b07-e7640dc8ef1f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b7387280-31e0-4054-89f6-279410c63dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b9449a-1feb-47a9-b9c6-ab877c718147",
        "cursor": {
          "ref": "0c527f50-5278-4b6e-a30a-529b71f324e0",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f50475d3-b41e-4e25-b6d7-287ca52c9b60"
        },
        "item": {
          "id": "b2b9449a-1feb-47a9-b9c6-ab877c718147",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c7ce801a-a998-4eb7-bd12-a2bd324cdc33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62723484-38fb-4191-9086-772396674f30",
        "cursor": {
          "ref": "a64fb11a-ac26-40fa-ad3f-0108ed121ea2",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a7be8628-669a-4dba-8da0-08ac2c47a89e"
        },
        "item": {
          "id": "62723484-38fb-4191-9086-772396674f30",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "359d505b-2d4b-482e-99d6-e14cee16dfa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ddfc96-616a-4170-95ee-d462641214a9",
        "cursor": {
          "ref": "d4925164-d9eb-4fd2-9bc9-0118fea8f239",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f2dc6e6e-0dc0-4d4b-8d7d-b83d988a4cd5"
        },
        "item": {
          "id": "47ddfc96-616a-4170-95ee-d462641214a9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9946b657-462b-4b63-b2ed-a83a9b4735cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e570cb0-b935-4224-bd4d-522b64f08250",
        "cursor": {
          "ref": "d3a1c509-fccf-49ad-949b-710b887f5508",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c42f38f4-9e97-45b1-b02f-88718f7641bf"
        },
        "item": {
          "id": "2e570cb0-b935-4224-bd4d-522b64f08250",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d6f9e77a-afca-49e4-b586-ef0555d44cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6bbde01-b744-4e13-89c5-be9068a9dee5",
        "cursor": {
          "ref": "599894cc-f7ee-4b7a-8b73-1abceb7be575",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6835ee97-09c8-4d5b-998d-41397d88ec87"
        },
        "item": {
          "id": "a6bbde01-b744-4e13-89c5-be9068a9dee5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "48fba50b-f63f-416d-add8-140739c18b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3615e349-b308-440c-adaf-14dadec345fc",
        "cursor": {
          "ref": "e0bd68a8-a1fe-433d-a78e-94b4e7adce26",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "70b25fe4-77f5-4de2-8b25-5784df5d0ff3"
        },
        "item": {
          "id": "3615e349-b308-440c-adaf-14dadec345fc",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1bce3732-195f-42d5-bfb5-b414dd209838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11808a08-577e-4938-9b23-4994cc53ddcf",
        "cursor": {
          "ref": "f56461b6-c91a-4259-b4d1-ee3a76bbf738",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5276e213-cad6-4ed1-9114-8f3fc2abda4a"
        },
        "item": {
          "id": "11808a08-577e-4938-9b23-4994cc53ddcf",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7eff959c-fa4e-4437-9807-d411c249be74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33184921-8556-4f78-a494-e6f39859500a",
        "cursor": {
          "ref": "d85d18a9-f506-4685-b4ae-c0ed31841243",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7b73b855-62a7-488d-95a1-19ad8986995d"
        },
        "item": {
          "id": "33184921-8556-4f78-a494-e6f39859500a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "818f1719-b852-4bb5-b051-85e40fcf4400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee25a3e-a611-4abc-bffc-d38117ef66ed",
        "cursor": {
          "ref": "82a258ee-8328-4ac5-867a-a51d9ea6de2c",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "01a451fc-85ee-4d07-ab0f-eb8e4195c329"
        },
        "item": {
          "id": "1ee25a3e-a611-4abc-bffc-d38117ef66ed",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8fb0122a-fa6d-480e-9abc-58a714f43fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51268baa-8c7a-4ea4-b624-9eb21f63568d",
        "cursor": {
          "ref": "1fee013a-4847-4e5d-9850-b43c7ae0a0fe",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1424358d-dbd4-440f-ba3f-d8f72d7e4054"
        },
        "item": {
          "id": "51268baa-8c7a-4ea4-b624-9eb21f63568d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bde99a5d-810b-40b9-a11d-8fb2c02205da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651ae789-04d5-4337-8ca6-7516d7d3c1b1",
        "cursor": {
          "ref": "5ee0e964-1cd1-42ef-bde9-68ea97ceab25",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9debffee-b60e-4a39-a7bf-0c408ff6fc3b"
        },
        "item": {
          "id": "651ae789-04d5-4337-8ca6-7516d7d3c1b1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d50821ee-3d07-46b7-b460-f8abf6bb45c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf7df5f-8709-4808-b951-2523d97033b7",
        "cursor": {
          "ref": "8e0eeb39-c3cf-47ea-949f-cf34cfbda598",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "af43fb15-2dfd-4c39-b871-3568c1d8f99b"
        },
        "item": {
          "id": "bbf7df5f-8709-4808-b951-2523d97033b7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4a2c87d9-2ded-43fd-8606-ee52820564fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d634346-0267-45a8-bb17-53056857ff3a",
        "cursor": {
          "ref": "8e7bad08-3b9a-43c6-af30-b41381cd1db6",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "cb949a2a-94e6-4d74-9e12-1e954b6eab12"
        },
        "item": {
          "id": "6d634346-0267-45a8-bb17-53056857ff3a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e82c9240-b64a-49b6-bb31-301739059d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805ccfbb-933b-4cc8-9509-f402021fba00",
        "cursor": {
          "ref": "85ca2610-4700-462c-b4be-de4f56867755",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8dfc76dd-4f63-413c-a75a-24137631db8c"
        },
        "item": {
          "id": "805ccfbb-933b-4cc8-9509-f402021fba00",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b266f727-d5a4-4045-af6d-764975f3bab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068ec223-7d4e-4418-a184-5f4ce4b74d7c",
        "cursor": {
          "ref": "8191a620-30f0-4a35-a7bd-8a574735f0c9",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7b6ef45a-4bdb-4a97-93a0-18d52d8db8b3"
        },
        "item": {
          "id": "068ec223-7d4e-4418-a184-5f4ce4b74d7c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5a383a6c-9ff5-498b-a915-5ba5b58d5b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea10690-f789-4f5c-b4c1-b94649f01ee9",
        "cursor": {
          "ref": "e69bd20b-033e-4a50-9138-0dc478c88a90",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "900a2d93-888a-47c6-894c-f0ab09b80549"
        },
        "item": {
          "id": "3ea10690-f789-4f5c-b4c1-b94649f01ee9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "37d77689-9f3a-4f4d-aba4-34e473310124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e50c8eb-a3a6-4da3-9888-cdcd18ddafc6",
        "cursor": {
          "ref": "f727ac38-ca0d-43cb-9748-bc7928a5099a",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "bd9a5ec2-9bd3-43f0-94bf-229e1b5924cf"
        },
        "item": {
          "id": "0e50c8eb-a3a6-4da3-9888-cdcd18ddafc6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "382d50d1-24a8-4712-ad90-a90494da6fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567767e5-461f-4fc2-958a-c02419020346",
        "cursor": {
          "ref": "5fac74e9-63b0-4f1e-8d69-8b5d7ef471eb",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "926a3c38-3b1b-460c-b27b-21a780c0fccf"
        },
        "item": {
          "id": "567767e5-461f-4fc2-958a-c02419020346",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8116673a-fbab-440c-a1f7-4609ae245585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c33712-0cbf-455c-9b55-47ef8a8a4221",
        "cursor": {
          "ref": "13bf1f04-fa5d-46c9-a292-533e9cf37252",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "235d0f5e-5a59-4914-8db3-af44bbb70afc"
        },
        "item": {
          "id": "d5c33712-0cbf-455c-9b55-47ef8a8a4221",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3be9cfa0-4694-4303-adab-5f73761390c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c789b7-85d8-461b-b474-be946e9f1f42",
        "cursor": {
          "ref": "6e2b0952-d59a-42c0-89e5-6ad3b5362868",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4b038965-d25a-4b65-891c-62cd8082fa6d"
        },
        "item": {
          "id": "49c789b7-85d8-461b-b474-be946e9f1f42",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "fc28d6b2-f2c2-4333-888e-7b5384398c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a23f02-4d86-438b-9859-2f695b230f78",
        "cursor": {
          "ref": "33830fb6-cc3a-47ed-a822-32e666508546",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4072ef04-1309-4ca9-95ec-7bd86ac3b660"
        },
        "item": {
          "id": "28a23f02-4d86-438b-9859-2f695b230f78",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "32f61b76-328b-42e8-886a-5f29a4f12daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fdaa6f-f7c9-4fb4-8ad4-136fb6657b02",
        "cursor": {
          "ref": "c4792e5d-8002-469b-8418-70af23662d5e",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "29aa3d4a-916f-4ab3-afd9-7bae63b5eea4"
        },
        "item": {
          "id": "73fdaa6f-f7c9-4fb4-8ad4-136fb6657b02",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e461f5cb-943f-4e28-a8fc-a52812134630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8dc756-e2fe-416a-9e8d-b11f223c38b8",
        "cursor": {
          "ref": "e8d96d63-9a24-443e-a71f-bb59e654a075",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1f0780b0-6a3b-42a3-9d82-7c7670d0342c"
        },
        "item": {
          "id": "8e8dc756-e2fe-416a-9e8d-b11f223c38b8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e247c3dd-46fd-42e8-b762-fcc6b461c8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19989e19-1e31-415c-81e7-e9c7dbd30385",
        "cursor": {
          "ref": "6eedb3b2-c371-48ab-b610-69411102b51d",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "029cd21e-14a5-41a5-ab88-d5468b0773ba"
        },
        "item": {
          "id": "19989e19-1e31-415c-81e7-e9c7dbd30385",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1c910a35-3422-4d09-b5d9-420af25c0043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1324ba01-4b08-46a9-8423-c34856205f5a",
        "cursor": {
          "ref": "10df1ffa-186b-4fb4-887b-1af05acae6fe",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5544ec06-817a-4a8b-b3ab-beb0e169a1b4"
        },
        "item": {
          "id": "1324ba01-4b08-46a9-8423-c34856205f5a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "83a0d5d2-a013-4a90-8591-c1a42009960e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b65c54b0-2c21-4d0e-83ce-aad5f3aef370",
        "cursor": {
          "ref": "b0d95256-a1b4-448d-b97a-bd233690a56e",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "aa7a3c4f-286e-465c-a360-69bfb8ec9d8d"
        },
        "item": {
          "id": "b65c54b0-2c21-4d0e-83ce-aad5f3aef370",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4ba3a8b3-b8c9-423b-8d84-e24835779f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eabbf6a-f753-4497-b830-2d1e6e27c650",
        "cursor": {
          "ref": "866823bf-4507-48bb-aea7-12b7a39eed1c",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e06e6506-b6fc-4d05-b916-636cfe3bd5d4"
        },
        "item": {
          "id": "7eabbf6a-f753-4497-b830-2d1e6e27c650",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "283b14d6-f757-43b6-8b1f-89351ba2f6bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f8324b-48db-4698-933e-93967d42425e",
        "cursor": {
          "ref": "57f1c029-3264-4eee-8216-3084ee96e174",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "47f2cc01-5b51-483a-b5a7-94da622b65ea"
        },
        "item": {
          "id": "63f8324b-48db-4698-933e-93967d42425e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d863a27a-f4f6-41e0-b8e9-c0e878e1c921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc807e9-df9b-4df4-ad34-0e2903778310",
        "cursor": {
          "ref": "ba10f662-2df7-4886-ba16-5e900c504f16",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f5b08f4f-c0e7-4c8d-9b7d-b181f689f6a2"
        },
        "item": {
          "id": "7bc807e9-df9b-4df4-ad34-0e2903778310",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b9f03168-4c97-4149-8d8c-04c22a233652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b84be4e-e892-4a20-aaae-ac5258907d5e",
        "cursor": {
          "ref": "a8d28370-d3aa-4568-9c6d-1c6f85a18983",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "76b82d51-10b5-4dd5-b129-6fcf98e4b71d"
        },
        "item": {
          "id": "1b84be4e-e892-4a20-aaae-ac5258907d5e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2780f448-6222-4602-8e49-4ec2713d5593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f91f0d-fed1-4338-93b9-0026edeaaccb",
        "cursor": {
          "ref": "879cc33d-f1d0-4602-b4a7-cf03787b2122",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7ff1ce0b-aef4-4c71-b26b-57b3dda335f4"
        },
        "item": {
          "id": "f9f91f0d-fed1-4338-93b9-0026edeaaccb",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e673326a-0950-4e05-9720-a2df5c2c8d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f3038e-cfd0-4d9b-8b6c-7a2a9db065b5",
        "cursor": {
          "ref": "4ec4a2ac-96e4-4573-a216-eeeb79796fee",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "602a067a-9134-42a0-be83-ebb23acd5888"
        },
        "item": {
          "id": "d7f3038e-cfd0-4d9b-8b6c-7a2a9db065b5",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1d0994c5-908f-4132-8469-95297fca01af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f981f0-a3f8-4ade-a094-a2341ecd7cc1",
        "cursor": {
          "ref": "896f4fe1-a48f-4daf-9fbe-89909696efbd",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "66100e02-c921-4789-ad02-bf528fb40576"
        },
        "item": {
          "id": "77f981f0-a3f8-4ade-a094-a2341ecd7cc1",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b1355c3f-30f6-4a64-a038-023bb7a46579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273b87ec-cf96-4149-82ff-17d76c49b584",
        "cursor": {
          "ref": "2d812dc9-8344-4e46-8a76-2a425aef052b",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "aba3aef2-dc2d-413b-adeb-39553194d62d"
        },
        "item": {
          "id": "273b87ec-cf96-4149-82ff-17d76c49b584",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f26f4d2d-e57f-4be8-8dec-8c55a1755c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b817658e-7938-4df7-b250-a303abca7126",
        "cursor": {
          "ref": "21639058-627f-47a1-90c6-f3d26f5d8da3",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5e2f5fd3-0162-46c4-9314-34246f591397"
        },
        "item": {
          "id": "b817658e-7938-4df7-b250-a303abca7126",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d986365c-5c7b-46ba-822c-72676ac02370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e971539-a891-41b0-8679-7867a05370a7",
        "cursor": {
          "ref": "79576bab-77e2-413b-9bc6-f0a85dd23c5f",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d9f4cf70-824b-4287-bfaa-27a7daf19d26"
        },
        "item": {
          "id": "7e971539-a891-41b0-8679-7867a05370a7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "da86c514-c876-412f-ae56-58ac5833b914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a21772-5546-4d93-bfed-76bcfd7c9ff7",
        "cursor": {
          "ref": "5068fb16-0c07-4f3c-83d5-12818cbede79",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4d961b25-a862-4fe7-84f6-99c32d85df97"
        },
        "item": {
          "id": "70a21772-5546-4d93-bfed-76bcfd7c9ff7",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "224329d7-1299-4b82-8f7c-b0a3f4049304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8c12da-ae41-4dcc-9001-57232798e18f",
        "cursor": {
          "ref": "62df72a4-dbad-4c8f-b524-cb795ae0515c",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "dee0e6be-b96b-42cb-9fcd-30804a5ad71c"
        },
        "item": {
          "id": "4e8c12da-ae41-4dcc-9001-57232798e18f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a771ba41-9d21-43d1-9274-817664a217e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c818256-05c6-449a-99ec-8a6e68ab0c4c",
        "cursor": {
          "ref": "23229ab7-25f9-4e2a-b2bd-59d125501dc9",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2d78f350-6f08-438f-aa45-49d13f1a6cb4"
        },
        "item": {
          "id": "5c818256-05c6-449a-99ec-8a6e68ab0c4c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "30a44f92-82ad-4313-9d79-fe2a186952fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb6408c-3a11-4fb2-af71-f7da56e9d94f",
        "cursor": {
          "ref": "9bfbe465-ffdc-4deb-9cdb-c37267db435d",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2fbffe5a-3bef-467a-8495-90ba674c07c5"
        },
        "item": {
          "id": "1fb6408c-3a11-4fb2-af71-f7da56e9d94f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9f16bb8d-7db9-4f2b-90fa-3acb5f0cfa45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8afa7e68-8bf4-4f37-a210-fe8913a5fb86",
        "cursor": {
          "ref": "27bc6121-9fd8-413e-80cb-e95547b3ef31",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "cfd23296-94d0-49d8-8c33-035433d9f0ab"
        },
        "item": {
          "id": "8afa7e68-8bf4-4f37-a210-fe8913a5fb86",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d9660b27-6ef8-4b8e-a7c7-1376eb20fdf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee891e2-10c6-4f9f-a969-4332ef8ea948",
        "cursor": {
          "ref": "058c4ea3-4643-4b17-91f9-42a500011f68",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c6500b6e-a21d-424e-93fb-5fdf6f8ddab6"
        },
        "item": {
          "id": "9ee891e2-10c6-4f9f-a969-4332ef8ea948",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a23d7849-232a-4666-9a85-b65ee0d29943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a297ce6a-a349-44a9-ada9-1a2926244c8d",
        "cursor": {
          "ref": "8eaddd56-6486-483a-a428-60f02d819ed3",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b869ba7a-fcb2-4cbc-902e-a1e7cb3b0adc"
        },
        "item": {
          "id": "a297ce6a-a349-44a9-ada9-1a2926244c8d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "37513eec-a81b-4653-85c1-5bb27825c60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c394bad-dc88-4e8d-809f-157dcefaa113",
        "cursor": {
          "ref": "8afd90f1-8c04-41b1-9fd6-6515d6326575",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "061ba0c6-8575-4f06-8f0b-41862d5e6764"
        },
        "item": {
          "id": "2c394bad-dc88-4e8d-809f-157dcefaa113",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ecf7b75e-5a76-4c2d-9273-edc001d75812",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f143e3-ec36-4e08-84d3-d35f0c889ff7",
        "cursor": {
          "ref": "f2a722ab-35b7-46da-8563-68f3339a6fe8",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "61500db2-cd5f-4298-abdd-a0ab868772ed"
        },
        "item": {
          "id": "13f143e3-ec36-4e08-84d3-d35f0c889ff7",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "dc87b97e-2bf4-4602-8224-a36dba4c00f8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1874a5a5-e607-4213-a5cb-c71937faa843",
        "cursor": {
          "ref": "f00f0f04-7adf-4a06-9801-ceb99ac455ca",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d78528e6-4342-495e-9102-73b1426f282e"
        },
        "item": {
          "id": "1874a5a5-e607-4213-a5cb-c71937faa843",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "45f75aba-0985-4fa6-bdbd-655743f2ee0b",
          "status": "OK",
          "code": 200,
          "responseTime": 254,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "7803072f-a5e2-4714-822e-37a273124cdf",
        "cursor": {
          "ref": "cdd3a3b3-b838-428e-8388-0a774a341f9b",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e36160e1-a73b-491e-9610-0b6bb7f3921a"
        },
        "item": {
          "id": "7803072f-a5e2-4714-822e-37a273124cdf",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7ca38679-4e41-4930-8b1f-04b3d1037433",
          "status": "OK",
          "code": 200,
          "responseTime": 463,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2ac354-7fe6-405d-9897-3550fbed29cc",
        "cursor": {
          "ref": "f471e60f-cdfa-47bf-8f6e-97fee2d30b17",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "73d06a0d-1137-412e-8149-bec3ad3d4a38"
        },
        "item": {
          "id": "3e2ac354-7fe6-405d-9897-3550fbed29cc",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "f39c360d-f30c-449a-859c-2eacdc15aa77",
          "status": "OK",
          "code": 200,
          "responseTime": 441,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8cac89-59a8-432d-8e1f-f7c778beee22",
        "cursor": {
          "ref": "8355e172-f9ce-4480-a6d3-edd4837f87b9",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f1be233b-9ef4-41ab-9441-e904fac79030"
        },
        "item": {
          "id": "3e8cac89-59a8-432d-8e1f-f7c778beee22",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e2bf6dad-c76f-4bb4-9e27-f49db040e02d",
          "status": "OK",
          "code": 200,
          "responseTime": 384,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6883026-165a-47ad-8b8f-a56efd33c241",
        "cursor": {
          "ref": "e95ce3a2-323b-4a37-8d91-4c2bb39466f8",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a4df1e66-e3f3-4b6d-b9f5-9cb35828f720"
        },
        "item": {
          "id": "d6883026-165a-47ad-8b8f-a56efd33c241",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "539ea8d1-acbd-44e4-a597-8d666b8b1574",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6883026-165a-47ad-8b8f-a56efd33c241",
        "cursor": {
          "ref": "e95ce3a2-323b-4a37-8d91-4c2bb39466f8",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a4df1e66-e3f3-4b6d-b9f5-9cb35828f720"
        },
        "item": {
          "id": "d6883026-165a-47ad-8b8f-a56efd33c241",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "539ea8d1-acbd-44e4-a597-8d666b8b1574",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6883026-165a-47ad-8b8f-a56efd33c241",
        "cursor": {
          "ref": "e95ce3a2-323b-4a37-8d91-4c2bb39466f8",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a4df1e66-e3f3-4b6d-b9f5-9cb35828f720"
        },
        "item": {
          "id": "d6883026-165a-47ad-8b8f-a56efd33c241",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "539ea8d1-acbd-44e4-a597-8d666b8b1574",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "157759d4-e8c9-4fc3-a4d6-dbd984418ad7",
        "cursor": {
          "ref": "c40be747-aa25-42d3-b7c8-c96123fc71c0",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1eb1c3da-7d1d-4333-a02b-14425ac77117"
        },
        "item": {
          "id": "157759d4-e8c9-4fc3-a4d6-dbd984418ad7",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "f7788526-7e9e-4dd5-94ba-5f9d19ec6249",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c4db6d4-d7f3-4291-ad48-d0a2af7d5d92",
        "cursor": {
          "ref": "176a3555-9a84-45bb-8f0b-0b1aba2f8636",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9436c275-0bc2-4557-8ae8-31e521f09889"
        },
        "item": {
          "id": "4c4db6d4-d7f3-4291-ad48-d0a2af7d5d92",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bbc5e9d6-2270-4603-b524-b7daf0f11221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "4c4db6d4-d7f3-4291-ad48-d0a2af7d5d92",
        "cursor": {
          "ref": "176a3555-9a84-45bb-8f0b-0b1aba2f8636",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9436c275-0bc2-4557-8ae8-31e521f09889"
        },
        "item": {
          "id": "4c4db6d4-d7f3-4291-ad48-d0a2af7d5d92",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bbc5e9d6-2270-4603-b524-b7daf0f11221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "dd37636d-2a72-4d19-89ee-4a584d424aff",
        "cursor": {
          "ref": "1b7f4657-6c09-4a6b-8077-9a48548cb7db",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1d64afb4-d334-4cd7-96b4-634cc4aec218"
        },
        "item": {
          "id": "dd37636d-2a72-4d19-89ee-4a584d424aff",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "a43efb04-e06b-4310-90af-914c9aa8500c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "86453a64-3a09-4d73-a0fb-b5db400b2617",
        "cursor": {
          "ref": "7966e5ba-5746-467b-8b24-f572a8578ee3",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a7df0271-f01e-48e1-a4e2-76fba5eee92d"
        },
        "item": {
          "id": "86453a64-3a09-4d73-a0fb-b5db400b2617",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1a5740c1-23ee-4ea2-a9f7-5029e66dd4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "86453a64-3a09-4d73-a0fb-b5db400b2617",
        "cursor": {
          "ref": "7966e5ba-5746-467b-8b24-f572a8578ee3",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a7df0271-f01e-48e1-a4e2-76fba5eee92d"
        },
        "item": {
          "id": "86453a64-3a09-4d73-a0fb-b5db400b2617",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1a5740c1-23ee-4ea2-a9f7-5029e66dd4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "0a9df928-d7c0-4e00-b44f-fe67f8d9fd2c",
        "cursor": {
          "ref": "0c449293-7cf3-4b43-9d91-0be9e1ed4e89",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "7eff8fac-e4e9-4fe7-9730-aa7ba12777a7"
        },
        "item": {
          "id": "0a9df928-d7c0-4e00-b44f-fe67f8d9fd2c",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "e9977dca-848d-48fe-a8b6-5884d1d4570a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}