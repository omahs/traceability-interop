{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "25aff786-1df5-4f4e-8fcb-b89047f28775",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "be9aa4a9-8d71-47f4-8029-66ab7e345208",
            "name": "Positive Testing",
            "item": [
              {
                "id": "95c8cccd-e525-49fa-89b2-e671466ee02b",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "103bba2b-5bd8-425b-8f79-add8dd91de76",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5efe5dba-ed9c-4d45-a5bf-2c242a456522"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "8de8ef6f-261d-4312-b5c4-ffe92c92792c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "238a9180-c9e4-46cc-96f0-e6f2d99dba9c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b1ef6cbf-86c6-4ead-8a49-5cc689b34480",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "56c44994-9a8e-4211-83de-f7bd25e37d16",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6379f907-5fa1-45f1-8d0c-50f61d4a1066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05380c2e-2257-43cf-bb67-3829bfde5cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3524d3a-cac5-4f82-9ee5-b85235b6d839",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae07a07-9e37-4b8b-923d-d34c34a06f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23f8863d-8e34-44ad-8e77-302faaf9c342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd7ec9c-8e56-4f97-bc11-5bb22d240afd",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad51c1d7-5791-4211-ac14-5632d44664c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4fd0cbcb-bb10-47ac-9c16-1b3520e571fb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7dda76cd-bfda-4766-ba46-74d3bc4aa1e9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d7e4a630-42d4-46b0-a1d0-0f9b1b27aed3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5fccbd3-09c4-4ead-a892-f8ee23c331a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1313e52a-8b5b-4926-9296-3632fe7e83f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9690c412-157b-4642-8535-107bd6ebd4b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42607235-9066-4ee9-807a-f21ec03267c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0efc83ad-6837-4195-b4e1-b5d947afed95",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e04772-cf68-4af4-ab02-d1678d0c5c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63850d4a-b4e4-40e2-b2b1-def946dbda39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f7bd8a-7fd8-46cf-87ef-6805e595d2fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b9cee06e-7914-43af-ae87-8cbe2bb35c73"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d0befcd2-1093-4171-9f58-dc979373af7f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4a57e9de-edb9-4ac5-9458-9859acd3f1ae",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1d3d032-62de-423a-98ba-6697b6dfe03a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1dce4198-c6fa-440e-8fcd-26b6fe060d7b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b8d8edc-42aa-4ac4-a826-b629c52dbb12",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "98ffb97d-6e98-4ae9-949c-e0c0ad4483e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e07a1ba6-255a-479c-b594-211ae5256862",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c0faa4b9-3651-4ed1-b655-2c7bcacdac71"
            }
          }
        ]
      },
      {
        "id": "e7ddb6c9-76c3-4f7f-9321-40208874723a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "14590306-56ad-4227-bb9b-b32d78a1046d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e7ddc244-254d-440e-b172-8ae632f48068",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8e06234b-f8d6-4c6d-80af-09e6e6ca60fc",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb073b4b-5300-468e-85b3-aea86de4ab19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b37cc1a-8e78-4fa6-af12-5d8273ceccf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c148c2b-920d-480d-90ef-2497a92bb74b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7d5ec4b-47ad-466f-8f27-76c603803715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf0937a-826b-472f-ab09-1640afa3ca21",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc047e4f-d056-447a-9c4f-d6961ede7cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a42a61c-5e74-413c-b8d8-ac065fa0f7ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4332da4-e1c4-4260-89f6-3c8491d59a91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c1cf526-48ee-4d25-a0a7-7e0f83bef1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c910b1-ec13-4674-b81a-e1fd771f72cf",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7cd34f7-c639-4708-b546-96db61e797ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e48720-e0a4-403d-a3e2-f6a3d99e4844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7434106-95dd-4c91-8324-fd3df78da772",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc069062-c8c0-47a9-aeea-06504dcea50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b76b6af-756a-4b7a-910d-b17613d7a568",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c768e2-a8d4-4768-9bde-d0d2ff72f17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "091c4897-df96-41da-ad2e-48a9d5d98767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354a2e89-e5d2-4cfd-ab32-ab604b1357ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cbff6bb-8c03-4278-834b-0964d83d9b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd743da4-5cc8-43b4-b98d-f9419cff7394",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d5a2bf-88c1-484e-ab08-cf20891ca0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cb9b99c-37cf-44e1-87c3-f796edc6398c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3aded11-8e47-4777-a23f-a8c0c266a646",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e54cb328-8e89-4fc9-b3b0-eda5e7c0898f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ef4c2c-3385-45ac-9a05-6146d1b90088",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "718514a0-12e8-4353-b639-3f0860ce6691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b666380a-58b2-42c5-9192-b8503849b90c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1c4215-f21c-47de-bf44-297ccb692066",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc18692e-9315-49f0-994f-ab3cb74635fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a6c6de-19f9-4e85-8b2c-6f184ea7c443",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "924016cf-fb56-4b06-806b-01e67e36f4ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73032523-4143-48b6-bd8a-36ab744c87d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a233e939-8f17-49ab-bbe1-a1021c6c5f73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db9df75c-d9a3-44b7-be8c-c44f42ab2559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4323b62f-0386-446c-9b31-af2c9f9c2348",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3a08c0-44b1-487e-9050-b0137dee4a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "650f2527-4a36-4efa-8917-7ee1032a95ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30bd4ac8-108b-4042-abc0-54aa5fb7a294",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4f70f86-7958-427c-a725-5704531e90dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b46393-54bd-43dc-beea-504bd44f2fe1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c039f4b4-ea01-4f68-b2d8-66d89c67002a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09273c54-b6de-4047-b0fa-b9d90533badf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f866ee2d-e886-4990-9838-1e35678529b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a4e56d5-0430-4b30-9017-4511ac5fc51d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8c17c3-1054-4038-ba1a-11eee134ce52",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb5d5b7-adc1-4a55-b1f7-27b88ff27fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f737148-429e-40ee-876b-9f57f1c0ab95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a351c4-6b64-490f-b940-d98f9a3f85df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c384d7bf-12e1-4dc6-bdf3-f69e08b68202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef06855-81a8-49c7-bff1-9cabbcd67c87",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ec6242-30b2-4e2f-8a14-b16dc4f765cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e0664b-6074-4f2f-9347-b22671cb151d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79b77c3-e93f-451c-8dbf-3c9ab8e5c905",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "10fc1bf2-ff63-4db9-8bb9-f54042ba866e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec4d339-3cf8-463b-a7aa-098282eea537",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ced022-4d69-4ae8-9193-14c49d317063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cc65dff-52c4-4e55-bd90-60f84ea5cf36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c770e0-480f-4137-80cb-89e6ae49b41c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "d3221fae-f668-423e-9d8e-ffbbeb7f7bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8d6e59-ed5a-43af-ab23-44132b7bc599",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30af44ea-79c1-43eb-aeea-20be471674b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a8cb901-dceb-4e5f-98e3-ba7029a9e863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17485332-493f-4607-9dc3-b4066c18e6bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0eae57f-bb61-477b-a0d6-f4ac9bc0fe7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e236c5dc-dc79-404b-8e3a-f39fc42e9004",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc815f52-d7c7-41ac-a529-be96c8d6248c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0af04cce-2016-496b-9146-e23cc51fd0da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363fe55f-7983-43f3-b586-a8a1a9b8faa2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7a50535-74fe-44a3-8cd7-7488d3f90590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36359fa4-9acf-48cb-bccf-ebf3886bc9d5",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdcb609-3c90-47a1-b5a3-be8d2d4badb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf18f5a4-3b79-467a-b531-5a7385fa30b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c61d431-b022-44c9-97df-42fc867a0b1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "90cd3e93-92a8-4bd6-a045-23cdc7004bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308d9c44-3dc8-4fad-bf25-a5f35743d577",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42df700-a1aa-46b6-8253-d8507c07efec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afe21f4a-fc99-44c3-bf5e-803b3f6833dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f5f934-9b84-49c5-939a-c0a4660bb573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "730608ea-c340-4b75-b2fa-564796691620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35691a2c-9608-4fd5-b5fc-e6ecfd08fcc0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e378675b-c1fa-4ff1-a38e-24758e2a9bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82648053-05d3-4f47-9b82-d4e62dbfd791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac6daf6-2c69-450f-a91f-80fd4150419a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6ea4db5-152f-447c-8efe-0dbeb87fc32c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb61e481-2795-41cc-a761-8e8ba8dbb919",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e69708e-b7c3-493c-803a-3f8c10120ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55480812-a815-4856-ac4f-faa1e088a063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99b330d-0f66-44e8-963c-9d9b097f0dc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "717c77e1-888d-414d-aed7-22ba0f1bb858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f083615d-297f-4697-be15-9eac392bc780",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6add6891-1ef0-488e-beb0-c86ffa882688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "742382ec-946f-49ce-85ed-b949797da42e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326eceae-add4-4bcb-8158-8f41c564d200",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb95af81-406c-436f-b9f0-31888f0f6175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c591ec0-06f7-4d0d-ba11-12ccc198faa8",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d882a18e-befe-4dbc-9a19-9a94ed27a025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc642cda-5a24-44fd-a5f1-fdb29e8bf278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7021a1-710b-4ef3-879c-e9485cf2434c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b1fd9b3-a54e-4701-b293-537aee6019bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffcb976-d5af-4414-9b96-d342f6b30adb",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e522eec4-626b-4d5e-8391-981805134653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f77bacb-6f49-445b-a79d-e6178a2c38cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e08914-3580-4f52-aaac-5a2539e83c9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a51073b0-90ca-4c31-ac58-b47ab856d4b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744c12d6-a3bb-4a36-9992-7cb6c9ca80c8",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba38e4e-ebb9-43dd-93e9-a7a1c40f45f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "574a54e8-172c-40a8-89df-c7cf79a1a1fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c33a646-b220-4e03-b88f-c859ce32d6a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20cdb585-fd3e-4e19-b58a-6cd290b58877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0efe8cab-64e5-4e03-985a-8e13855176ed",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b5a891-efe9-4ccb-a96a-dab562a8d65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dae0cd8-93ab-4b0e-af6e-3fb4c5a3977e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2d6443-54ee-4e73-918b-0bef62fc0369",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b09fcee-80d0-4779-b820-c21de9be4225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea925d32-c151-4b0a-84f5-5c16cca7a3f2",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb8e011-4eb9-4b89-8f08-c4a026cf22a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21526075-2d51-4a13-a5bf-709788655aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721f0757-b51c-4dbc-8c16-592e38e4f577",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e8cf686-2223-4ec9-aaa8-db982f035215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051f915b-4e93-447f-8e4b-ce9dcf144524",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a852fb-8776-4704-8f7d-f4363a3c2de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72430415-9363-4669-9438-e63c53d43f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2887a892-0451-4637-9997-c49b07a8e76a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18e2a203-cb2a-4f84-addf-ad31c7582daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3fe85b5-3a7a-48af-b95b-e80fbe5eb1fa",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "907a8325-3c71-4bdf-bddb-d028f8c81032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "784a93b5-1bf7-45cc-9df3-4a77fd299df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d923e305-cc0a-488d-b5c4-40560249ebf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12a859b3-fad8-4b09-83d5-fc3a74038722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19ba1ba-5375-4e89-b3f8-fbb5a9f2e1e7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a617326d-d239-4757-a6f1-6e2a9147550a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "659a3121-0aea-431b-bd50-843ed4462c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d50b333-31dd-4bd5-84d8-e1fd48fcc0ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11f1a96f-1934-4cfb-888a-7b26f7efa8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5cfc73-4753-4f54-9082-3b5f5cd9dc87",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "141d6112-eee8-40a1-9246-441cfaf72801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bae9275-88a4-4075-8419-54fa586e66c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505c6cd9-4b13-409e-b135-59220bbf99f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f76258cd-95b9-4d36-8d6c-440a5355c19b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf17032d-69dc-4fe7-8b42-0f5c310f16e8",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6f7eb6-fc71-465b-ba95-59a87590fc2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d9ca7db-4b61-4e87-9969-ff67749f4927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147edc56-440e-457c-b6ae-c3b67c116a24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "434077fd-8147-463a-ba90-1586934a07e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698b57fc-f6d8-4b78-bed3-fecee207a4fb",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a707c8-5e21-4ddc-bb41-8669ac36610c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d733b25c-ace5-4f3b-9b2c-c83117c95581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c58bce-1dfa-4d84-bc9c-b679d351be3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0085224d-91aa-4e70-8201-f619a4485689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df027ab-347e-45e7-a1b8-3aea362d3d13",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae1469e-50f5-41a9-99e4-ceadcc11565a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f881ac5d-1882-45d9-992e-0af18f10ac77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63839c9a-2f2c-47d8-a53a-b9b737be759e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68301585-37b6-4b28-b478-3a798fe566b3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a68ca4d0-70c2-454d-a59c-2a07d75fd99e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "51bf5e73-4ae1-47ab-8c76-1be1c874251a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "302b8573-fd27-497c-80cd-19b918959aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93f86004-1a39-492b-98d0-0db7e7235ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e50bf5c-0f51-4e45-afd1-d9580f39c410",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "201761c4-149c-47b8-a38a-fd0b3ec74fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9a3695-6852-46c4-ac1b-8a126bc9968a",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bac450-5290-4f20-9600-cbf8f670b686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2cf6db9-17a0-49ac-8114-3ce5a312fa8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0913f68b-1418-4f90-b475-b3e2da324bf7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5198726d-494a-4c51-aa5d-ae3a1c041a14"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06fb38a0-d625-402c-b9fa-999b8f2a208d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac23e607-df53-40a7-b709-1ec978a9b47b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b69b8fd-84da-4d05-af08-59cefd33072e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8601ad0e-36bf-47a7-9bad-8f233e5f3816"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8092b96e-d469-4ee2-8d5f-24eb2a401a2e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9d6abbfc-1143-40bf-a3bb-a0a016416602"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8f8a5e55-5676-4858-8e58-9e749af52e1d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2c7758f3-1ba7-415c-9fc2-57a47f653609"
                }
              }
            ]
          },
          {
            "id": "6f1bc44d-e779-4d36-b5c2-b634b170f446",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e1d165f2-2a2a-4a22-b388-d8832679d7fb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb9864d1-458e-4671-8082-caa4b36d991e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d281bd3d-e3c5-4b0e-8766-a1f64e9c063b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d64a379e-8397-4279-ab2b-b52d04bbc81b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "9eb5d2bc-72bb-4ac4-9929-feaf5fd6082e"
                    }
                  }
                ]
              },
              {
                "id": "594b3354-2657-4889-877b-897d5dacedc8",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "56886c83-eb69-438c-b9d6-ff2f548932e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9d3807b-b5ae-425c-be3c-ff13d8aadaed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e1630e0-a8bb-4597-9439-a9498c3ba24b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "eecb139a-8887-473b-9f6c-bdc28c3f86e3"
                    }
                  }
                ]
              },
              {
                "id": "4ce5d91e-74bc-4e11-bf21-ad835125bfcd",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a07a79f2-9e80-4b2a-8438-b2283df3df4a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "58896963-4660-493f-96f2-91ffaa8f2b8c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16513793-417d-4482-a707-269c187d4bf8",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "df6106b0-4b62-4db8-9f0b-993294c26899"
                    }
                  }
                ]
              },
              {
                "id": "31454061-8d6b-410d-8615-e1eb2c95ec27",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ed142b2-c4ff-45cb-b367-5b277e4cf08a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3913df80-9afe-42a2-bb47-f822786fa728"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0df6edd0-7793-45ae-9c70-628289554720",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "6a4e2d2c-a0be-4796-9285-1cd5c45dd396"
                    }
                  }
                ]
              },
              {
                "id": "394644e8-029c-434c-ba1c-b81308be5ac6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed6ef808-b338-4c17-aaa6-9a02a5f3238b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5e405382-9af1-48c4-8578-3fd47a4690a9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee41d2f7-7a28-4aef-81e0-3e5ee9d6b1ce",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "377e908d-b43d-425e-aa00-d88d8966714c"
                    }
                  }
                ]
              },
              {
                "id": "c29319ed-71c7-4ae4-bbf0-715e0bbce3a4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcbc6b2b-0bad-4b66-b8cc-a803d186ceda",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9e2dcf1c-63dd-4aa7-8b6f-2b9c10c4862c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a454fa6-6f56-4ab7-b283-f03384ab7944",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "6a840824-6cb6-418b-bb1f-145ae6fe968a"
                    }
                  }
                ]
              },
              {
                "id": "4d342814-ba46-4e10-bde1-ef02368d6f10",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c20601c2-df3d-48e9-9b76-b75d55eea2f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cc84ef11-b1e7-47f9-a9b9-f2695c6b0ff4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0db8d53d-f02b-4c22-9c5d-30cffca789c2",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "88d1df86-cc6e-40aa-a00a-45dd2b68a5b5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d742d81c-cba4-45e8-ab40-5edc9525cc1b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "36a031ca-6e81-4fe3-9933-e0ac875c34ca"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "53b7310f-afcc-4773-94ae-05cdafc8ffab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5ad9aeba-bbe5-4776-acfb-ab90de551bbd"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bfedb880-9546-461d-915f-da452db215b7",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "24f14b82-f7ee-4dc2-90bb-d9aa470cda6b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96ddde01-4eb9-4bd0-8cea-c0d412e0ee8c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "88b5c268-6be8-4cbb-a6ed-db30a808fbf4"
            }
          }
        ]
      },
      {
        "id": "77291508-31ac-4053-8f3a-f714e6c76ed8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2a0407ae-cb4e-4216-a34d-87494d35c864",
            "name": "Negative Testing",
            "item": [
              {
                "id": "417a5c35-0d4e-4aaa-bea5-43bb6798d3ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3d253488-e473-4f71-9050-1028e1b08644",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d16196-c55c-4215-93ed-893086ded744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "486a0936-5780-43d1-bf63-067d867e7c10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aef423a-06e7-462f-a578-759bcda882de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd80dc11-f7e4-407a-82ad-25fc439ea3d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc5ada5-93e7-447a-9a5c-92de0182eea1",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1d80ee-b7ca-47ac-ba4d-c6a589cd7405",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "362e0d58-aea0-41fd-a287-0853844d19dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74bae898-f860-4d97-b8f6-f1ddaf6b2594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eeb94f1f-bc06-4d39-af66-7979a762b2be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a3d8b6f-7ba2-4212-9dce-6abf336efd63",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f472a30-79a7-43bc-950b-27aa9d058d47"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "66b0c5d1-11ce-4352-8388-644fe3ddde2f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c5558fd-59cf-48a1-9120-ce3a06d51e12"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f50eed6c-3347-478b-a272-63bd953a2fae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "03f86b57-fbb4-4b4a-8b8f-f146220e5aab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "136c3e63-bb08-44aa-ba42-96de8dcbfcbc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "17dbe543-b2f7-4149-a6d2-4711b8e461ce"
            }
          }
        ]
      },
      {
        "id": "dbf48e56-33fa-40dc-b04e-69c10de48c17",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ac7b6711-f859-46e6-b078-9bef76e9926a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f50b422b-0434-4158-b3bf-1ec1dbfbfa96",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "47ebd6a3-b6d0-4fce-896e-a245961d316f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead04e69-2e67-4788-a64f-f480a1ffe372",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e95004a9-038a-4da9-ac43-4e05fdfe5a7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff21dffa-f211-465a-8d20-7ccd49547dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9cbc1f0a-a3db-45ca-aac8-6f8c505189a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed244fe-1e13-48e6-b31b-87d918f31176",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d863d95d-0443-4ca2-a4c8-d9fa46c2cd1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d70e5139-a995-4d6b-be38-13eb13ff2c3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b83184-be24-4053-bf67-c7a66777589d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9552ca67-5d74-4f7e-8b07-9d21112315fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed99b782-077a-4250-a6e4-1a945d7e4e79",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0fc3e4-8a53-4983-bcc3-980a66fd030d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e02bab9-aec8-49b0-b94d-1330db8277c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "129b90c1-be30-4e43-9f6f-50ae5d1a0b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a970d53d-1a38-4322-a113-3ab13fce2d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac9205f-d4cb-4879-9bcf-8747a926dc56",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb16113-354e-46ae-8f94-d3809f099388",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a84d5cff-6186-4514-95fd-2c23a7282970"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cfe2ab1-ce8a-414c-96d4-e475f7efb7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "daef200c-7d65-4dfb-b764-b6f220bb4ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1523d6ef-fb04-451c-8fe1-659769aef3bd",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaeff95c-97c0-4de0-a7cf-cc1efb9432e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1e5d83e-1087-4719-ade9-10819e0804b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8184c9-e5e7-4d45-b68f-925030b5d367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03c2be3d-5955-4b18-bb00-5354d47e6c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36fefb80-6a60-40c1-8735-9ba1d7dbde07",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93b3218-a68b-43ae-ad78-b52a4478c20f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0335bef0-7876-447e-a011-e9b3d20fe0c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8e5a90-2946-4fff-94c7-3ea151c6b175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4673cfde-d737-4346-9ef6-280602d7368e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5549e137-a37f-4751-89c5-238ba4d12eb5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7788e671-2278-4b74-b088-b7e36b47ffbc",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a086050-a052-4c16-bb9e-2ecb72cc73f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "b33acbd0-0e5d-4a59-b409-35cf649f5f7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34030588-3c60-4982-a851-61251f698f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02f87b5d-aa2d-402a-b2aa-16694a74aed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d934924-d2db-4048-958c-6d116504c261",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a9b23dd-302d-4125-b5b4-7f292a56d020",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "9a87caab-bb0c-4aa7-8f3c-147efa3fa172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93fdfbb-d2b4-44ba-a41c-6ef6219744f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29d8b976-d46f-4b08-8e06-b8f688758ba6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99824dd8-b4cf-4f78-bdf9-cd761c0182bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e3880f3-bd9a-424b-b32d-d879b85dabf7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ede558c-b40e-417b-8571-0edbb94445a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9fd77cc-d95c-4cd2-8c64-9d69dc78ef03"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2174f82-e125-4fbd-9ba4-1ebe37919494",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "ff3693c7-fe90-4bac-9367-241afd11b3cf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "853352a5-6ba2-441e-ac8d-f6f08ac30ac7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "335bf78a-acec-4c0f-b188-20411d93d7dd"
            }
          }
        ]
      },
      {
        "id": "715dfb64-4dce-4620-a45f-029484b5ef03",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0ea4e4da-d907-4288-8307-c5a8c4af7737",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d18b029c-67c1-4cff-9eb6-e2e05b90f8fd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9ee171be-21ac-49dd-97ba-3274facbed21",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0ad6c9-b6dc-4349-bbb9-464aaf7933f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dac2ba4-4076-4d84-bdf5-2cc6b437b9a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae9c592-cb5d-4ddc-b327-bc02cc8a24f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f2412c2-aaf0-4108-b323-6dfde062f356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f4a8de-6657-4c9a-b690-3b119fb81f72",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426fb796-6de3-43d7-9671-d0b637ecb62b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "4daccad6-c4d5-4940-9aa2-12749aa85c42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d49542-4aab-400a-9b03-4c4308b2b4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4bb61f58-ed37-45c8-abf7-b021ad9ed100"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22f1665a-1f50-4c39-8205-5c8c420b9bbd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1204bb4-fdd5-4e16-b96b-fd4540d17caf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "213c9b49-3fcd-4fc0-867f-8fcc306a6ce4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b6be4f4-d99b-4021-92fc-599a3721717b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f581bfe0-e066-47eb-a6a4-90ec30766d33",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "6e05e9af-6612-4298-913c-9e0cc378421d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf9c7517-2f1c-44e4-b02c-1570856784e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "625f02c9-abce-4133-a0d2-aabba90af649"
            }
          }
        ]
      },
      {
        "id": "2c449fe4-4930-4346-b4ad-307009f079a2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "976e2f2c-e9f4-4433-83bc-af18a7d8a8aa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "91b9a0ec-e28a-47af-aa78-22e4bcf3367a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9905ca78-c50a-4f38-8e6a-8efe3a8112b0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5df7ed7-25cd-4e50-af70-918529db95b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3763319-b600-4273-a87a-b8ee53d85aa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b879f829-2393-43b9-9d10-90ebca27f59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5e83b7f-f12f-4016-a1bc-1f27db1b9afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d68222b-2513-4f98-9e1b-beff36cb1cb4",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ba45ab-6c67-495f-a35f-003405936230",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "f82e8ef3-8e4e-47af-8e83-cb5d868ce296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3946ab4b-a4b9-4e00-bcea-767d9e42fca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2094da3c-f15c-4630-ae6d-b498d563f23f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b71222e-ba24-4fe7-a8cf-456803f3da8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7982714c-09cf-4c59-b41c-f4250a8294e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a08d7b3-2b27-4c26-902e-dc9d941df842",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af68836a-a43e-4561-8818-2071c381d21e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "82d25d58-7b9e-4127-9e71-949576cf6080",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "9fd56bf1-7618-45eb-a9a8-8a766138b7b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "03c36316-5f3c-401d-bd8e-1e18170168da",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5fcf26f6-eee5-4950-aa41-fa4c7b1d9d16"
            }
          }
        ]
      },
      {
        "id": "0ef67ffd-0e2e-4737-ae9e-816e23d53679",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ac96e740-acb5-46b6-913d-1bca353e15f8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "027b914f-97d5-434b-82d2-7260f3db1946",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "643c8e63-260d-4279-a883-dd7eaadf36b0",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2135df4d-ffde-4c72-833e-20ac2856e1c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8fa4af2-9649-465b-8329-514042653805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e1b449-9344-4029-a248-d7d2561cba83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "061d8f63-9140-49ef-8f33-d2c126b5aaed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf000ca9-9741-4721-949a-6149b0e5f346",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a56e05-5f47-48a8-9f07-9647fe5464b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "10212d66-33a2-4f51-a794-2354727a2d95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa90421-ddd9-402d-b171-e69a05e419cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "769b78cd-b3be-4e94-b1a3-6ed8459b94e5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9566721-a240-46dc-b196-bd52d7ed1ef6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afb58247-856b-4966-a666-1e42948785a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc3c897f-bb4e-4dce-8f02-458c2946340a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffda75e9-80d5-49b6-b459-8dc68ca7af7b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fcca2ec5-b787-45a8-88e8-bc4f3a865fa6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "5ec422cb-3d6c-4946-9630-223655fefd4c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1282560-51f7-4ffa-807a-6413b43194b3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "825a13cd-b40a-4fa8-89d8-dfd59be945ef"
            }
          }
        ]
      },
      {
        "id": "b392742f-c6f3-4ff5-9d3b-1be7149539da",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "e2699877-b12b-466b-937c-d8ea5e6c32b0",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 475,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 111,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 131,
        "pending": 0,
        "failed": 9
      },
      "testScripts": {
        "total": 240,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 235,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 46.459459459459474,
      "responseMin": 4,
      "responseMax": 673,
      "responseSd": 99.09989352670921,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1663635165414,
      "completed": 1663635173594
    },
    "executions": [
      {
        "id": "95c8cccd-e525-49fa-89b2-e671466ee02b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 63,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "196733da-9867-4eb0-8e0b-0fa520e6e226",
          "httpRequestId": "8f9fff33-43e9-430e-8102-476b36479ba3"
        },
        "item": {
          "id": "95c8cccd-e525-49fa-89b2-e671466ee02b",
          "name": "did_json"
        },
        "response": {
          "id": "4669c1f9-c0f4-4be0-beed-4a7f74067144",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 1289
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "56c44994-9a8e-4211-83de-f7bd25e37d16",
        "cursor": {
          "ref": "5df3cced-4984-4cd2-b3c6-9e75e8c82b88",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5ff51cb2-ce9c-4113-b94f-61e49f21f96b"
        },
        "item": {
          "id": "56c44994-9a8e-4211-83de-f7bd25e37d16",
          "name": "did:invalid"
        },
        "response": {
          "id": "1648327a-c976-4eab-b4c9-d711d261ee92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56c44994-9a8e-4211-83de-f7bd25e37d16",
        "cursor": {
          "ref": "5df3cced-4984-4cd2-b3c6-9e75e8c82b88",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5ff51cb2-ce9c-4113-b94f-61e49f21f96b"
        },
        "item": {
          "id": "56c44994-9a8e-4211-83de-f7bd25e37d16",
          "name": "did:invalid"
        },
        "response": {
          "id": "1648327a-c976-4eab-b4c9-d711d261ee92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3524d3a-cac5-4f82-9ee5-b85235b6d839",
        "cursor": {
          "ref": "d2746a0b-fced-4881-a406-659abbb381c1",
          "length": 63,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c02963f1-e89f-4d24-9d08-eeec91c85295"
        },
        "item": {
          "id": "a3524d3a-cac5-4f82-9ee5-b85235b6d839",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "14c77b79-26bf-4e07-8123-92cb6131ffb4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 57,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd7ec9c-8e56-4f97-bc11-5bb22d240afd",
        "cursor": {
          "ref": "2eb3dd8e-bdfa-482e-999b-e2232798faa6",
          "length": 63,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1cceb94f-9a72-4736-a6c4-599a4baa05ed"
        },
        "item": {
          "id": "2cd7ec9c-8e56-4f97-bc11-5bb22d240afd",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "62c61f15-49dd-4f91-8e83-1a9f03fc01a5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 6,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e4a630-42d4-46b0-a1d0-0f9b1b27aed3",
        "cursor": {
          "ref": "6feb2aaf-ca41-4d1b-89f3-d91c7abd309c",
          "length": 63,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ab160891-af2e-4786-8e71-8f9064aecba2"
        },
        "item": {
          "id": "d7e4a630-42d4-46b0-a1d0-0f9b1b27aed3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a80f83d3-17d8-49f5-b3ba-86af9e5e32ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0efc83ad-6837-4195-b4e1-b5d947afed95",
        "cursor": {
          "ref": "eafd930e-9f9a-4173-bba9-ca72a79c5042",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4214f46d-850b-4cbd-a0cd-1ae4ea5e3783"
        },
        "item": {
          "id": "0efc83ad-6837-4195-b4e1-b5d947afed95",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "fe50fc5a-71bb-408b-a2bc-e1ad6c78736d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 23,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0efc83ad-6837-4195-b4e1-b5d947afed95",
        "cursor": {
          "ref": "eafd930e-9f9a-4173-bba9-ca72a79c5042",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4214f46d-850b-4cbd-a0cd-1ae4ea5e3783"
        },
        "item": {
          "id": "0efc83ad-6837-4195-b4e1-b5d947afed95",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "fe50fc5a-71bb-408b-a2bc-e1ad6c78736d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 23,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a57e9de-edb9-4ac5-9458-9859acd3f1ae",
        "cursor": {
          "ref": "e3339ce7-c95d-4f73-8f3a-f08cf6f988ce",
          "length": 63,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a0d0fd98-6617-46b8-9580-6ac3299edf72"
        },
        "item": {
          "id": "4a57e9de-edb9-4ac5-9458-9859acd3f1ae",
          "name": "identifiers"
        },
        "response": {
          "id": "145a11b8-6be0-400c-b801-b653c4b1932e",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 1318
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e06234b-f8d6-4c6d-80af-09e6e6ca60fc",
        "cursor": {
          "ref": "78acf83f-f63c-4cf3-85dd-8e2825c6e127",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "93a47256-9598-4d43-a245-cdc6d1dc7e15"
        },
        "item": {
          "id": "8e06234b-f8d6-4c6d-80af-09e6e6ca60fc",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dbfc70f3-d1ac-4119-b282-28e3911c266d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e06234b-f8d6-4c6d-80af-09e6e6ca60fc",
        "cursor": {
          "ref": "78acf83f-f63c-4cf3-85dd-8e2825c6e127",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "93a47256-9598-4d43-a245-cdc6d1dc7e15"
        },
        "item": {
          "id": "8e06234b-f8d6-4c6d-80af-09e6e6ca60fc",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dbfc70f3-d1ac-4119-b282-28e3911c266d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e06234b-f8d6-4c6d-80af-09e6e6ca60fc",
        "cursor": {
          "ref": "78acf83f-f63c-4cf3-85dd-8e2825c6e127",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "93a47256-9598-4d43-a245-cdc6d1dc7e15"
        },
        "item": {
          "id": "8e06234b-f8d6-4c6d-80af-09e6e6ca60fc",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dbfc70f3-d1ac-4119-b282-28e3911c266d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf0937a-826b-472f-ab09-1640afa3ca21",
        "cursor": {
          "ref": "5dbf00ae-525e-4562-b6eb-05e69f811a4e",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9c6f584c-e062-475c-9796-149a59098a34"
        },
        "item": {
          "id": "edf0937a-826b-472f-ab09-1640afa3ca21",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "821ddf17-03b3-4fc0-b686-67b63debfeed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf0937a-826b-472f-ab09-1640afa3ca21",
        "cursor": {
          "ref": "5dbf00ae-525e-4562-b6eb-05e69f811a4e",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9c6f584c-e062-475c-9796-149a59098a34"
        },
        "item": {
          "id": "edf0937a-826b-472f-ab09-1640afa3ca21",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "821ddf17-03b3-4fc0-b686-67b63debfeed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c910b1-ec13-4674-b81a-e1fd771f72cf",
        "cursor": {
          "ref": "7e3c208d-e00f-463c-9556-01264cf7688d",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "eb3445cd-0603-4dee-939f-2236f58ed0ad"
        },
        "item": {
          "id": "40c910b1-ec13-4674-b81a-e1fd771f72cf",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "cb5a0dcd-9307-4ed4-884d-28798b830eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c910b1-ec13-4674-b81a-e1fd771f72cf",
        "cursor": {
          "ref": "7e3c208d-e00f-463c-9556-01264cf7688d",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "eb3445cd-0603-4dee-939f-2236f58ed0ad"
        },
        "item": {
          "id": "40c910b1-ec13-4674-b81a-e1fd771f72cf",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "cb5a0dcd-9307-4ed4-884d-28798b830eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b76b6af-756a-4b7a-910d-b17613d7a568",
        "cursor": {
          "ref": "bfe9e847-55ee-4893-b089-3c481063e80e",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0dcb0227-4a94-4018-8511-cb13f0e90945"
        },
        "item": {
          "id": "4b76b6af-756a-4b7a-910d-b17613d7a568",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "2e9a929f-131c-4964-ac23-044ba7acfff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b76b6af-756a-4b7a-910d-b17613d7a568",
        "cursor": {
          "ref": "bfe9e847-55ee-4893-b089-3c481063e80e",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0dcb0227-4a94-4018-8511-cb13f0e90945"
        },
        "item": {
          "id": "4b76b6af-756a-4b7a-910d-b17613d7a568",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "2e9a929f-131c-4964-ac23-044ba7acfff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd743da4-5cc8-43b4-b98d-f9419cff7394",
        "cursor": {
          "ref": "e65a4d90-1488-4ad8-b7da-408a0497e353",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "51d79afe-6e7f-4314-829a-72995fd45fb4"
        },
        "item": {
          "id": "fd743da4-5cc8-43b4-b98d-f9419cff7394",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "a7a83685-706f-434e-a0eb-177a42f217cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd743da4-5cc8-43b4-b98d-f9419cff7394",
        "cursor": {
          "ref": "e65a4d90-1488-4ad8-b7da-408a0497e353",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "51d79afe-6e7f-4314-829a-72995fd45fb4"
        },
        "item": {
          "id": "fd743da4-5cc8-43b4-b98d-f9419cff7394",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "a7a83685-706f-434e-a0eb-177a42f217cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ef4c2c-3385-45ac-9a05-6146d1b90088",
        "cursor": {
          "ref": "06e21bc9-e8c5-4d32-9d5d-8a3fac4d54d9",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "56591633-3463-4f14-83e2-b1025d2b5de2"
        },
        "item": {
          "id": "c6ef4c2c-3385-45ac-9a05-6146d1b90088",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e3d827ff-4d55-4af6-b389-39700239b5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ef4c2c-3385-45ac-9a05-6146d1b90088",
        "cursor": {
          "ref": "06e21bc9-e8c5-4d32-9d5d-8a3fac4d54d9",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "56591633-3463-4f14-83e2-b1025d2b5de2"
        },
        "item": {
          "id": "c6ef4c2c-3385-45ac-9a05-6146d1b90088",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e3d827ff-4d55-4af6-b389-39700239b5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a6c6de-19f9-4e85-8b2c-6f184ea7c443",
        "cursor": {
          "ref": "42f079ff-8cbf-4078-af9b-57496489a0d2",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5d2f7e1e-5c49-4048-9f01-bc5f12c17cff"
        },
        "item": {
          "id": "82a6c6de-19f9-4e85-8b2c-6f184ea7c443",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "329b22db-dcd0-436d-be11-9cc3cf52e5d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a6c6de-19f9-4e85-8b2c-6f184ea7c443",
        "cursor": {
          "ref": "42f079ff-8cbf-4078-af9b-57496489a0d2",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5d2f7e1e-5c49-4048-9f01-bc5f12c17cff"
        },
        "item": {
          "id": "82a6c6de-19f9-4e85-8b2c-6f184ea7c443",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "329b22db-dcd0-436d-be11-9cc3cf52e5d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4323b62f-0386-446c-9b31-af2c9f9c2348",
        "cursor": {
          "ref": "c2117b33-9418-4637-a98d-03bde2a9d2dc",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a73fabe9-2a57-45a2-b1bd-d63ccd3f927f"
        },
        "item": {
          "id": "4323b62f-0386-446c-9b31-af2c9f9c2348",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "2d94e3fd-7c09-41b1-b2dc-3779e9210889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4323b62f-0386-446c-9b31-af2c9f9c2348",
        "cursor": {
          "ref": "c2117b33-9418-4637-a98d-03bde2a9d2dc",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a73fabe9-2a57-45a2-b1bd-d63ccd3f927f"
        },
        "item": {
          "id": "4323b62f-0386-446c-9b31-af2c9f9c2348",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "2d94e3fd-7c09-41b1-b2dc-3779e9210889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b46393-54bd-43dc-beea-504bd44f2fe1",
        "cursor": {
          "ref": "6b5cc2ab-da11-4e14-8ac3-c35e4c80db42",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d8ba896c-d50e-408e-9f30-4448c882e8ab"
        },
        "item": {
          "id": "70b46393-54bd-43dc-beea-504bd44f2fe1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b6182285-c8f0-4825-8c8d-7f0170facc17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b46393-54bd-43dc-beea-504bd44f2fe1",
        "cursor": {
          "ref": "6b5cc2ab-da11-4e14-8ac3-c35e4c80db42",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d8ba896c-d50e-408e-9f30-4448c882e8ab"
        },
        "item": {
          "id": "70b46393-54bd-43dc-beea-504bd44f2fe1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b6182285-c8f0-4825-8c8d-7f0170facc17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8c17c3-1054-4038-ba1a-11eee134ce52",
        "cursor": {
          "ref": "ef3592e9-2178-4273-afa8-5c362c1c057e",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a20e0e14-ad20-4503-8e86-996714fc80ac"
        },
        "item": {
          "id": "bb8c17c3-1054-4038-ba1a-11eee134ce52",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "2657e18b-d903-4075-a865-b6b016b58dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8c17c3-1054-4038-ba1a-11eee134ce52",
        "cursor": {
          "ref": "ef3592e9-2178-4273-afa8-5c362c1c057e",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a20e0e14-ad20-4503-8e86-996714fc80ac"
        },
        "item": {
          "id": "bb8c17c3-1054-4038-ba1a-11eee134ce52",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "2657e18b-d903-4075-a865-b6b016b58dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef06855-81a8-49c7-bff1-9cabbcd67c87",
        "cursor": {
          "ref": "00836c1a-dfd4-4933-bbf8-46b4b6471973",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fa5c1300-5681-41bb-87d6-660054dfb425"
        },
        "item": {
          "id": "5ef06855-81a8-49c7-bff1-9cabbcd67c87",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "2a1a3c98-91ba-43d5-84e4-042f684a398d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef06855-81a8-49c7-bff1-9cabbcd67c87",
        "cursor": {
          "ref": "00836c1a-dfd4-4933-bbf8-46b4b6471973",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fa5c1300-5681-41bb-87d6-660054dfb425"
        },
        "item": {
          "id": "5ef06855-81a8-49c7-bff1-9cabbcd67c87",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "2a1a3c98-91ba-43d5-84e4-042f684a398d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec4d339-3cf8-463b-a7aa-098282eea537",
        "cursor": {
          "ref": "54b341e3-8277-4567-88c7-603ac13127d1",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8b7695ac-8f42-4ea4-9303-77ef305bb83c"
        },
        "item": {
          "id": "0ec4d339-3cf8-463b-a7aa-098282eea537",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "cf547418-2990-4730-b88e-e2c44860bc4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 673,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec4d339-3cf8-463b-a7aa-098282eea537",
        "cursor": {
          "ref": "54b341e3-8277-4567-88c7-603ac13127d1",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8b7695ac-8f42-4ea4-9303-77ef305bb83c"
        },
        "item": {
          "id": "0ec4d339-3cf8-463b-a7aa-098282eea537",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "cf547418-2990-4730-b88e-e2c44860bc4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 673,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8d6e59-ed5a-43af-ab23-44132b7bc599",
        "cursor": {
          "ref": "2dc228c5-678c-463c-b4c1-0c726af207a1",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "495c1a5f-513a-4c2a-93a7-426691c9084c"
        },
        "item": {
          "id": "df8d6e59-ed5a-43af-ab23-44132b7bc599",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ba858c23-03e7-40d6-be41-d5f84ad9dcde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8d6e59-ed5a-43af-ab23-44132b7bc599",
        "cursor": {
          "ref": "2dc228c5-678c-463c-b4c1-0c726af207a1",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "495c1a5f-513a-4c2a-93a7-426691c9084c"
        },
        "item": {
          "id": "df8d6e59-ed5a-43af-ab23-44132b7bc599",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ba858c23-03e7-40d6-be41-d5f84ad9dcde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e236c5dc-dc79-404b-8e3a-f39fc42e9004",
        "cursor": {
          "ref": "11590643-1148-42b1-9fb5-eabfd9f890d3",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "56b5428c-a2fa-4834-8f5c-09c414b7ccf7"
        },
        "item": {
          "id": "e236c5dc-dc79-404b-8e3a-f39fc42e9004",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "29908f4d-8eb3-4e54-99a0-84965fae4905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e236c5dc-dc79-404b-8e3a-f39fc42e9004",
        "cursor": {
          "ref": "11590643-1148-42b1-9fb5-eabfd9f890d3",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "56b5428c-a2fa-4834-8f5c-09c414b7ccf7"
        },
        "item": {
          "id": "e236c5dc-dc79-404b-8e3a-f39fc42e9004",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "29908f4d-8eb3-4e54-99a0-84965fae4905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36359fa4-9acf-48cb-bccf-ebf3886bc9d5",
        "cursor": {
          "ref": "df632bfd-2590-4e90-8e6d-24554c07a352",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ef1753b0-a4c6-4f42-823a-00d17459de10"
        },
        "item": {
          "id": "36359fa4-9acf-48cb-bccf-ebf3886bc9d5",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "d2e2fe0f-7239-47cf-8538-ea9fdb9ccc86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36359fa4-9acf-48cb-bccf-ebf3886bc9d5",
        "cursor": {
          "ref": "df632bfd-2590-4e90-8e6d-24554c07a352",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ef1753b0-a4c6-4f42-823a-00d17459de10"
        },
        "item": {
          "id": "36359fa4-9acf-48cb-bccf-ebf3886bc9d5",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "d2e2fe0f-7239-47cf-8538-ea9fdb9ccc86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308d9c44-3dc8-4fad-bf25-a5f35743d577",
        "cursor": {
          "ref": "3f4ef731-3fee-4ca3-8639-4b3ef2a7581d",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5ff6bb78-8735-4c6e-b27d-3b33d9cc6f90"
        },
        "item": {
          "id": "308d9c44-3dc8-4fad-bf25-a5f35743d577",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "70e1c804-e103-48a0-9ed1-bcd4616146cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308d9c44-3dc8-4fad-bf25-a5f35743d577",
        "cursor": {
          "ref": "3f4ef731-3fee-4ca3-8639-4b3ef2a7581d",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5ff6bb78-8735-4c6e-b27d-3b33d9cc6f90"
        },
        "item": {
          "id": "308d9c44-3dc8-4fad-bf25-a5f35743d577",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "70e1c804-e103-48a0-9ed1-bcd4616146cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35691a2c-9608-4fd5-b5fc-e6ecfd08fcc0",
        "cursor": {
          "ref": "1b13b43f-73d0-44b8-9b04-5c090bde72e8",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c1528536-340a-4573-b282-e216a75cce14"
        },
        "item": {
          "id": "35691a2c-9608-4fd5-b5fc-e6ecfd08fcc0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ef355cb6-7f31-4edd-ac21-415e5e15a909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35691a2c-9608-4fd5-b5fc-e6ecfd08fcc0",
        "cursor": {
          "ref": "1b13b43f-73d0-44b8-9b04-5c090bde72e8",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c1528536-340a-4573-b282-e216a75cce14"
        },
        "item": {
          "id": "35691a2c-9608-4fd5-b5fc-e6ecfd08fcc0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ef355cb6-7f31-4edd-ac21-415e5e15a909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb61e481-2795-41cc-a761-8e8ba8dbb919",
        "cursor": {
          "ref": "31e55fa0-36e0-4fc7-85ea-dbd5c47636d3",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8420f83a-148a-4dee-bc5b-61f36d5c4443"
        },
        "item": {
          "id": "fb61e481-2795-41cc-a761-8e8ba8dbb919",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "5bd4d8d2-93a2-436b-9820-03670fba96b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb61e481-2795-41cc-a761-8e8ba8dbb919",
        "cursor": {
          "ref": "31e55fa0-36e0-4fc7-85ea-dbd5c47636d3",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8420f83a-148a-4dee-bc5b-61f36d5c4443"
        },
        "item": {
          "id": "fb61e481-2795-41cc-a761-8e8ba8dbb919",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "5bd4d8d2-93a2-436b-9820-03670fba96b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f083615d-297f-4697-be15-9eac392bc780",
        "cursor": {
          "ref": "3417c1be-7fde-4ca8-9a23-21cefc80d5b1",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8fefc214-9300-4c64-a365-dfe12f44c5f2"
        },
        "item": {
          "id": "f083615d-297f-4697-be15-9eac392bc780",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bbf3114b-09e4-40ca-bb4e-68be9fe4399c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f083615d-297f-4697-be15-9eac392bc780",
        "cursor": {
          "ref": "3417c1be-7fde-4ca8-9a23-21cefc80d5b1",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8fefc214-9300-4c64-a365-dfe12f44c5f2"
        },
        "item": {
          "id": "f083615d-297f-4697-be15-9eac392bc780",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bbf3114b-09e4-40ca-bb4e-68be9fe4399c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c591ec0-06f7-4d0d-ba11-12ccc198faa8",
        "cursor": {
          "ref": "e39f8b59-bf64-48ae-97e6-d394b5400c5d",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "481da03f-320c-400a-935f-1c7a73bb8ce4"
        },
        "item": {
          "id": "8c591ec0-06f7-4d0d-ba11-12ccc198faa8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4316d654-22da-4b6f-9ded-104e275772da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c591ec0-06f7-4d0d-ba11-12ccc198faa8",
        "cursor": {
          "ref": "e39f8b59-bf64-48ae-97e6-d394b5400c5d",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "481da03f-320c-400a-935f-1c7a73bb8ce4"
        },
        "item": {
          "id": "8c591ec0-06f7-4d0d-ba11-12ccc198faa8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4316d654-22da-4b6f-9ded-104e275772da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ffcb976-d5af-4414-9b96-d342f6b30adb",
        "cursor": {
          "ref": "f1e8a7b9-b03e-4ef9-8aac-a9c61b805531",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9129ebb1-869e-4236-ad99-ff0ee3aead1a"
        },
        "item": {
          "id": "3ffcb976-d5af-4414-9b96-d342f6b30adb",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "57b97056-421c-4b34-8759-4d950df67bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ffcb976-d5af-4414-9b96-d342f6b30adb",
        "cursor": {
          "ref": "f1e8a7b9-b03e-4ef9-8aac-a9c61b805531",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9129ebb1-869e-4236-ad99-ff0ee3aead1a"
        },
        "item": {
          "id": "3ffcb976-d5af-4414-9b96-d342f6b30adb",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "57b97056-421c-4b34-8759-4d950df67bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744c12d6-a3bb-4a36-9992-7cb6c9ca80c8",
        "cursor": {
          "ref": "34de7087-b9af-4bdd-a9e5-fdbeffc78d81",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7c76083f-c203-4331-b05c-b312145bdf15"
        },
        "item": {
          "id": "744c12d6-a3bb-4a36-9992-7cb6c9ca80c8",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "5058cdde-49bd-47a7-83f1-8dc8341a8865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744c12d6-a3bb-4a36-9992-7cb6c9ca80c8",
        "cursor": {
          "ref": "34de7087-b9af-4bdd-a9e5-fdbeffc78d81",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7c76083f-c203-4331-b05c-b312145bdf15"
        },
        "item": {
          "id": "744c12d6-a3bb-4a36-9992-7cb6c9ca80c8",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "5058cdde-49bd-47a7-83f1-8dc8341a8865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0efe8cab-64e5-4e03-985a-8e13855176ed",
        "cursor": {
          "ref": "6985d850-5da8-4c0a-b635-6340adfe892b",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "341c8a6f-940f-46a1-96da-e528794cbdc6"
        },
        "item": {
          "id": "0efe8cab-64e5-4e03-985a-8e13855176ed",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "29ea4df1-4145-42c4-a968-e025aef4952e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0efe8cab-64e5-4e03-985a-8e13855176ed",
        "cursor": {
          "ref": "6985d850-5da8-4c0a-b635-6340adfe892b",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "341c8a6f-940f-46a1-96da-e528794cbdc6"
        },
        "item": {
          "id": "0efe8cab-64e5-4e03-985a-8e13855176ed",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "29ea4df1-4145-42c4-a968-e025aef4952e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea925d32-c151-4b0a-84f5-5c16cca7a3f2",
        "cursor": {
          "ref": "01ea118a-faa1-48a0-80ba-bb63f2d9aa59",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a25c1e46-8929-4925-b1d1-7a1afc91acd2"
        },
        "item": {
          "id": "ea925d32-c151-4b0a-84f5-5c16cca7a3f2",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "c766c21b-1af8-4af5-be10-94a36f899617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea925d32-c151-4b0a-84f5-5c16cca7a3f2",
        "cursor": {
          "ref": "01ea118a-faa1-48a0-80ba-bb63f2d9aa59",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a25c1e46-8929-4925-b1d1-7a1afc91acd2"
        },
        "item": {
          "id": "ea925d32-c151-4b0a-84f5-5c16cca7a3f2",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "c766c21b-1af8-4af5-be10-94a36f899617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051f915b-4e93-447f-8e4b-ce9dcf144524",
        "cursor": {
          "ref": "d88b4054-2dd2-469c-aa99-52f7ff758083",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "eda0c541-9825-4330-84c4-a1e74a69047a"
        },
        "item": {
          "id": "051f915b-4e93-447f-8e4b-ce9dcf144524",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "03e44c80-56cd-474d-a369-4b47fcd5e1a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051f915b-4e93-447f-8e4b-ce9dcf144524",
        "cursor": {
          "ref": "d88b4054-2dd2-469c-aa99-52f7ff758083",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "eda0c541-9825-4330-84c4-a1e74a69047a"
        },
        "item": {
          "id": "051f915b-4e93-447f-8e4b-ce9dcf144524",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "03e44c80-56cd-474d-a369-4b47fcd5e1a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3fe85b5-3a7a-48af-b95b-e80fbe5eb1fa",
        "cursor": {
          "ref": "99c59fcb-50b9-46fb-b1fb-508a25e4a48d",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3ddbcbf7-ace6-464c-88da-725a20534012"
        },
        "item": {
          "id": "a3fe85b5-3a7a-48af-b95b-e80fbe5eb1fa",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "b3bd9657-1895-48be-8637-9a6c4cf92337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3fe85b5-3a7a-48af-b95b-e80fbe5eb1fa",
        "cursor": {
          "ref": "99c59fcb-50b9-46fb-b1fb-508a25e4a48d",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3ddbcbf7-ace6-464c-88da-725a20534012"
        },
        "item": {
          "id": "a3fe85b5-3a7a-48af-b95b-e80fbe5eb1fa",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "b3bd9657-1895-48be-8637-9a6c4cf92337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19ba1ba-5375-4e89-b3f8-fbb5a9f2e1e7",
        "cursor": {
          "ref": "feff8e7a-e9fb-4f03-920c-b25dc141c7ba",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6a2694e4-b746-4e38-968e-51f4dc9f1e9a"
        },
        "item": {
          "id": "b19ba1ba-5375-4e89-b3f8-fbb5a9f2e1e7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8d3ded88-1bdc-48d3-a04f-284ddcf1f2bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19ba1ba-5375-4e89-b3f8-fbb5a9f2e1e7",
        "cursor": {
          "ref": "feff8e7a-e9fb-4f03-920c-b25dc141c7ba",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6a2694e4-b746-4e38-968e-51f4dc9f1e9a"
        },
        "item": {
          "id": "b19ba1ba-5375-4e89-b3f8-fbb5a9f2e1e7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8d3ded88-1bdc-48d3-a04f-284ddcf1f2bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5cfc73-4753-4f54-9082-3b5f5cd9dc87",
        "cursor": {
          "ref": "66602e96-adbb-44e1-9dd2-20ad706c41a2",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b36880f1-9e95-4923-8f7f-a4fdcea1c07a"
        },
        "item": {
          "id": "4d5cfc73-4753-4f54-9082-3b5f5cd9dc87",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "f599cf90-f2ff-46a0-9d88-ae51e4ad6c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5cfc73-4753-4f54-9082-3b5f5cd9dc87",
        "cursor": {
          "ref": "66602e96-adbb-44e1-9dd2-20ad706c41a2",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b36880f1-9e95-4923-8f7f-a4fdcea1c07a"
        },
        "item": {
          "id": "4d5cfc73-4753-4f54-9082-3b5f5cd9dc87",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "f599cf90-f2ff-46a0-9d88-ae51e4ad6c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf17032d-69dc-4fe7-8b42-0f5c310f16e8",
        "cursor": {
          "ref": "7e7641bd-da92-498b-8867-180476482479",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "20792dd1-0daf-497b-bd6c-9b73dec1d1e7"
        },
        "item": {
          "id": "bf17032d-69dc-4fe7-8b42-0f5c310f16e8",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "40a7a529-4812-425a-9a33-d895db444aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf17032d-69dc-4fe7-8b42-0f5c310f16e8",
        "cursor": {
          "ref": "7e7641bd-da92-498b-8867-180476482479",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "20792dd1-0daf-497b-bd6c-9b73dec1d1e7"
        },
        "item": {
          "id": "bf17032d-69dc-4fe7-8b42-0f5c310f16e8",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "40a7a529-4812-425a-9a33-d895db444aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698b57fc-f6d8-4b78-bed3-fecee207a4fb",
        "cursor": {
          "ref": "18148f50-0e36-45e0-97c5-21777847e941",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "83d94279-ffc6-4e96-8397-f5e6cd57125b"
        },
        "item": {
          "id": "698b57fc-f6d8-4b78-bed3-fecee207a4fb",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "93eb00cc-5032-4fba-85d4-560bce78ea27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698b57fc-f6d8-4b78-bed3-fecee207a4fb",
        "cursor": {
          "ref": "18148f50-0e36-45e0-97c5-21777847e941",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "83d94279-ffc6-4e96-8397-f5e6cd57125b"
        },
        "item": {
          "id": "698b57fc-f6d8-4b78-bed3-fecee207a4fb",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "93eb00cc-5032-4fba-85d4-560bce78ea27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df027ab-347e-45e7-a1b8-3aea362d3d13",
        "cursor": {
          "ref": "8a4d1ba1-21f0-4dd6-a778-4a72db3a236c",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bba235e5-8ebc-4803-a282-62b44e5561ee"
        },
        "item": {
          "id": "7df027ab-347e-45e7-a1b8-3aea362d3d13",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "ad6f54d5-68ca-4258-8573-2bed5ef7438e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df027ab-347e-45e7-a1b8-3aea362d3d13",
        "cursor": {
          "ref": "8a4d1ba1-21f0-4dd6-a778-4a72db3a236c",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bba235e5-8ebc-4803-a282-62b44e5561ee"
        },
        "item": {
          "id": "7df027ab-347e-45e7-a1b8-3aea362d3d13",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "ad6f54d5-68ca-4258-8573-2bed5ef7438e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51bf5e73-4ae1-47ab-8c76-1be1c874251a",
        "cursor": {
          "ref": "ff751646-6033-47c7-842d-db07a989e3cd",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "bb29383e-6596-4867-8f86-f0882d8ccc7d"
        },
        "item": {
          "id": "51bf5e73-4ae1-47ab-8c76-1be1c874251a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f5c7629d-0bdd-41b6-8606-33c75fce73d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51bf5e73-4ae1-47ab-8c76-1be1c874251a",
        "cursor": {
          "ref": "ff751646-6033-47c7-842d-db07a989e3cd",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "bb29383e-6596-4867-8f86-f0882d8ccc7d"
        },
        "item": {
          "id": "51bf5e73-4ae1-47ab-8c76-1be1c874251a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f5c7629d-0bdd-41b6-8606-33c75fce73d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9a3695-6852-46c4-ac1b-8a126bc9968a",
        "cursor": {
          "ref": "fc9973f2-007f-4f46-8d32-7187f758ee6b",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6ab46e72-09b8-4425-aff9-49920f59a382"
        },
        "item": {
          "id": "cb9a3695-6852-46c4-ac1b-8a126bc9968a",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "808f5428-f742-402b-95ea-13ef5b660915",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9a3695-6852-46c4-ac1b-8a126bc9968a",
        "cursor": {
          "ref": "fc9973f2-007f-4f46-8d32-7187f758ee6b",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6ab46e72-09b8-4425-aff9-49920f59a382"
        },
        "item": {
          "id": "cb9a3695-6852-46c4-ac1b-8a126bc9968a",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "808f5428-f742-402b-95ea-13ef5b660915",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d165f2-2a2a-4a22-b388-d8832679d7fb",
        "cursor": {
          "ref": "6e342148-da3d-4ae6-a8ce-541beb2a4e61",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c4f931bb-8d8e-484e-89a1-20cbcfaf9fae"
        },
        "item": {
          "id": "e1d165f2-2a2a-4a22-b388-d8832679d7fb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7643bf2e-92eb-4bb8-a930-e5a689f11a09",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d165f2-2a2a-4a22-b388-d8832679d7fb",
        "cursor": {
          "ref": "6e342148-da3d-4ae6-a8ce-541beb2a4e61",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c4f931bb-8d8e-484e-89a1-20cbcfaf9fae"
        },
        "item": {
          "id": "e1d165f2-2a2a-4a22-b388-d8832679d7fb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7643bf2e-92eb-4bb8-a930-e5a689f11a09",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "594b3354-2657-4889-877b-897d5dacedc8",
        "cursor": {
          "ref": "a85687c0-3595-4a5e-bd27-44fbc7cd296c",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0ba0483e-d82d-4124-a463-4e7d733aff61"
        },
        "item": {
          "id": "594b3354-2657-4889-877b-897d5dacedc8",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "f3ea69c6-a1e3-4fd8-854f-2ee2e287a409",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "594b3354-2657-4889-877b-897d5dacedc8",
        "cursor": {
          "ref": "a85687c0-3595-4a5e-bd27-44fbc7cd296c",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0ba0483e-d82d-4124-a463-4e7d733aff61"
        },
        "item": {
          "id": "594b3354-2657-4889-877b-897d5dacedc8",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "f3ea69c6-a1e3-4fd8-854f-2ee2e287a409",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce5d91e-74bc-4e11-bf21-ad835125bfcd",
        "cursor": {
          "ref": "d79a53ad-9ea4-454f-95f9-9a58c3619cdf",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a914e5b6-3c2e-427d-99a0-aaaace73de18"
        },
        "item": {
          "id": "4ce5d91e-74bc-4e11-bf21-ad835125bfcd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "60a9730a-c967-4396-8662-f64184737441",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce5d91e-74bc-4e11-bf21-ad835125bfcd",
        "cursor": {
          "ref": "d79a53ad-9ea4-454f-95f9-9a58c3619cdf",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a914e5b6-3c2e-427d-99a0-aaaace73de18"
        },
        "item": {
          "id": "4ce5d91e-74bc-4e11-bf21-ad835125bfcd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "60a9730a-c967-4396-8662-f64184737441",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "31454061-8d6b-410d-8615-e1eb2c95ec27",
        "cursor": {
          "ref": "5b6f38c1-5629-421b-9e06-b0b884e01ebe",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e39e2950-501c-435e-9e76-6e59fd1debfe"
        },
        "item": {
          "id": "31454061-8d6b-410d-8615-e1eb2c95ec27",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e07a4963-9fed-40c8-83f6-cd11208df5ad",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "31454061-8d6b-410d-8615-e1eb2c95ec27",
        "cursor": {
          "ref": "5b6f38c1-5629-421b-9e06-b0b884e01ebe",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e39e2950-501c-435e-9e76-6e59fd1debfe"
        },
        "item": {
          "id": "31454061-8d6b-410d-8615-e1eb2c95ec27",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e07a4963-9fed-40c8-83f6-cd11208df5ad",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "394644e8-029c-434c-ba1c-b81308be5ac6",
        "cursor": {
          "ref": "a7b1d861-8e74-4033-8563-44f74b7def99",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "0eab7fb6-f6b1-4b20-b40f-3f947b801e5d"
        },
        "item": {
          "id": "394644e8-029c-434c-ba1c-b81308be5ac6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9015b706-b5e7-43f1-8e16-b6de1d30ad4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "394644e8-029c-434c-ba1c-b81308be5ac6",
        "cursor": {
          "ref": "a7b1d861-8e74-4033-8563-44f74b7def99",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "0eab7fb6-f6b1-4b20-b40f-3f947b801e5d"
        },
        "item": {
          "id": "394644e8-029c-434c-ba1c-b81308be5ac6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9015b706-b5e7-43f1-8e16-b6de1d30ad4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c29319ed-71c7-4ae4-bbf0-715e0bbce3a4",
        "cursor": {
          "ref": "8d450f78-4674-44ee-b637-de5f5de50933",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0e9431e6-c04a-4716-9eed-6d77e1215680"
        },
        "item": {
          "id": "c29319ed-71c7-4ae4-bbf0-715e0bbce3a4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "33af27a4-161a-4d96-b8cc-173bd9755f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c29319ed-71c7-4ae4-bbf0-715e0bbce3a4",
        "cursor": {
          "ref": "8d450f78-4674-44ee-b637-de5f5de50933",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0e9431e6-c04a-4716-9eed-6d77e1215680"
        },
        "item": {
          "id": "c29319ed-71c7-4ae4-bbf0-715e0bbce3a4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "33af27a4-161a-4d96-b8cc-173bd9755f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4d342814-ba46-4e10-bde1-ef02368d6f10",
        "cursor": {
          "ref": "2774b7f8-d4ba-4bf5-93a2-8c4ef3b9c0bb",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7d6dc809-06f9-4ac0-b871-29831abe568a"
        },
        "item": {
          "id": "4d342814-ba46-4e10-bde1-ef02368d6f10",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "9166c68a-bd64-415c-9a53-76e0a2007f44",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d342814-ba46-4e10-bde1-ef02368d6f10",
        "cursor": {
          "ref": "2774b7f8-d4ba-4bf5-93a2-8c4ef3b9c0bb",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7d6dc809-06f9-4ac0-b871-29831abe568a"
        },
        "item": {
          "id": "4d342814-ba46-4e10-bde1-ef02368d6f10",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "9166c68a-bd64-415c-9a53-76e0a2007f44",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d253488-e473-4f71-9050-1028e1b08644",
        "cursor": {
          "ref": "6a98b519-7a1b-41b7-a5e8-f0b6ffd0e3cf",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "150b3679-8ede-43c4-a707-f91f2dc82cfc"
        },
        "item": {
          "id": "3d253488-e473-4f71-9050-1028e1b08644",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "dc35fa03-c309-484e-9e37-93f9c52c59f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d253488-e473-4f71-9050-1028e1b08644",
        "cursor": {
          "ref": "6a98b519-7a1b-41b7-a5e8-f0b6ffd0e3cf",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "150b3679-8ede-43c4-a707-f91f2dc82cfc"
        },
        "item": {
          "id": "3d253488-e473-4f71-9050-1028e1b08644",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "dc35fa03-c309-484e-9e37-93f9c52c59f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc5ada5-93e7-447a-9a5c-92de0182eea1",
        "cursor": {
          "ref": "89ac6e60-9c50-4a01-ac4e-136aeec9ddaf",
          "length": 63,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b31d999e-f74f-4f34-8f0b-917c61531559"
        },
        "item": {
          "id": "0cc5ada5-93e7-447a-9a5c-92de0182eea1",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "0f318a07-03fb-48fa-ba1f-67e739eaa0ce",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ebd6a3-b6d0-4fce-896e-a245961d316f",
        "cursor": {
          "ref": "1bc9e863-32da-4f47-b130-9c1e7143768a",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9912a3a2-b006-4b64-9c1a-171eb6335191"
        },
        "item": {
          "id": "47ebd6a3-b6d0-4fce-896e-a245961d316f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0b526be0-6856-471d-a1a7-228562618160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ebd6a3-b6d0-4fce-896e-a245961d316f",
        "cursor": {
          "ref": "1bc9e863-32da-4f47-b130-9c1e7143768a",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9912a3a2-b006-4b64-9c1a-171eb6335191"
        },
        "item": {
          "id": "47ebd6a3-b6d0-4fce-896e-a245961d316f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0b526be0-6856-471d-a1a7-228562618160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed244fe-1e13-48e6-b31b-87d918f31176",
        "cursor": {
          "ref": "bb2e8ba7-0115-4999-92f7-47f228d6ec4d",
          "length": 63,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "dc9b6fc6-9ae4-4092-80b6-f3fd7cc8ec01"
        },
        "item": {
          "id": "bed244fe-1e13-48e6-b31b-87d918f31176",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2e510a40-6d34-4284-b531-03dc75e1db46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed99b782-077a-4250-a6e4-1a945d7e4e79",
        "cursor": {
          "ref": "bad14abb-7e63-4972-b6dd-82ee12fe4c29",
          "length": 63,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ebff6509-8494-4b7d-8e3a-3181ff254a21"
        },
        "item": {
          "id": "ed99b782-077a-4250-a6e4-1a945d7e4e79",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d2e678f8-ebd8-4f92-bbe4-5cfd1b5a2483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac9205f-d4cb-4879-9bcf-8747a926dc56",
        "cursor": {
          "ref": "b15eb549-ba9e-4809-b2c0-72e261cd181d",
          "length": 63,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f901af94-580e-4a35-a022-efc63daeef86"
        },
        "item": {
          "id": "eac9205f-d4cb-4879-9bcf-8747a926dc56",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "901a97a7-eb75-4a78-825d-28341d9af2a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1523d6ef-fb04-451c-8fe1-659769aef3bd",
        "cursor": {
          "ref": "ae98bd96-a024-4b66-8e38-4023ee2602c7",
          "length": 63,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5aaceee6-1eba-4e03-a3c6-17ceeeba5b2b"
        },
        "item": {
          "id": "1523d6ef-fb04-451c-8fe1-659769aef3bd",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0b45d335-fec2-4588-baf9-395cf5ec6403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36fefb80-6a60-40c1-8735-9ba1d7dbde07",
        "cursor": {
          "ref": "dc9894ad-6943-4da3-ae6b-eac3a099baec",
          "length": 63,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7c2b936e-a865-43de-a390-495aa39a52aa"
        },
        "item": {
          "id": "36fefb80-6a60-40c1-8735-9ba1d7dbde07",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "02b24de0-7cb1-442e-b5e6-d8f6fedd5c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7788e671-2278-4b74-b088-b7e36b47ffbc",
        "cursor": {
          "ref": "a5d3a13c-9bc0-46dc-9c43-f1a91714d0d9",
          "length": 63,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "354f0509-ff7b-48bb-9ae9-a053f0e588e1"
        },
        "item": {
          "id": "7788e671-2278-4b74-b088-b7e36b47ffbc",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1a3211db-4c4c-4ec3-9f20-f11e96768454",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d934924-d2db-4048-958c-6d116504c261",
        "cursor": {
          "ref": "9e5d5bb2-f039-418a-93fe-f1391a255546",
          "length": 63,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "10a1d740-984a-427e-8466-552156d49272"
        },
        "item": {
          "id": "1d934924-d2db-4048-958c-6d116504c261",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "1fa0663b-dd6b-4f5e-8317-712d0d79fbb8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee171be-21ac-49dd-97ba-3274facbed21",
        "cursor": {
          "ref": "2ee9919f-b724-4d4c-a238-c68321cc80d0",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fc5d6bc6-83ff-4698-a421-f7a7dd5fca8e"
        },
        "item": {
          "id": "9ee171be-21ac-49dd-97ba-3274facbed21",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a59eb893-943d-4e33-afb6-d51d4cafc5ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee171be-21ac-49dd-97ba-3274facbed21",
        "cursor": {
          "ref": "2ee9919f-b724-4d4c-a238-c68321cc80d0",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fc5d6bc6-83ff-4698-a421-f7a7dd5fca8e"
        },
        "item": {
          "id": "9ee171be-21ac-49dd-97ba-3274facbed21",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a59eb893-943d-4e33-afb6-d51d4cafc5ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f4a8de-6657-4c9a-b690-3b119fb81f72",
        "cursor": {
          "ref": "8ca6d6a4-90cc-4838-bc88-2641a40ac308",
          "length": 63,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d7d0374d-c567-4b53-9a31-69c4bee9559c"
        },
        "item": {
          "id": "53f4a8de-6657-4c9a-b690-3b119fb81f72",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "00dfabdc-8b51-418c-9f48-b06cb4b6b135",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9905ca78-c50a-4f38-8e6a-8efe3a8112b0",
        "cursor": {
          "ref": "5b26f4ec-56cd-4a93-bfa3-9701c1060fc3",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a12fc8dc-cdee-4f28-bd3b-72b02f59d356"
        },
        "item": {
          "id": "9905ca78-c50a-4f38-8e6a-8efe3a8112b0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "437a13cb-585c-40d1-85cb-617b954e83f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "9905ca78-c50a-4f38-8e6a-8efe3a8112b0",
        "cursor": {
          "ref": "5b26f4ec-56cd-4a93-bfa3-9701c1060fc3",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a12fc8dc-cdee-4f28-bd3b-72b02f59d356"
        },
        "item": {
          "id": "9905ca78-c50a-4f38-8e6a-8efe3a8112b0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "437a13cb-585c-40d1-85cb-617b954e83f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "1d68222b-2513-4f98-9e1b-beff36cb1cb4",
        "cursor": {
          "ref": "099d0695-0c88-4fee-9fb8-bda4f2537f99",
          "length": 63,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "61a0f122-ad11-4610-82a6-c8ab5b6bf92b"
        },
        "item": {
          "id": "1d68222b-2513-4f98-9e1b-beff36cb1cb4",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "17455dbc-a55c-4ffc-8e63-64d04ae640cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "643c8e63-260d-4279-a883-dd7eaadf36b0",
        "cursor": {
          "ref": "fbb8c052-ae4f-4e9c-9a69-1987ab5ba20e",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1331cf31-3057-4d1c-8d16-7e389bae4683"
        },
        "item": {
          "id": "643c8e63-260d-4279-a883-dd7eaadf36b0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "15ef1379-3bc9-46e2-84e4-98b0cb50e66f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643c8e63-260d-4279-a883-dd7eaadf36b0",
        "cursor": {
          "ref": "fbb8c052-ae4f-4e9c-9a69-1987ab5ba20e",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1331cf31-3057-4d1c-8d16-7e389bae4683"
        },
        "item": {
          "id": "643c8e63-260d-4279-a883-dd7eaadf36b0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "15ef1379-3bc9-46e2-84e4-98b0cb50e66f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf000ca9-9741-4721-949a-6149b0e5f346",
        "cursor": {
          "ref": "e30fe4eb-2d4a-462c-b3b5-afea4bbcadac",
          "length": 63,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "53ac442d-c613-43c4-ae2a-b7735c5a8acf"
        },
        "item": {
          "id": "bf000ca9-9741-4721-949a-6149b0e5f346",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "04cb0ec8-26cc-4c11-a012-b9864b8f59f7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}