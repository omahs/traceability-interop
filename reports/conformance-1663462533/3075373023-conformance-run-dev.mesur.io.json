{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fdb3f81a-e4ea-490e-84d9-71c9430a6c63",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8f697fdb-e114-400c-9b81-2ff65909690a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ae95fa60-7cb7-4de9-9dca-d49ed1958c80",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1386b2fe-2aa2-4195-a478-d0836f383917",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "90354f90-8352-4e9f-9c97-94bf03a398e6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "c41b53a6-5482-4ff2-93ee-7796cd6ea184",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2001dee8-78c4-41ca-954f-5175cbcf7239",
            "name": "Negative Testing",
            "item": [
              {
                "id": "daad41c5-39b7-4d99-804e-5fff0e6388b6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fd8d67e4-73bf-4c62-a411-dcb880c74517",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2047102c-f9bd-4a4c-a18f-ac8aa62c6b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22aece43-ac01-49d8-80b7-a469f140cba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e481834e-9497-4005-af58-fc135839d451",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc00763-65cb-4787-bdc3-a43b66f60815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02415e90-ff82-452d-9eb3-9ca7108a7c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b85a33d-8cf8-4fd9-9a79-e980556b7ba6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f6fe4d-9c3d-445f-9a82-0639ff26fcf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2511509-4b1a-4f61-8141-73560f842e56"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4e07ff07-f24d-43a0-98f9-4ad7286f5de3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fffdeca1-7883-413b-a8e5-40091b51e63b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "012b24ce-5520-4bef-90bc-5827e59b148d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2c9951c-312d-48cb-a9e3-a031d7247396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273c58f2-3142-4c3b-b3df-f24895f3bc8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954d70dd-80c2-44e6-85f8-d4f254805fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c54f561-09ab-4431-b413-fdb456aaa616",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7f042f-6970-4577-a325-0d3ca590f3aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06bb6b76-6129-45c5-81d0-cb2adfb8fff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe21429-d4d7-4df9-ae9c-ff3dc4cb9306",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "fee78a1b-12fd-4401-8e0a-be351c316532"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bdc35a22-b30b-4458-99ef-572bfbe9a47a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d11cd17e-1d38-4e4f-8ae1-428291b1cc0d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c033946d-7769-4b72-be0f-518592b16a4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d536ce24-167a-4ca1-bf7b-9df8f6911eb4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4bd559d1-6fb1-48ef-9e52-a4e8075fa74e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "eaa4ebd7-f309-436c-bf65-b99260cfc715"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4df6dfd6-311e-42ec-8ab0-86c7f263a946",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e075f5e2-334c-4d28-b174-aea696fe0601"
            }
          }
        ]
      },
      {
        "id": "0d613e8a-6501-4045-aeed-def958634937",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b67cb326-da7d-458d-bd34-ae8cade84135",
            "name": "Negative Testing",
            "item": [
              {
                "id": "924ad2ce-13f4-4906-a328-048194bd4113",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1b158d2c-af0f-4d39-8403-7ecc5879c272",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9170b24-8bb6-4255-b148-3999c7782da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79780acb-274a-44e6-8a60-57539c97be52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f7fd7dc-1dd6-4d51-a576-6e2fd0d89aad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd6bd1dd-26c7-4e04-b140-9e5da1deb30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd39932-9fe5-4bbb-92cf-351192091405",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef1e97d-efb4-4ae3-83b3-917d8b62a13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d67512-cc96-4644-9dda-6d72b8de2713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9515e3-ffa5-4c74-b36a-72753ff04a68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83149ec2-cf0f-4446-8204-282df5ea7a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c746089-65a9-4398-8b5b-51b89ab50929",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7f691a-6251-48a1-823f-9a0243d8a82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d3d5868-bc41-41ba-8f62-e65255c5e543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8075b90c-a0bf-4380-bb68-aa95710c5501",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f6fa22a-c3ac-4f92-8306-0271ec1a4a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aecf6a4-cc5a-4652-a0f2-b63c925fbf20",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9496ac-4b9e-4188-b47d-2f148ab21be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d31c93a-1641-4592-8603-6e85b5adb4b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45df0725-cacb-4f85-bdaf-2dca871b686e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55da154d-379d-40e3-87fb-41396d15c97b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2910f19f-5b78-4edb-97ca-0c0d01f5ccf9",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d36757-aa75-420e-af99-6282d5e4636c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d776e8-698a-4282-b339-c97cce663b7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2968b9dd-8c72-400d-86ba-0db342a6ed23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39ca298e-74bd-4de1-91e8-f93b6b4c5e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62cf5d64-fe7e-4bf2-a5f9-7c8227b30010",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8427f46b-c825-45e2-b3f2-596a8efc88fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44f6366e-c68a-40e8-b582-660e46ba520f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33963b9-55d8-48f8-acb7-d56ee8fde487",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a90ec9d-4ac7-47f2-8d69-786dd5bc3662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe7be82-acdd-4209-8583-040b163ddca4",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cebbcbf-7a03-4f5b-b6e3-71820cef3f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ea9fa30-91bd-4a1e-af0f-915629244e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227247f8-44b8-4647-8c28-946356402b12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b10efcc3-44a9-4dd6-9ea2-2e994051843b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02508fd-c1f0-458b-97f8-4003a7c04b1d",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49539e40-8dd6-461e-bd26-10023c2a7df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9faede8f-576d-4bac-83e2-8610739ed52c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbcb76fe-b609-4d38-ab4f-d2fc47c01be8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24be4789-08ab-44a1-b02d-a50f812ac4f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4031513-246a-4623-93ef-6f0855e354f3",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba66932-1f64-4c93-9267-b78d4446a3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "654ca706-52f4-41ad-918c-7ab584ccec2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cbc8ccf-cc9e-4082-b533-f3df370b774f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9c365f1-6c78-4508-9e88-bf8ffb1b1e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ff31e0-0952-4ef5-bd53-24cbc375efc6",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a956b9-67ef-42d4-aec2-9441abfad853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a1c3487-a1e8-416e-84a3-5f620eec2c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468f65a1-9a99-44d6-a10f-2849e497d471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88affe76-12e5-462f-baeb-5206441fce36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1811b2-07ba-4b93-bfab-0e23a57682aa",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1367a22b-ff7a-4d0c-936f-2fe2bcf2662d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b43d4c7f-5b4d-44cf-bd1a-903731c1d4e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64354b04-a66f-4ec2-84d0-b4a75b674830",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "001d6147-54b7-43ee-b08a-c8f3e1f78fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7071b9e-0753-4433-8c5a-49daff548bf6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f08c7887-4fd5-42b8-a5a1-faa1aea472b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f95b201e-220c-41b1-a35a-f2fde5e1e550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49277dc-17a9-43af-8e80-c9c703c79f28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "9496e0c1-2b06-4da6-b59e-e2f82d2d21de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532032bf-4913-4a75-ab15-2f13fdcc9344",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7b8c69-f5ca-49d1-ad1e-7bc369fbe266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0aebf5e-0d30-45d6-ad68-74dcef0fe73d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6362340a-8810-4d53-b35d-8a03be559b21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19155225-d90a-497c-9098-5f615c50dbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe8a7dd-a523-45ae-9bdb-d4cee07b2f7c",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7fc879-c9f1-4aa3-a894-8b2187b16c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4afeacd-f5e0-43a5-a7af-b17b3b29ea13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307e871d-13c0-4bbf-b53b-b44185f3bb80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44de61ef-02e8-4198-ba69-3708127dbc4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0220c5-123a-4731-9463-5085e938bca4",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "321506e4-d833-474f-b242-5adb4c0e519c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c59dd21-024d-42ee-90f7-10e436872b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c84cbf9c-a9a5-4d9a-9151-da31c8baf70c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "5342ad11-4b32-4206-8f2d-0e1fd870c7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16bfb02-1d12-4b16-8cd8-807b5b38d9c1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b39c94a-9739-498f-bf52-e8b00d210f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3c72258-5d18-4abb-87e3-100093636744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2f20c4-dfb5-47cf-90d8-36c144eb494d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "4c9fd262-2f74-40ff-b8f4-18576b8bdc48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ee3546-a4b7-4554-be97-92030ff57428",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de25efb-6d9b-4885-8aca-6ba6dad2df87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c749eb79-559c-4625-ab6d-8227d72702ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2960d2a-4da0-42d6-bc0a-e28dbfd8ca93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d7bd7ec-8d45-4bc5-93d9-1eacb85d470f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea88448-7c55-43a7-a7d0-d1483643c8bd",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dcae713-7b4a-4285-976b-84898f03c05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40604ab0-c9c7-47f8-baa6-0295394e351c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a50e29b-8636-4185-bd7f-cadb02ab0a03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d64481a0-c7ef-4f1e-82aa-ec820ccd8048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21eb681-1ea4-439c-a6d2-af12dc6a7929",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "400ec018-5168-4833-89f9-b9ec52a02701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8d33144-7a80-41b8-b39f-99ccb9e3c37c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82c875f-8ac9-41f4-ab32-dd7ef1b88bba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3085e682-f6a4-44a0-a070-6da969a12120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b744ff-c059-4f81-93be-562661d45ff5",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1872dc2-3c2b-4cf1-b228-c7052c2af953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f50da6e7-c1d3-4a3a-a75c-1aba5a65c784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a9ea296-37ff-4e8d-9be9-35abcaad088b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "101047ef-ede2-46be-8458-1f9334a26a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b81274-e2b8-40c3-8385-c28584053166",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8555c6-798a-464d-995d-cfe9214a9ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77917636-177e-4084-997d-53179c6b6dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34301550-fdd0-46fd-9b6e-4abfbd16748f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5636d81c-9c96-474d-a3fd-5122580657a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3646eb49-0811-47f4-bc3f-7e6b79e51748",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4fbd7db-78de-401e-85d7-71c0d5eabee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62923a60-8383-416a-911a-164719e4135f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693cf4c2-05aa-41ad-b0fb-a739590055c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e599038-e222-4b65-a20c-4288a6259965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5516b3f1-7ea9-49e1-8388-534472805bb8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef143007-b3c0-4d0a-838c-19787691e8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a3e2e34-9eaa-4390-a87e-22bfc6450510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c394c8fe-e95b-4d78-aba8-a3de190ef6a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b39c0337-988f-4eba-8ac6-bb07612b6e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75b9a26-abaa-4536-9ff2-dc956031f58a",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "141a07f5-255a-4a9d-8016-b540bcf87080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d720f6c2-eea7-49fd-9b51-9a935044318e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ce5323-7378-409d-98ea-c3127e437162",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbe1af60-3b43-4c12-a63a-48dd58a00d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6406c05f-7b13-4574-89fe-6c36e0424a71",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c06f4a-34d5-42e6-bc1f-77364e479da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd0382c-49a2-440f-93b2-01db65f3cd5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca85bf45-394e-4f5c-8ab0-022ce4bc33fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f0a2988-e093-4a05-8f47-1cc1b246216a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b482a028-4206-4433-ad4a-d714566b1981",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55bc524a-02cb-4421-ad04-307c29b515a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5fac001-3772-449e-9ae1-689ce62fffd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3918caba-8b1d-4a01-a4db-699dfb522d6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f882419-1d41-49c1-ad95-7b60b884b2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e35021-ef1b-4aa5-a90e-fd6d99dbccc5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e90621-7daa-410c-a209-bd9ddf22b4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36fa5de9-509a-4acd-8442-0fa467ef8686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26a6847-dc2b-4d09-bf0c-ec5ba1d58dcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71221b0a-4bcc-49c6-8d94-8ac86ea36af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9b3755-0b10-4d6c-b402-e73498341d56",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3cfe36d-b545-4f8e-885a-0a9824c0e0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10e8c14b-f8b7-42f4-9c9f-d849a81000cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36788726-c511-4d3b-a8a2-af51a82f4f8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "539e4542-e3d5-4d2b-baec-55b4bb1e0ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a66b47a-02e8-4c06-990e-1862ca106a5c",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ceb5e9-5f6e-4c8d-b914-7478eb31216d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa7b4c0-2637-426f-b628-921bc494d936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84beac4d-f067-43ba-9dcc-0cfb2d664bc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef01acac-3e9c-47b4-b07b-8ab6d3f7a508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a021ee-989b-42b0-86de-ab8f8806faa4",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af56ae9-9020-43e8-afe6-396ac6c1c8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "febadcf6-2881-46e5-b394-3dd0584c9998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7cd87d7-e1a4-43c8-9297-6b68be4411fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bff37668-1dc0-4c1b-9bef-bfd75d81f11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d061f8b-8004-4d38-98b1-658eee2bbd91",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf7fea5-aeff-4130-b572-0104d6592db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "523411b7-74d2-4a62-af59-52be15c03d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc29aeb5-ffad-463d-8e49-e39c93376d9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad36362e-c6d9-4464-966c-d9786459ee17"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bac577b7-58c3-4e78-9577-e527e67cf5c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2fae2516-0f1b-4d46-acef-7c5e0173c549",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be036705-4375-43cf-b8d6-30ac8ed9c0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d35a623-5843-48d4-9f63-629700f04227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c909810-24e6-4201-ab5d-e83cb6fdbdc9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "0a862de9-5b3b-491d-ad2d-b8c06d4e144b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8733d723-3b05-4e75-b38b-50aa5332935d",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d987179-d5e2-45c9-ba64-39547ae5907f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3487701-d69f-40d2-9f81-6730be74549e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f08056-2920-4777-98a1-a60ec120f868",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6b282a29-685c-4e8f-afe5-4b5347649823"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d971cce-76f1-4450-a47a-748349c7d4d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "529f349c-9df2-40d5-92f0-2aee13558f01"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4dab2edf-af3f-4b28-86ad-598ef0a8a803",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce7d9b86-9b9e-4f82-9b3e-7114dfb7149b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b787a9af-aeed-473a-91c4-ac776c0a06c7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "81cc0fa9-fb27-49f5-bf32-b8356c1ab8aa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7563d192-d0de-408f-8972-e859700286c0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "31ff08ac-d0d9-40e6-9779-2283c50af34a"
                }
              }
            ]
          },
          {
            "id": "494b0338-b579-405b-9b37-56640b374053",
            "name": "Positive Testing",
            "item": [
              {
                "id": "577f34e7-bf94-4602-83cf-17e6cebadb4e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8aa2f876-d769-4ab3-b556-648ec9d8c548",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd429f67-1766-4e12-8fc2-5baf16809fe0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53ba5111-1bb3-4f32-81c4-e874a4813e0f",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "161667e3-cbe0-442f-a292-d9c76c6fadb1"
                    }
                  }
                ]
              },
              {
                "id": "0f9ec61e-a3f0-4225-bbc9-dfe644a62840",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "adcb7dec-4e14-45ac-aef9-d6a1e577259b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f1b8deb-aa01-42e8-9de8-bf1f7b9ab758"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e87d6f57-2c54-4cb8-823f-d36dc98e6718",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "8d8f90c2-c670-49e8-9248-1320288afc5b"
                    }
                  }
                ]
              },
              {
                "id": "32b626ce-fe4c-4740-a3fb-13118eb2dedf",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99edb568-f48b-4712-ae38-df3eacabc888",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "958ca368-8ec1-4df5-94c4-163233177fc5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8185b6d-bd84-4261-9e4a-27d9f6de4069",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "1369c7dc-da04-45af-acbd-36322b54ce26"
                    }
                  }
                ]
              },
              {
                "id": "6a976e59-4a8f-436f-b3a2-e62633514df4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ddbeb7d-4083-4282-a4c3-4414dab451bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb0e402b-a264-44c8-a664-5b95817c52eb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0fd0a8b-2e7a-4e98-93ec-1e17d20d7584",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "48a6d036-f8a6-4296-bdc6-1deec94fe294"
                    }
                  }
                ]
              },
              {
                "id": "74374621-d799-4f97-b954-774667778b47",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9815ef44-9b2d-4f54-b4eb-0f0473f2243a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "af19e14c-d584-47b2-b41c-29e1448548be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce82a38d-b6fd-47f0-a268-93295bda01c7",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2e812962-f049-497a-ab90-6cc5feb76f27"
                    }
                  }
                ]
              },
              {
                "id": "8445defd-81cc-4a9c-95f7-14440cdd3335",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e31b3bac-fbb5-45dc-afaa-7754dbe98a68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e03df57b-1103-4646-a8a5-3ad3b77b8f2b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4aa78a01-50fc-43af-82b0-a7e6836a426c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "57b32518-a469-46dc-b607-33d8d23a7520"
                    }
                  }
                ]
              },
              {
                "id": "8c982c30-1fdf-46a9-9693-8d2052fe85b6",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "388454aa-fecf-49cc-8390-ace67f5363bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ae44dea-3380-40f5-acf3-739a183b39f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5fc0b34f-f749-4466-a68c-8b5660b06983",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "3f47eb65-fcba-471f-8ed3-86f075cb221a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "10c2d754-46b7-49c6-ab8c-3ead3ea97457",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dce11f1a-211f-4d57-8324-f50ecac7b502"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5d3186ce-6632-42de-83ee-6727b33332f2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bbd57524-6195-409f-9d29-8508cfdfcde4"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef2866c6-fe85-43a0-a3bc-5651d26902d5",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "a39232b8-3b74-46da-bec9-6fc19514ddb9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f960cc51-4b20-4b62-b51e-02290b12a051",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5299fbd5-1a92-4e9a-a0db-72e8d8608bb2"
            }
          }
        ]
      },
      {
        "id": "420b8437-eb25-4644-93c1-321eec2aff9e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "99d70e08-a193-4bbe-a644-b18845d6f63e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "426c8e75-4fef-44e2-a6d3-5506a93c02f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "86e52994-1681-46ad-88bb-babe76994907",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1400060d-74db-4ac7-88fc-0901832c9fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39513ca2-ca37-4206-8ffa-4768585e4b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c287df-dc03-4521-bf26-fc43203f33d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "127bb956-69ec-4299-9772-8f7e959c0787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f94921e-7807-404c-b727-423cf51494a7",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151cea4b-8f37-4024-a027-c876712363a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "39ac6704-9f71-49af-a29a-9ac47b02bf24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9d8562-115d-45d5-a184-4b007bdd3f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7648c9eb-0782-416e-9578-175e32fe5de8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b692171f-f9d8-48ee-9f8f-a9ece53a2c04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b74b805b-4676-40ba-8ef3-413a03cf49d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "182e0980-48b7-4244-a3f3-34ce58ff3cde",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72c1dba5-0ef5-406c-9786-624228fa46a9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01bf1071-074e-4f25-9f7c-21e7ef191e75",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "ccf3699c-a9c6-4cf4-995d-ecbd415142de"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c17abbe6-5c80-4b73-ad1c-80909ccb8b13",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b00d613-3440-4dbd-a20c-b010a9771e78"
            }
          }
        ]
      },
      {
        "id": "369a9bbb-0df9-4db3-ac0b-492011ec665d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "87b765d3-0074-4136-9570-d7b0739753a2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1c74fb9b-d629-4d6b-8945-199550ebe620",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "adc8fdc4-5f26-4335-88a8-afeb74f27932",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f38a865-723d-4bbc-b2a4-c810eafcdbfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cff06841-e911-4be6-9a35-f6d7422f1d44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522683ca-cc41-4951-9314-c49d91dfe439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10316dd1-1669-4621-89e9-fd4aaa6c796c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e6a11b-f087-428b-8a44-7eec6d29472d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f242c08-85f4-4cf4-95d5-e5737dcc4cd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7762579e-bba7-49b3-af8a-fa9f8ef68f6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94438c93-8ace-4291-8683-4c0add9005e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0276cd71-9581-46f2-9fc5-b348525651d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f52c37a-ce7f-4ef3-b2af-ff41613a57f1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2e5beb-d2f3-47b2-a9ea-02e9a72a73a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3a492a6-9fc4-4ed8-832d-29c2cfbafb7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13cb2c66-d85f-4826-b6b2-b99719239286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4dd181a4-bec9-4eb5-8f90-22ac00d77137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c37f3e-3874-4699-93ef-5ca3f1275d2d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6083fad5-fdca-4698-9d14-855438f1bcd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0383bc47-6e43-4ba5-ab47-7d9196843b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a35d05-6f4b-43c1-b1db-0d3899f1fd0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f17eeec7-60e5-412b-943c-00b3f16f0d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b52ece-96e4-439a-a788-b8e61e33b4c7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4f84d0-e575-4d57-b949-6145571dcdc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceff744e-81cf-4c09-83ea-3a80a4aa11bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c3c8e9-4aa0-4cb8-9b30-5deb5e3c59d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbcc24ee-24ea-42e6-87f8-e0b4bd12790b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7a3b2f-9f8f-48ba-80c2-9da5bd2d31e0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2bf1af-12b2-4673-a010-c8a3d0857b68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "527403d7-94c1-49db-9709-eeef57749677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e9ff75-f421-4d19-b37e-96daf4566276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e875f17-3243-4d67-ba58-fc03a7611ce3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b83a6080-02cf-4fe9-8830-0b491b806d55",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5e2a8a97-c885-47de-b418-b23c5ef15c70",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49627bda-feb7-4e9e-89b0-25be4e8546cf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "2a40d47c-1bfa-41a8-bd9d-46febae44ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2b069e-daad-4908-8a13-238b88940156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e193e760-4ec6-4d18-851e-cc5b88aac347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42d282d-9fbb-4300-bdd5-97b69472d30b",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a39e846-3700-46a2-879d-dcfa7f104eb6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "787e7f71-2f3f-49e8-b0c6-541b1eec5ee2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4a846d-cb34-4406-84a4-30c69fa55a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c442a311-d43c-4fed-96f1-eb0c6199fa10"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38072dd8-4c60-4119-bdd6-4a435d18bbe9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7e9efb7-ce60-4d1f-9ae3-79e0c1b87610"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb240355-3559-45ca-b1e8-a00461e55181",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec834f8e-9bdb-4438-9bb6-6650d77bc06c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "135e7f98-1f19-4e30-87b4-9089b0afda55",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "ed3f673e-662f-469c-bb0a-d3525f18f04e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6e864144-6f0c-4225-a51a-42af3a5b7b29",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0155fea2-b3aa-44b2-b627-e48f3ea37ee8"
            }
          }
        ]
      },
      {
        "id": "3d6d17c6-36d8-4ab3-ae29-748b65a64230",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2a5cf3c5-e957-47b9-8e50-8eba287e3932",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ad74a99a-1089-4763-aa25-29a0f8769ec3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1d2e7f4f-1070-486c-bf32-065ccd5b8501",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e700a19e-0636-4e77-887c-e8afc579df3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "049e6f8b-74f0-4c4e-9943-5bab4d31fd47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec82cb9-0529-4c85-bcd4-fdc408d3db13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3bebef3-a7f0-4829-b0a5-202875659169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a88fb9-7391-419c-8aae-023cb23c9fd9",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d0ea95-69ad-469d-b877-ecb4e61f149d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c88f5bd8-c225-401e-8add-06170100a216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b794144-4366-4b0b-8dce-0a0568107245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75e54947-33f4-4581-bb0f-5945a35cffb6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ffad56e8-c683-402e-b997-8fd8263afcb1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4c860eb-cd0c-4471-8297-1d647219f474"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91dfaf21-c34c-4521-8504-781a9e59c216",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b45eeab-2a5c-46f5-a39b-dbf697ae5bde"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e7095b0-f1b3-4c01-b08b-ffef4d057313",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "35e5e61c-f274-45d4-ad69-d57119c92f25"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dd4489b6-7226-479e-85f6-2682047844a7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f53ba66-ae79-4329-9df7-f42a46665e7c"
            }
          }
        ]
      },
      {
        "id": "f57b8e72-d24a-4135-9f36-65509835e012",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4c8f9630-a0cf-4f86-87a7-7c57e4f3eaab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67c3bec3-9aa4-4c43-b6a7-cec6f6667744",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "24fc3302-f81e-4639-96b1-190764717237",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b90ae19-d04e-4d4b-ae4a-6ed3a806969c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60863d1-76d5-4364-998c-9a4725722209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "599a5d36-01c3-44ba-ad83-15253bcad984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af68b89c-cab6-4498-b69d-bffac4a763d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326c2dfd-42cf-492d-b36c-45804d8c3634",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa168717-218c-49f3-9221-20f1f62db3e4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "bee0f33b-a5db-4684-a27f-bed729179585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b6c4f0-fda5-4c30-bb5a-9bc1092072c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d819102-27bc-4bb4-90cf-43d83b7e06af"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "127b15c8-9ab3-43a7-8435-92b39e8e2177",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e09a134-0236-4d87-9cf6-d26da7aa46f6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce63cabe-2461-49a5-a899-a2e0bac50d18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ad76c41-abe3-41a4-a506-0b3cd08543cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce506f77-834d-4a0f-ba05-f057f938a32d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "244c0454-6231-493f-a018-584da07d5276"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8ccc812-8b41-4fc3-8c01-29f626b240bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f49952a6-496d-44cb-8cc3-0843ce96f587"
            }
          }
        ]
      },
      {
        "id": "87dea5eb-ec48-41ab-a8ee-66826647aa4b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "446901f1-a91c-429c-96e5-7b2136a4b108",
            "name": "Negative Testing",
            "item": [
              {
                "id": "512682bf-569e-43fd-9ce0-0a29796ccb5a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6044e5d7-0631-4d9e-8ce1-8185486eb3cd",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4732270-137c-4ed5-a4a9-c60b65137437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aafcd370-f6e0-4b31-87f7-cdb8736ff0fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9724c327-94f0-42e3-8dc5-459cbbabfe85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3a3aa70-bc8a-462b-ba98-4b491d8c8d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78125629-dc70-4fdb-8f9c-71323c9777fd",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b489802a-f460-4f49-a259-ab091b1d84ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "81feb7b6-e216-454c-8450-b7d1def51508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb40bc58-24d5-402c-b2f9-583cd805c9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c72c99c-3c4d-4fb5-8110-400e00cf689b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c7cd870-5d58-4df1-ade2-70fd4f187ed1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34897c2e-e45b-40ec-b238-f384890570d7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c10a83e-5f9b-4871-a025-25fc46cad612",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2ccf7d2-c374-485d-b2aa-1c69c039392c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "92e0c051-d38b-4f6e-99ab-44fc90db642e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "76cc390e-6deb-4bf9-b36e-00f0a826338b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5aefd8fb-8ce0-49ed-a8a1-379fa70c1ab7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f05511d-5398-42ce-ad69-cb620cb4133c"
            }
          }
        ]
      },
      {
        "id": "8e9fee77-c5b6-4422-b4b5-6554ad404aa3",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "94d8f472-39eb-42bd-8fce-91b57a067ad6",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 475,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 111,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 131,
        "pending": 0,
        "failed": 9
      },
      "testScripts": {
        "total": 240,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 235,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 42.144144144144136,
      "responseMin": 6,
      "responseMax": 427,
      "responseSd": 80.61049121880954,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1663462422125,
      "completed": 1663462429914
    },
    "executions": [
      {
        "id": "ae95fa60-7cb7-4de9-9dca-d49ed1958c80",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 63,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9cc97287-f8f0-40cb-819a-b89593abf837",
          "httpRequestId": "47b74279-0aa0-4821-9b73-a5fbf9224a86"
        },
        "item": {
          "id": "ae95fa60-7cb7-4de9-9dca-d49ed1958c80",
          "name": "did_json"
        },
        "response": {
          "id": "a9d7ea9e-267b-4055-aced-fb68dcf50b3b",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 1289
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "fd8d67e4-73bf-4c62-a411-dcb880c74517",
        "cursor": {
          "ref": "2254377d-1781-4131-92cd-e848fd82efd3",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ce5657e1-ef1f-4ebd-99a1-fd54eac99328"
        },
        "item": {
          "id": "fd8d67e4-73bf-4c62-a411-dcb880c74517",
          "name": "did:invalid"
        },
        "response": {
          "id": "c711ed37-555a-4fe8-b08a-3c7c4012129c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8d67e4-73bf-4c62-a411-dcb880c74517",
        "cursor": {
          "ref": "2254377d-1781-4131-92cd-e848fd82efd3",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ce5657e1-ef1f-4ebd-99a1-fd54eac99328"
        },
        "item": {
          "id": "fd8d67e4-73bf-4c62-a411-dcb880c74517",
          "name": "did:invalid"
        },
        "response": {
          "id": "c711ed37-555a-4fe8-b08a-3c7c4012129c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e481834e-9497-4005-af58-fc135839d451",
        "cursor": {
          "ref": "2f7d3042-95f2-46fd-aa78-975d9970ca4e",
          "length": 63,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "da8a7393-e027-4659-8f63-68605f2c9c99"
        },
        "item": {
          "id": "e481834e-9497-4005-af58-fc135839d451",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0e3abf20-8493-4e5d-966d-f70cfba3d091",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b85a33d-8cf8-4fd9-9a79-e980556b7ba6",
        "cursor": {
          "ref": "a58b20ad-8e43-4dbc-9812-58daf1d5d10d",
          "length": 63,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fc29ebcc-0539-4758-ab36-5c90744cd5e1"
        },
        "item": {
          "id": "9b85a33d-8cf8-4fd9-9a79-e980556b7ba6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e47b6cca-e288-42f6-9b6d-7c1efe4724ef",
          "status": "Not Found",
          "code": 404,
          "responseTime": 7,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fffdeca1-7883-413b-a8e5-40091b51e63b",
        "cursor": {
          "ref": "f7a36459-6b60-4f10-a096-dee17a0692c3",
          "length": 63,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f0dc4f79-2c46-440c-b233-6c96db3451cf"
        },
        "item": {
          "id": "fffdeca1-7883-413b-a8e5-40091b51e63b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "866e7bfc-182f-48a7-9696-14e84a1fcec9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c54f561-09ab-4431-b413-fdb456aaa616",
        "cursor": {
          "ref": "776ffac7-141e-410f-8a9f-eb189a0d6831",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "02d1d73d-7175-4947-a07d-066dda4e7887"
        },
        "item": {
          "id": "2c54f561-09ab-4431-b413-fdb456aaa616",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "0426ad82-2f2c-4cfc-95b7-71a196d45f53",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c54f561-09ab-4431-b413-fdb456aaa616",
        "cursor": {
          "ref": "776ffac7-141e-410f-8a9f-eb189a0d6831",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "02d1d73d-7175-4947-a07d-066dda4e7887"
        },
        "item": {
          "id": "2c54f561-09ab-4431-b413-fdb456aaa616",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "0426ad82-2f2c-4cfc-95b7-71a196d45f53",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11cd17e-1d38-4e4f-8ae1-428291b1cc0d",
        "cursor": {
          "ref": "ed942533-4925-45c2-9495-244844571064",
          "length": 63,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3a09ea26-3234-49d2-87de-94b16376067e"
        },
        "item": {
          "id": "d11cd17e-1d38-4e4f-8ae1-428291b1cc0d",
          "name": "identifiers"
        },
        "response": {
          "id": "8e79fcc1-bde7-463e-92d0-692424742041",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 1318
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b158d2c-af0f-4d39-8403-7ecc5879c272",
        "cursor": {
          "ref": "a3fdd47d-2889-470e-8c31-d13d120fe462",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e08a11ef-1dca-4505-abcf-05de2ed6941f"
        },
        "item": {
          "id": "1b158d2c-af0f-4d39-8403-7ecc5879c272",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "24c3229d-cd20-4117-9dbc-6ce84b699489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b158d2c-af0f-4d39-8403-7ecc5879c272",
        "cursor": {
          "ref": "a3fdd47d-2889-470e-8c31-d13d120fe462",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e08a11ef-1dca-4505-abcf-05de2ed6941f"
        },
        "item": {
          "id": "1b158d2c-af0f-4d39-8403-7ecc5879c272",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "24c3229d-cd20-4117-9dbc-6ce84b699489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b158d2c-af0f-4d39-8403-7ecc5879c272",
        "cursor": {
          "ref": "a3fdd47d-2889-470e-8c31-d13d120fe462",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e08a11ef-1dca-4505-abcf-05de2ed6941f"
        },
        "item": {
          "id": "1b158d2c-af0f-4d39-8403-7ecc5879c272",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "24c3229d-cd20-4117-9dbc-6ce84b699489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd39932-9fe5-4bbb-92cf-351192091405",
        "cursor": {
          "ref": "437be03a-d510-41cd-88c9-db01277e4088",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d81ff919-ccb8-4956-88b6-8aeead8238f3"
        },
        "item": {
          "id": "4cd39932-9fe5-4bbb-92cf-351192091405",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fcf9edba-9254-4d78-a828-d81d7129dd17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd39932-9fe5-4bbb-92cf-351192091405",
        "cursor": {
          "ref": "437be03a-d510-41cd-88c9-db01277e4088",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d81ff919-ccb8-4956-88b6-8aeead8238f3"
        },
        "item": {
          "id": "4cd39932-9fe5-4bbb-92cf-351192091405",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fcf9edba-9254-4d78-a828-d81d7129dd17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c746089-65a9-4398-8b5b-51b89ab50929",
        "cursor": {
          "ref": "24be6456-d5b2-47c2-a730-f9e0615a5693",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0627f968-777c-450c-bbe8-3b460cae948c"
        },
        "item": {
          "id": "5c746089-65a9-4398-8b5b-51b89ab50929",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "90132dd2-6910-476f-a0d2-e6b413f9d42b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c746089-65a9-4398-8b5b-51b89ab50929",
        "cursor": {
          "ref": "24be6456-d5b2-47c2-a730-f9e0615a5693",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0627f968-777c-450c-bbe8-3b460cae948c"
        },
        "item": {
          "id": "5c746089-65a9-4398-8b5b-51b89ab50929",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "90132dd2-6910-476f-a0d2-e6b413f9d42b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aecf6a4-cc5a-4652-a0f2-b63c925fbf20",
        "cursor": {
          "ref": "99a9d666-b1ec-4811-9697-d46c61a6c055",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "54436e4a-7b4c-4b8b-83f5-af8c4b14ca6b"
        },
        "item": {
          "id": "4aecf6a4-cc5a-4652-a0f2-b63c925fbf20",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "9565677b-b096-4873-a936-22d6bccf2d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aecf6a4-cc5a-4652-a0f2-b63c925fbf20",
        "cursor": {
          "ref": "99a9d666-b1ec-4811-9697-d46c61a6c055",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "54436e4a-7b4c-4b8b-83f5-af8c4b14ca6b"
        },
        "item": {
          "id": "4aecf6a4-cc5a-4652-a0f2-b63c925fbf20",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "9565677b-b096-4873-a936-22d6bccf2d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2910f19f-5b78-4edb-97ca-0c0d01f5ccf9",
        "cursor": {
          "ref": "b55a6823-22fb-436d-a68f-8158e3cebe2d",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cd81447d-ea88-4121-9520-d050be4cb55c"
        },
        "item": {
          "id": "2910f19f-5b78-4edb-97ca-0c0d01f5ccf9",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "eceedcfa-ff28-4380-a455-45afe90c81fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2910f19f-5b78-4edb-97ca-0c0d01f5ccf9",
        "cursor": {
          "ref": "b55a6823-22fb-436d-a68f-8158e3cebe2d",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cd81447d-ea88-4121-9520-d050be4cb55c"
        },
        "item": {
          "id": "2910f19f-5b78-4edb-97ca-0c0d01f5ccf9",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "eceedcfa-ff28-4380-a455-45afe90c81fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62cf5d64-fe7e-4bf2-a5f9-7c8227b30010",
        "cursor": {
          "ref": "a4835a20-6cb7-4a50-8791-49d62cd54373",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3391e4e5-a9d4-482a-a38f-5f8bd704c89a"
        },
        "item": {
          "id": "62cf5d64-fe7e-4bf2-a5f9-7c8227b30010",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "eecaca7b-ab3a-4abd-8178-ddf2bb9d29c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62cf5d64-fe7e-4bf2-a5f9-7c8227b30010",
        "cursor": {
          "ref": "a4835a20-6cb7-4a50-8791-49d62cd54373",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3391e4e5-a9d4-482a-a38f-5f8bd704c89a"
        },
        "item": {
          "id": "62cf5d64-fe7e-4bf2-a5f9-7c8227b30010",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "eecaca7b-ab3a-4abd-8178-ddf2bb9d29c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe7be82-acdd-4209-8583-040b163ddca4",
        "cursor": {
          "ref": "0044aa74-9b98-424a-bd4e-1c98e9eb83fd",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a03ef44f-5ef5-49da-b40e-13d87d825385"
        },
        "item": {
          "id": "cbe7be82-acdd-4209-8583-040b163ddca4",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "2e8e320b-d88d-4f7a-84ff-80f247eebec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe7be82-acdd-4209-8583-040b163ddca4",
        "cursor": {
          "ref": "0044aa74-9b98-424a-bd4e-1c98e9eb83fd",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a03ef44f-5ef5-49da-b40e-13d87d825385"
        },
        "item": {
          "id": "cbe7be82-acdd-4209-8583-040b163ddca4",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "2e8e320b-d88d-4f7a-84ff-80f247eebec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02508fd-c1f0-458b-97f8-4003a7c04b1d",
        "cursor": {
          "ref": "b3504de3-aa5a-4de4-9f02-ef9f9216a2cd",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "902c004a-9357-4ce7-bc0c-53c9728a54a5"
        },
        "item": {
          "id": "b02508fd-c1f0-458b-97f8-4003a7c04b1d",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "d850b836-44b8-4933-870e-df6a11025c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02508fd-c1f0-458b-97f8-4003a7c04b1d",
        "cursor": {
          "ref": "b3504de3-aa5a-4de4-9f02-ef9f9216a2cd",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "902c004a-9357-4ce7-bc0c-53c9728a54a5"
        },
        "item": {
          "id": "b02508fd-c1f0-458b-97f8-4003a7c04b1d",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "d850b836-44b8-4933-870e-df6a11025c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4031513-246a-4623-93ef-6f0855e354f3",
        "cursor": {
          "ref": "42e3e8be-0bb5-4120-9199-ee741b165eb1",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6344f923-15f0-4a34-82d6-ead79d2d5095"
        },
        "item": {
          "id": "f4031513-246a-4623-93ef-6f0855e354f3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "92734a5d-1069-4b05-8174-f4c3de0809db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4031513-246a-4623-93ef-6f0855e354f3",
        "cursor": {
          "ref": "42e3e8be-0bb5-4120-9199-ee741b165eb1",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6344f923-15f0-4a34-82d6-ead79d2d5095"
        },
        "item": {
          "id": "f4031513-246a-4623-93ef-6f0855e354f3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "92734a5d-1069-4b05-8174-f4c3de0809db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ff31e0-0952-4ef5-bd53-24cbc375efc6",
        "cursor": {
          "ref": "6ba61869-3831-4e47-8e8a-373c16ead90e",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1214d6e9-9463-41ef-a39c-0228d46f5320"
        },
        "item": {
          "id": "a6ff31e0-0952-4ef5-bd53-24cbc375efc6",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "75e9c9dd-ae17-407a-82e4-f49504f07e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ff31e0-0952-4ef5-bd53-24cbc375efc6",
        "cursor": {
          "ref": "6ba61869-3831-4e47-8e8a-373c16ead90e",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1214d6e9-9463-41ef-a39c-0228d46f5320"
        },
        "item": {
          "id": "a6ff31e0-0952-4ef5-bd53-24cbc375efc6",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "75e9c9dd-ae17-407a-82e4-f49504f07e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d1811b2-07ba-4b93-bfab-0e23a57682aa",
        "cursor": {
          "ref": "5d6ad15b-e788-43a4-b008-86783ce9671a",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "77b5f9c6-f0b8-4bef-a2b9-dd91973eda84"
        },
        "item": {
          "id": "2d1811b2-07ba-4b93-bfab-0e23a57682aa",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "b602f788-6bd8-4c71-b48e-6528872eb062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d1811b2-07ba-4b93-bfab-0e23a57682aa",
        "cursor": {
          "ref": "5d6ad15b-e788-43a4-b008-86783ce9671a",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "77b5f9c6-f0b8-4bef-a2b9-dd91973eda84"
        },
        "item": {
          "id": "2d1811b2-07ba-4b93-bfab-0e23a57682aa",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "b602f788-6bd8-4c71-b48e-6528872eb062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7071b9e-0753-4433-8c5a-49daff548bf6",
        "cursor": {
          "ref": "6e04de26-67d5-4027-b51e-6ae4cbfd407a",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7e433c0b-04ca-497d-8d01-9ba0a0993fcc"
        },
        "item": {
          "id": "c7071b9e-0753-4433-8c5a-49daff548bf6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1c17f74c-5774-4f8a-86da-f2e27b694219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 427,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7071b9e-0753-4433-8c5a-49daff548bf6",
        "cursor": {
          "ref": "6e04de26-67d5-4027-b51e-6ae4cbfd407a",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7e433c0b-04ca-497d-8d01-9ba0a0993fcc"
        },
        "item": {
          "id": "c7071b9e-0753-4433-8c5a-49daff548bf6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1c17f74c-5774-4f8a-86da-f2e27b694219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 427,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532032bf-4913-4a75-ab15-2f13fdcc9344",
        "cursor": {
          "ref": "84a9c6b5-5abe-4809-8c21-0a37b3cb2e7a",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "daad0195-b314-4e75-952c-4707df8fd98b"
        },
        "item": {
          "id": "532032bf-4913-4a75-ab15-2f13fdcc9344",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "90d3d971-f9ed-4568-89e2-70fd5483f8fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532032bf-4913-4a75-ab15-2f13fdcc9344",
        "cursor": {
          "ref": "84a9c6b5-5abe-4809-8c21-0a37b3cb2e7a",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "daad0195-b314-4e75-952c-4707df8fd98b"
        },
        "item": {
          "id": "532032bf-4913-4a75-ab15-2f13fdcc9344",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "90d3d971-f9ed-4568-89e2-70fd5483f8fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe8a7dd-a523-45ae-9bdb-d4cee07b2f7c",
        "cursor": {
          "ref": "05eee478-596f-4c3f-8d9b-d07fe9ef6f35",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0deffec7-4134-4466-9e93-ae8197740eda"
        },
        "item": {
          "id": "bbe8a7dd-a523-45ae-9bdb-d4cee07b2f7c",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "c8b86ce6-27b8-48cd-a673-2d86e118806a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe8a7dd-a523-45ae-9bdb-d4cee07b2f7c",
        "cursor": {
          "ref": "05eee478-596f-4c3f-8d9b-d07fe9ef6f35",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0deffec7-4134-4466-9e93-ae8197740eda"
        },
        "item": {
          "id": "bbe8a7dd-a523-45ae-9bdb-d4cee07b2f7c",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "c8b86ce6-27b8-48cd-a673-2d86e118806a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0220c5-123a-4731-9463-5085e938bca4",
        "cursor": {
          "ref": "d5ecd39c-3719-49c3-bd83-2ddc8ae1dc35",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7f37dd30-ce4a-4aee-96eb-913b75e0f1d6"
        },
        "item": {
          "id": "6d0220c5-123a-4731-9463-5085e938bca4",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "d86b3383-1297-430f-bc76-335e2665ba8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0220c5-123a-4731-9463-5085e938bca4",
        "cursor": {
          "ref": "d5ecd39c-3719-49c3-bd83-2ddc8ae1dc35",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7f37dd30-ce4a-4aee-96eb-913b75e0f1d6"
        },
        "item": {
          "id": "6d0220c5-123a-4731-9463-5085e938bca4",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "d86b3383-1297-430f-bc76-335e2665ba8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16bfb02-1d12-4b16-8cd8-807b5b38d9c1",
        "cursor": {
          "ref": "e17f8525-c5b4-4eda-91fd-5a304b36f129",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "60dd0b20-55eb-44a3-9943-307f224d2377"
        },
        "item": {
          "id": "f16bfb02-1d12-4b16-8cd8-807b5b38d9c1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b6fa7421-0f7f-403b-a6d9-7dbe48e37ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16bfb02-1d12-4b16-8cd8-807b5b38d9c1",
        "cursor": {
          "ref": "e17f8525-c5b4-4eda-91fd-5a304b36f129",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "60dd0b20-55eb-44a3-9943-307f224d2377"
        },
        "item": {
          "id": "f16bfb02-1d12-4b16-8cd8-807b5b38d9c1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b6fa7421-0f7f-403b-a6d9-7dbe48e37ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ee3546-a4b7-4554-be97-92030ff57428",
        "cursor": {
          "ref": "b4d6ae7c-b6b7-4981-bffa-fb6bf35a93e6",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "96c760f4-d196-457a-8a5e-4d44ea5b5ac8"
        },
        "item": {
          "id": "71ee3546-a4b7-4554-be97-92030ff57428",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "429c2c41-8b7f-415b-a69e-b2101731e646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ee3546-a4b7-4554-be97-92030ff57428",
        "cursor": {
          "ref": "b4d6ae7c-b6b7-4981-bffa-fb6bf35a93e6",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "96c760f4-d196-457a-8a5e-4d44ea5b5ac8"
        },
        "item": {
          "id": "71ee3546-a4b7-4554-be97-92030ff57428",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "429c2c41-8b7f-415b-a69e-b2101731e646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea88448-7c55-43a7-a7d0-d1483643c8bd",
        "cursor": {
          "ref": "823f0a01-9982-47a5-9a93-509225c52716",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "25d27391-3b6d-43cf-b0bd-9f3619b858ca"
        },
        "item": {
          "id": "7ea88448-7c55-43a7-a7d0-d1483643c8bd",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "5d3e0b25-8e87-413b-8759-37f66ce29dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea88448-7c55-43a7-a7d0-d1483643c8bd",
        "cursor": {
          "ref": "823f0a01-9982-47a5-9a93-509225c52716",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "25d27391-3b6d-43cf-b0bd-9f3619b858ca"
        },
        "item": {
          "id": "7ea88448-7c55-43a7-a7d0-d1483643c8bd",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "5d3e0b25-8e87-413b-8759-37f66ce29dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21eb681-1ea4-439c-a6d2-af12dc6a7929",
        "cursor": {
          "ref": "7d839983-1224-4578-88a0-ac1bc8f7972c",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "08a26dbc-4268-40bf-b8a7-1f8bc06ba631"
        },
        "item": {
          "id": "c21eb681-1ea4-439c-a6d2-af12dc6a7929",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e014f5cb-e92f-4095-8855-d1607c1a4f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21eb681-1ea4-439c-a6d2-af12dc6a7929",
        "cursor": {
          "ref": "7d839983-1224-4578-88a0-ac1bc8f7972c",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "08a26dbc-4268-40bf-b8a7-1f8bc06ba631"
        },
        "item": {
          "id": "c21eb681-1ea4-439c-a6d2-af12dc6a7929",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e014f5cb-e92f-4095-8855-d1607c1a4f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b744ff-c059-4f81-93be-562661d45ff5",
        "cursor": {
          "ref": "0ab1c4dd-4cc9-46f1-8542-f3194480dec9",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c586e099-a102-428a-be46-3d161d47743c"
        },
        "item": {
          "id": "54b744ff-c059-4f81-93be-562661d45ff5",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4644471e-705f-4f50-bf33-e0d471330d63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b744ff-c059-4f81-93be-562661d45ff5",
        "cursor": {
          "ref": "0ab1c4dd-4cc9-46f1-8542-f3194480dec9",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c586e099-a102-428a-be46-3d161d47743c"
        },
        "item": {
          "id": "54b744ff-c059-4f81-93be-562661d45ff5",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4644471e-705f-4f50-bf33-e0d471330d63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b81274-e2b8-40c3-8385-c28584053166",
        "cursor": {
          "ref": "a2211e70-e137-411b-8469-63dbdf6ab7cb",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "16f375c2-ed97-4241-b6bf-d9749f2afaf2"
        },
        "item": {
          "id": "b5b81274-e2b8-40c3-8385-c28584053166",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "ffe6b6ec-c4b7-4126-b997-9f5a7c711f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b81274-e2b8-40c3-8385-c28584053166",
        "cursor": {
          "ref": "a2211e70-e137-411b-8469-63dbdf6ab7cb",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "16f375c2-ed97-4241-b6bf-d9749f2afaf2"
        },
        "item": {
          "id": "b5b81274-e2b8-40c3-8385-c28584053166",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "ffe6b6ec-c4b7-4126-b997-9f5a7c711f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3646eb49-0811-47f4-bc3f-7e6b79e51748",
        "cursor": {
          "ref": "ab73fe2b-3e03-4450-9696-51a3c473fabf",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "45ec42df-ef66-4cf7-a93c-981f0f48ca05"
        },
        "item": {
          "id": "3646eb49-0811-47f4-bc3f-7e6b79e51748",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "b1a43bbd-2c1a-4fe4-8be1-9f142504df2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3646eb49-0811-47f4-bc3f-7e6b79e51748",
        "cursor": {
          "ref": "ab73fe2b-3e03-4450-9696-51a3c473fabf",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "45ec42df-ef66-4cf7-a93c-981f0f48ca05"
        },
        "item": {
          "id": "3646eb49-0811-47f4-bc3f-7e6b79e51748",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "b1a43bbd-2c1a-4fe4-8be1-9f142504df2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5516b3f1-7ea9-49e1-8388-534472805bb8",
        "cursor": {
          "ref": "c2b8db64-4b38-43bc-ba1c-2325267f7bde",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3d3d1f2e-e48d-49a5-b782-d308ae825b77"
        },
        "item": {
          "id": "5516b3f1-7ea9-49e1-8388-534472805bb8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c3d0e817-c9be-4408-b6aa-e6d8fa872b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5516b3f1-7ea9-49e1-8388-534472805bb8",
        "cursor": {
          "ref": "c2b8db64-4b38-43bc-ba1c-2325267f7bde",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3d3d1f2e-e48d-49a5-b782-d308ae825b77"
        },
        "item": {
          "id": "5516b3f1-7ea9-49e1-8388-534472805bb8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c3d0e817-c9be-4408-b6aa-e6d8fa872b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75b9a26-abaa-4536-9ff2-dc956031f58a",
        "cursor": {
          "ref": "c419c896-fa23-452d-97fe-677cdba92450",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "81c06206-47d9-421a-8ebb-3c473461247c"
        },
        "item": {
          "id": "a75b9a26-abaa-4536-9ff2-dc956031f58a",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "c17074e2-34ce-404c-aeca-7db32f7545cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75b9a26-abaa-4536-9ff2-dc956031f58a",
        "cursor": {
          "ref": "c419c896-fa23-452d-97fe-677cdba92450",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "81c06206-47d9-421a-8ebb-3c473461247c"
        },
        "item": {
          "id": "a75b9a26-abaa-4536-9ff2-dc956031f58a",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "c17074e2-34ce-404c-aeca-7db32f7545cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6406c05f-7b13-4574-89fe-6c36e0424a71",
        "cursor": {
          "ref": "0ffb7d3a-1866-4c63-9017-8a1819f234a0",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cacd5c03-bff1-4555-bc06-63106bc734ab"
        },
        "item": {
          "id": "6406c05f-7b13-4574-89fe-6c36e0424a71",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7ac6a529-c195-40ad-9fa3-7c016b49177f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6406c05f-7b13-4574-89fe-6c36e0424a71",
        "cursor": {
          "ref": "0ffb7d3a-1866-4c63-9017-8a1819f234a0",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cacd5c03-bff1-4555-bc06-63106bc734ab"
        },
        "item": {
          "id": "6406c05f-7b13-4574-89fe-6c36e0424a71",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7ac6a529-c195-40ad-9fa3-7c016b49177f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b482a028-4206-4433-ad4a-d714566b1981",
        "cursor": {
          "ref": "56358f03-36c2-46f8-b97a-98c8de3320be",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ae804887-7021-4286-9828-fdb4c8785c9f"
        },
        "item": {
          "id": "b482a028-4206-4433-ad4a-d714566b1981",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "5999dc00-8ac9-4367-8e62-5697993c2dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b482a028-4206-4433-ad4a-d714566b1981",
        "cursor": {
          "ref": "56358f03-36c2-46f8-b97a-98c8de3320be",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ae804887-7021-4286-9828-fdb4c8785c9f"
        },
        "item": {
          "id": "b482a028-4206-4433-ad4a-d714566b1981",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "5999dc00-8ac9-4367-8e62-5697993c2dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e35021-ef1b-4aa5-a90e-fd6d99dbccc5",
        "cursor": {
          "ref": "4fbbe6eb-a5fb-4bef-a68e-9e5ece1968e0",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3ce3326b-0f39-4e86-a9bc-de7dff6f18e4"
        },
        "item": {
          "id": "38e35021-ef1b-4aa5-a90e-fd6d99dbccc5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "845aa099-5fe8-4226-8017-d0be7f1b1deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e35021-ef1b-4aa5-a90e-fd6d99dbccc5",
        "cursor": {
          "ref": "4fbbe6eb-a5fb-4bef-a68e-9e5ece1968e0",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3ce3326b-0f39-4e86-a9bc-de7dff6f18e4"
        },
        "item": {
          "id": "38e35021-ef1b-4aa5-a90e-fd6d99dbccc5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "845aa099-5fe8-4226-8017-d0be7f1b1deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9b3755-0b10-4d6c-b402-e73498341d56",
        "cursor": {
          "ref": "d777aa2b-43fb-4a42-accc-dd2d97d32e33",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3f393bcb-1582-462c-9dde-ada277e2da5e"
        },
        "item": {
          "id": "ae9b3755-0b10-4d6c-b402-e73498341d56",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "92bf7575-0459-4964-811c-dfae149f9058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9b3755-0b10-4d6c-b402-e73498341d56",
        "cursor": {
          "ref": "d777aa2b-43fb-4a42-accc-dd2d97d32e33",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3f393bcb-1582-462c-9dde-ada277e2da5e"
        },
        "item": {
          "id": "ae9b3755-0b10-4d6c-b402-e73498341d56",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "92bf7575-0459-4964-811c-dfae149f9058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a66b47a-02e8-4c06-990e-1862ca106a5c",
        "cursor": {
          "ref": "c1ab5057-b3a7-45d6-98e3-fce6e442308a",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7df25166-95d6-4741-a1f7-259826df4186"
        },
        "item": {
          "id": "3a66b47a-02e8-4c06-990e-1862ca106a5c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "6bb1e9bd-4af1-4860-a04c-ebf8506a8d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a66b47a-02e8-4c06-990e-1862ca106a5c",
        "cursor": {
          "ref": "c1ab5057-b3a7-45d6-98e3-fce6e442308a",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7df25166-95d6-4741-a1f7-259826df4186"
        },
        "item": {
          "id": "3a66b47a-02e8-4c06-990e-1862ca106a5c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "6bb1e9bd-4af1-4860-a04c-ebf8506a8d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a021ee-989b-42b0-86de-ab8f8806faa4",
        "cursor": {
          "ref": "3a17ce10-ca81-42b7-95be-dfd103349206",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "25eed99f-7063-406b-ad3a-eb9d781cab6c"
        },
        "item": {
          "id": "e5a021ee-989b-42b0-86de-ab8f8806faa4",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "00e53453-2958-497d-abf2-2707a4112efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a021ee-989b-42b0-86de-ab8f8806faa4",
        "cursor": {
          "ref": "3a17ce10-ca81-42b7-95be-dfd103349206",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "25eed99f-7063-406b-ad3a-eb9d781cab6c"
        },
        "item": {
          "id": "e5a021ee-989b-42b0-86de-ab8f8806faa4",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "00e53453-2958-497d-abf2-2707a4112efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d061f8b-8004-4d38-98b1-658eee2bbd91",
        "cursor": {
          "ref": "93b1b843-3400-427d-9ec6-d385f6dd9448",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b0b9603f-6a88-4a9b-bb61-2c48f67bcd63"
        },
        "item": {
          "id": "1d061f8b-8004-4d38-98b1-658eee2bbd91",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "55c4ef73-dad7-49f8-a927-aa1ca83ce7d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d061f8b-8004-4d38-98b1-658eee2bbd91",
        "cursor": {
          "ref": "93b1b843-3400-427d-9ec6-d385f6dd9448",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b0b9603f-6a88-4a9b-bb61-2c48f67bcd63"
        },
        "item": {
          "id": "1d061f8b-8004-4d38-98b1-658eee2bbd91",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "55c4ef73-dad7-49f8-a927-aa1ca83ce7d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fae2516-0f1b-4d46-acef-7c5e0173c549",
        "cursor": {
          "ref": "95abbb08-140d-40f6-9b50-6883d3e6958b",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d189c373-efd1-4cc0-9c41-eb5a78220251"
        },
        "item": {
          "id": "2fae2516-0f1b-4d46-acef-7c5e0173c549",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b6abb3d1-24ab-4648-9ee9-6499c1580b8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fae2516-0f1b-4d46-acef-7c5e0173c549",
        "cursor": {
          "ref": "95abbb08-140d-40f6-9b50-6883d3e6958b",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d189c373-efd1-4cc0-9c41-eb5a78220251"
        },
        "item": {
          "id": "2fae2516-0f1b-4d46-acef-7c5e0173c549",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b6abb3d1-24ab-4648-9ee9-6499c1580b8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8733d723-3b05-4e75-b38b-50aa5332935d",
        "cursor": {
          "ref": "270f092f-daa6-4204-9ff2-08c6586fb99e",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "20c0c861-d58b-4237-ac6e-1e269016a6ee"
        },
        "item": {
          "id": "8733d723-3b05-4e75-b38b-50aa5332935d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7605e894-2e63-4708-800f-fad73893c206",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8733d723-3b05-4e75-b38b-50aa5332935d",
        "cursor": {
          "ref": "270f092f-daa6-4204-9ff2-08c6586fb99e",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "20c0c861-d58b-4237-ac6e-1e269016a6ee"
        },
        "item": {
          "id": "8733d723-3b05-4e75-b38b-50aa5332935d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7605e894-2e63-4708-800f-fad73893c206",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577f34e7-bf94-4602-83cf-17e6cebadb4e",
        "cursor": {
          "ref": "ab0d8ecc-695f-4cd4-8869-323073e05dde",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9af7cd31-5e6f-4b19-8664-bef210b65a3e"
        },
        "item": {
          "id": "577f34e7-bf94-4602-83cf-17e6cebadb4e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c67fab05-f302-460a-b83d-73d44caedbf4",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "577f34e7-bf94-4602-83cf-17e6cebadb4e",
        "cursor": {
          "ref": "ab0d8ecc-695f-4cd4-8869-323073e05dde",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9af7cd31-5e6f-4b19-8664-bef210b65a3e"
        },
        "item": {
          "id": "577f34e7-bf94-4602-83cf-17e6cebadb4e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c67fab05-f302-460a-b83d-73d44caedbf4",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9ec61e-a3f0-4225-bbc9-dfe644a62840",
        "cursor": {
          "ref": "6c3ad314-c3f9-481f-8926-558e77caedb5",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "14e3633b-dfcb-489a-8336-6cdd63c5e619"
        },
        "item": {
          "id": "0f9ec61e-a3f0-4225-bbc9-dfe644a62840",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "7e0741ff-d8ed-4f19-872b-f82ee86d482e",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9ec61e-a3f0-4225-bbc9-dfe644a62840",
        "cursor": {
          "ref": "6c3ad314-c3f9-481f-8926-558e77caedb5",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "14e3633b-dfcb-489a-8336-6cdd63c5e619"
        },
        "item": {
          "id": "0f9ec61e-a3f0-4225-bbc9-dfe644a62840",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "7e0741ff-d8ed-4f19-872b-f82ee86d482e",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b626ce-fe4c-4740-a3fb-13118eb2dedf",
        "cursor": {
          "ref": "55120bec-a020-46ce-88a7-e4e3620ba90f",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2da9f1ed-11a0-4491-b4cc-0db9c67db231"
        },
        "item": {
          "id": "32b626ce-fe4c-4740-a3fb-13118eb2dedf",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d5cfc244-abb8-411c-992d-325e180b303d",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b626ce-fe4c-4740-a3fb-13118eb2dedf",
        "cursor": {
          "ref": "55120bec-a020-46ce-88a7-e4e3620ba90f",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2da9f1ed-11a0-4491-b4cc-0db9c67db231"
        },
        "item": {
          "id": "32b626ce-fe4c-4740-a3fb-13118eb2dedf",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d5cfc244-abb8-411c-992d-325e180b303d",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a976e59-4a8f-436f-b3a2-e62633514df4",
        "cursor": {
          "ref": "88fbd9ea-5ef5-49da-91b6-5f1dd5f8ad30",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "37304fa8-9733-4382-a49c-11effe0f3cc5"
        },
        "item": {
          "id": "6a976e59-4a8f-436f-b3a2-e62633514df4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "56e92d94-acb7-4da2-bb18-c9f7872560ee",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a976e59-4a8f-436f-b3a2-e62633514df4",
        "cursor": {
          "ref": "88fbd9ea-5ef5-49da-91b6-5f1dd5f8ad30",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "37304fa8-9733-4382-a49c-11effe0f3cc5"
        },
        "item": {
          "id": "6a976e59-4a8f-436f-b3a2-e62633514df4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "56e92d94-acb7-4da2-bb18-c9f7872560ee",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "74374621-d799-4f97-b954-774667778b47",
        "cursor": {
          "ref": "81aa66d6-fd27-4227-a0c5-4ee74afb3984",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "de1e02b2-868f-4120-9a16-95279606c898"
        },
        "item": {
          "id": "74374621-d799-4f97-b954-774667778b47",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "199b7813-9755-41f8-b456-9615f925651a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "74374621-d799-4f97-b954-774667778b47",
        "cursor": {
          "ref": "81aa66d6-fd27-4227-a0c5-4ee74afb3984",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "de1e02b2-868f-4120-9a16-95279606c898"
        },
        "item": {
          "id": "74374621-d799-4f97-b954-774667778b47",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "199b7813-9755-41f8-b456-9615f925651a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8445defd-81cc-4a9c-95f7-14440cdd3335",
        "cursor": {
          "ref": "46c97eba-3302-4ba6-a391-ba1932134396",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c62379b2-cd75-4aa0-896a-e2b9e3fd221b"
        },
        "item": {
          "id": "8445defd-81cc-4a9c-95f7-14440cdd3335",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "74015b90-abe3-4f1f-af32-db39f1978c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8445defd-81cc-4a9c-95f7-14440cdd3335",
        "cursor": {
          "ref": "46c97eba-3302-4ba6-a391-ba1932134396",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c62379b2-cd75-4aa0-896a-e2b9e3fd221b"
        },
        "item": {
          "id": "8445defd-81cc-4a9c-95f7-14440cdd3335",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "74015b90-abe3-4f1f-af32-db39f1978c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8c982c30-1fdf-46a9-9693-8d2052fe85b6",
        "cursor": {
          "ref": "9ffcfafd-5ad5-4209-991e-0037c9d9cca6",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3b0d020a-a421-405e-8845-74f1e72dca12"
        },
        "item": {
          "id": "8c982c30-1fdf-46a9-9693-8d2052fe85b6",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "ea2ae5cf-11fe-42f3-8298-1225cd282d7b",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c982c30-1fdf-46a9-9693-8d2052fe85b6",
        "cursor": {
          "ref": "9ffcfafd-5ad5-4209-991e-0037c9d9cca6",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3b0d020a-a421-405e-8845-74f1e72dca12"
        },
        "item": {
          "id": "8c982c30-1fdf-46a9-9693-8d2052fe85b6",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "ea2ae5cf-11fe-42f3-8298-1225cd282d7b",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e52994-1681-46ad-88bb-babe76994907",
        "cursor": {
          "ref": "8d82fe5f-1160-4cb7-8daa-56bebaf6b000",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "06d5071f-6ce4-457f-bead-337b6cae9ee5"
        },
        "item": {
          "id": "86e52994-1681-46ad-88bb-babe76994907",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5ba5c38e-093e-4b3e-87f8-d28896286a8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e52994-1681-46ad-88bb-babe76994907",
        "cursor": {
          "ref": "8d82fe5f-1160-4cb7-8daa-56bebaf6b000",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "06d5071f-6ce4-457f-bead-337b6cae9ee5"
        },
        "item": {
          "id": "86e52994-1681-46ad-88bb-babe76994907",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5ba5c38e-093e-4b3e-87f8-d28896286a8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f94921e-7807-404c-b727-423cf51494a7",
        "cursor": {
          "ref": "55431630-bbb4-4913-8ecf-6fcfd7c38797",
          "length": 63,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7d7e8833-e7f1-4326-aa0b-70caa5422359"
        },
        "item": {
          "id": "2f94921e-7807-404c-b727-423cf51494a7",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "5b3c454d-0cf3-4624-85a1-fadeb77d7135",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc8fdc4-5f26-4335-88a8-afeb74f27932",
        "cursor": {
          "ref": "1217e377-db77-4c16-b353-6bfbcebaf252",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "743c5a91-9f89-4ffd-a05e-63c70522fa83"
        },
        "item": {
          "id": "adc8fdc4-5f26-4335-88a8-afeb74f27932",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d14ed94f-fe28-4e58-a24d-ba1b73f0307e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc8fdc4-5f26-4335-88a8-afeb74f27932",
        "cursor": {
          "ref": "1217e377-db77-4c16-b353-6bfbcebaf252",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "743c5a91-9f89-4ffd-a05e-63c70522fa83"
        },
        "item": {
          "id": "adc8fdc4-5f26-4335-88a8-afeb74f27932",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d14ed94f-fe28-4e58-a24d-ba1b73f0307e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e6a11b-f087-428b-8a44-7eec6d29472d",
        "cursor": {
          "ref": "c88dbc1b-5c70-4308-8682-9af11b046943",
          "length": 63,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "93f1dfdf-2a3c-49bd-a294-d7670b68b9de"
        },
        "item": {
          "id": "75e6a11b-f087-428b-8a44-7eec6d29472d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a78d5c70-85fc-4fe0-bfb5-948deb2519be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f52c37a-ce7f-4ef3-b2af-ff41613a57f1",
        "cursor": {
          "ref": "b74a728a-6580-4629-8f91-6274e980526e",
          "length": 63,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4683a89d-42e1-40e8-a794-1384d139aab3"
        },
        "item": {
          "id": "8f52c37a-ce7f-4ef3-b2af-ff41613a57f1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4137e926-38da-4890-949a-0524f875ba13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c37f3e-3874-4699-93ef-5ca3f1275d2d",
        "cursor": {
          "ref": "3d12543e-66b4-42d9-8703-d5cfb7f8ae98",
          "length": 63,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f0e11d0f-c913-4d81-bff7-2fe89b076439"
        },
        "item": {
          "id": "05c37f3e-3874-4699-93ef-5ca3f1275d2d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7b768d3e-ec7d-4821-b5e8-967753164933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b52ece-96e4-439a-a788-b8e61e33b4c7",
        "cursor": {
          "ref": "06b405a8-277a-4232-b92a-7564ec0e28e8",
          "length": 63,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "80c25abe-b2ad-4caf-af7b-4b2f89bfc9b0"
        },
        "item": {
          "id": "47b52ece-96e4-439a-a788-b8e61e33b4c7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9acfae5c-91c0-4807-97e1-522d73bc943c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7a3b2f-9f8f-48ba-80c2-9da5bd2d31e0",
        "cursor": {
          "ref": "69398010-0391-4ebd-849b-2a07e7bbde04",
          "length": 63,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c3c167a7-cfca-489c-9be4-4b0e8441ce67"
        },
        "item": {
          "id": "3e7a3b2f-9f8f-48ba-80c2-9da5bd2d31e0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "482e8e12-3b19-4be9-aded-98b1219d9f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2a8a97-c885-47de-b418-b23c5ef15c70",
        "cursor": {
          "ref": "e1eb46ad-0d5e-443a-9d74-bdb189214126",
          "length": 63,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b5c0d22d-041b-4069-8f94-cb7522c5063a"
        },
        "item": {
          "id": "5e2a8a97-c885-47de-b418-b23c5ef15c70",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "50bf4c60-4762-45e7-a0ee-db1cf884fa36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42d282d-9fbb-4300-bdd5-97b69472d30b",
        "cursor": {
          "ref": "83b942e8-5898-4c77-ad51-6691ee18bd42",
          "length": 63,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6198151b-fd2f-4993-b0ab-0c5037b06091"
        },
        "item": {
          "id": "b42d282d-9fbb-4300-bdd5-97b69472d30b",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "2ed81896-6394-4d27-bb69-8d8fcdf5c2ed",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2e7f4f-1070-486c-bf32-065ccd5b8501",
        "cursor": {
          "ref": "f9148b27-e2a5-4366-a72e-78a0953f7a0b",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "340f1ec3-a512-4838-9a2f-b1f7f6ad742b"
        },
        "item": {
          "id": "1d2e7f4f-1070-486c-bf32-065ccd5b8501",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a95f8102-b446-4877-8b9c-bb432262bd53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2e7f4f-1070-486c-bf32-065ccd5b8501",
        "cursor": {
          "ref": "f9148b27-e2a5-4366-a72e-78a0953f7a0b",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "340f1ec3-a512-4838-9a2f-b1f7f6ad742b"
        },
        "item": {
          "id": "1d2e7f4f-1070-486c-bf32-065ccd5b8501",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a95f8102-b446-4877-8b9c-bb432262bd53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a88fb9-7391-419c-8aae-023cb23c9fd9",
        "cursor": {
          "ref": "c166009c-df02-42f7-906b-72dde145186c",
          "length": 63,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "dac9cd6d-9ae7-4766-81f7-f9234c340c9c"
        },
        "item": {
          "id": "f9a88fb9-7391-419c-8aae-023cb23c9fd9",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "6d4508b5-d50a-4c0f-99ea-9783f5374a03",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24fc3302-f81e-4639-96b1-190764717237",
        "cursor": {
          "ref": "fe23bef2-4619-42bf-aa2f-e4dd70955218",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "51a755e9-3448-4b8d-b788-47b381d7ed2e"
        },
        "item": {
          "id": "24fc3302-f81e-4639-96b1-190764717237",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ec66cf5d-17a7-4f02-b4b3-85423359ce5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "24fc3302-f81e-4639-96b1-190764717237",
        "cursor": {
          "ref": "fe23bef2-4619-42bf-aa2f-e4dd70955218",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "51a755e9-3448-4b8d-b788-47b381d7ed2e"
        },
        "item": {
          "id": "24fc3302-f81e-4639-96b1-190764717237",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ec66cf5d-17a7-4f02-b4b3-85423359ce5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "326c2dfd-42cf-492d-b36c-45804d8c3634",
        "cursor": {
          "ref": "29227174-5bb9-4ce3-ae87-9c92d5b21572",
          "length": 63,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6df3558e-7c1c-40e4-932a-76b5b1759f74"
        },
        "item": {
          "id": "326c2dfd-42cf-492d-b36c-45804d8c3634",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "65d6f344-709c-4022-8a11-f1a47a883880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "6044e5d7-0631-4d9e-8ce1-8185486eb3cd",
        "cursor": {
          "ref": "1c4b8ae7-6419-4a5b-bfae-68ccf42f5154",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5d4dcf2b-5d1b-40f8-a495-48bd57c9b056"
        },
        "item": {
          "id": "6044e5d7-0631-4d9e-8ce1-8185486eb3cd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f33c39a6-1c39-47f2-9d9f-e988d92c7710",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6044e5d7-0631-4d9e-8ce1-8185486eb3cd",
        "cursor": {
          "ref": "1c4b8ae7-6419-4a5b-bfae-68ccf42f5154",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5d4dcf2b-5d1b-40f8-a495-48bd57c9b056"
        },
        "item": {
          "id": "6044e5d7-0631-4d9e-8ce1-8185486eb3cd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f33c39a6-1c39-47f2-9d9f-e988d92c7710",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78125629-dc70-4fdb-8f9c-71323c9777fd",
        "cursor": {
          "ref": "77810fe3-6822-4251-b360-5ef91d91e73b",
          "length": 63,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "73130f99-cbc8-4c08-ac22-993564d9c418"
        },
        "item": {
          "id": "78125629-dc70-4fdb-8f9c-71323c9777fd",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "b338e096-4ba3-4ef2-844e-cea1ef81e564",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}