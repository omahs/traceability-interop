{
  "collection": {
    "info": {
      "_postman_id": "48596ec9-acce-4014-8e0f-6fd7abcb4783",
      "name": "Credentials Verify Tutorial",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6d66a243-0822-48bb-8f05-c9fc943ac8f9",
        "name": "Get Access Token",
        "request": {
          "url": {
            "host": [
              "{{TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"audience\": \"{{TOKEN_AUDIENCE}}\",\n    \"client_id\": \"{{CLIENT_ID}}\",\n    \"client_secret\": \"{{CLIENT_SECRET}}\",\n    \"grant_type\": \"client_credentials\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "eaa53ac7-9a9f-4962-b568-595da4bceecf",
              "type": "text/javascript",
              "exec": [
                "// Token requests are expected to return a `200 Success` response code. Any",
                "// other response code should trigger a failure.",
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response should include an `access_token` value - this will be presented",
                "// to authenticated API endpoints in the `Authentication` header (see the last",
                "// testing code block for details on how this is persisted).",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The type of `access_token` returned by the token request is expected to be",
                "// `Bearer`.",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "// The returned data includes an `expires_in` field that indicates time until",
                "// token expiration. Validate that this value is a whole number greater than",
                "// zero, as anything less than or equal to zero means that the `access_token`",
                "// is already expired.",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "});",
                "",
                "// The returned `access_token` value is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// `pm.collectionVariables.get(\"access_token\")`.",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"access_token\", access_token);",
                "});"
              ],
              "_lastExecutionId": "9ad2352d-672b-4493-bb4d-447a6e2f19e4"
            }
          }
        ]
      },
      {
        "id": "4f5be971-8d0d-408b-b839-f33195b07e68",
        "name": "Get Organization DIDs",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "07c0a0da-fe99-4bef-82ab-a413274f21c9",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `access_token` collection variable is missing, but it will",
                "// give an indication of why the request failed in that scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    const access_token = pm.collectionVariables.get(\"access_token\");",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "});",
                "",
                "// The response JSON must include a didDocument property that contains the",
                "// resolved DID document.",
                "pm.test(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "});",
                "",
                "// The DID document must contain an alsoKnownAs property.",
                "pm.test(\"alsoKnownAs MUST be present\", function () {",
                "    const { didDocument } = pm.response.json();",
                "    pm.expect(didDocument).to.have.property('alsoKnownAs');",
                "});",
                "",
                "// The alsoKnownAs property MUST be an array.",
                "pm.test(\"alsoKnownAs MUST be an array\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs).to.be.an('array');",
                "});",
                "",
                "// The alsoKnownAs property MUST be a set.",
                "pm.test(\"alsoKnownAs values MUST be unique\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "// The second element of the alsoKnownAs property will be used as a",
                "// credentials_issuer_id for subsequent tests.",
                "pm.test(\"alsoKnownAs[1] must be present\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs[1]).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// If a verificationMethod property is present, the controller property must",
                "// match the didDocument.id property.",
                "pm.test(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});",
                "",
                "// The value of didDocument.alsoKnownAs[1] is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// pm.collectionVariables.get(\"credential_issuer_id\").",
                "pm.test(\"`credential_issuer_id` persisted to collectionVariables\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.collectionVariables.set(\"credential_issuer_id\", alsoKnownAs[1]);",
                "});"
              ],
              "_lastExecutionId": "1befbeb2-bfb4-4d8f-8537-c718bc4c7731"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "d13d6830-d971-4273-8eff-e8afc4b54e94",
        "name": "Issue Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "issue"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"id\": \"urn:uuid:{{$randomUUID}}\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{credential_issuer_id}}\",\n        \"issuanceDate\": \"2010-01-01T19:23:24Z\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        }\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\",\n        \"created\": \"2020-04-02T18:48:36Z\"\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "ba4d2989-10a1-426e-a080-ba16ad4b919d",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"credential_issuer_id\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"must return `201 Created` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "// Verifiable credential must be made available to later requests",
                "pm.test(\"`verifiable_credential` persisted to collectionVariables\", function() {",
                "    const verifiable_credential = JSON.stringify(pm.response.json());",
                "    pm.collectionVariables.set(\"verifiable_credential\", verifiable_credential);",
                "})",
                ""
              ],
              "_lastExecutionId": "47bd5461-9a9b-474f-87e9-8abfb4ee6760"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "38ce45f5-e1a1-4e4f-9c64-e887852dd16b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a155299-4c9c-477f-92bd-ca5e38faa8f7"
            }
          }
        ]
      },
      {
        "id": "ea7c91c9-1a84-47dd-a6c0-75ecc72c6706",
        "name": "Verify Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "verify"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"verifiableCredential\": {{verifiable_credential}}\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "88e69891-fd8c-4dc7-9021-78b26c175714",
              "type": "text/javascript",
              "exec": [
                "// The `/credentials/verify` endpoint is authenticated. This test will not",
                "// prevent the request from running when the `access_token` collection variable",
                "// is missing, but it will give an indication of why the request failed in that",
                "// scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "// The `verifiable_credential` from the \"Credentials Issue\" request is used to",
                "// populate part of the request body. If this collection variable is missing,",
                "// the request will not be prevented, but this test will raise an error that",
                "// will help to identify the problem.",
                "pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"verifiable_credential\")).to.not.be.undefined;",
                "});",
                "",
                "// The expected response code for a \"Credentials Verify\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "",
                "// The verification should succeed.",
                "pm.test(\"verification should be successful\", function() {",
                "    const { verified } = pm.response.json()",
                "    pm.expect(verified).to.be.true;",
                "});",
                ""
              ],
              "_lastExecutionId": "9516e154-0a6c-4c84-9fe5-d684aaaec212"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 23,
        "pending": 0,
        "failed": 8
      },
      "testScripts": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 121.5,
      "responseMin": 23,
      "responseMax": 388,
      "responseSd": 154.2732964579418,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1658280242619,
      "completed": 1658280243229
    },
    "executions": [
      {
        "id": "6d66a243-0822-48bb-8f05-c9fc943ac8f9",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 4,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2ff55430-cb0c-4036-b480-7b98efeccbbe",
          "httpRequestId": "a3e0dc82-5b60-444c-aa53-fdc41f4c9fda"
        },
        "item": {
          "id": "6d66a243-0822-48bb-8f05-c9fc943ac8f9",
          "name": "Get Access Token"
        },
        "response": {
          "id": "4508f202-81aa-4ef8-b320-d6ca466e3b81",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 388,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "must return `200 Success` status",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response body must include non-empty access_token",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response body must represent `Bearer` token",
              "message": "expected undefined to equal 'Bearer'",
              "stack": "AssertionError: expected undefined to equal 'Bearer'\n   at Object.eval sandbox-script.js:3:1)"
            }
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "returned token must expire in the future",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:4:1)"
            }
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f5be971-8d0d-408b-b839-f33195b07e68",
        "cursor": {
          "ref": "d0b94257-e4ec-4202-bfab-41f3da1effa7",
          "length": 4,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c95ebeff-5685-4c48-a99e-72a325281d41"
        },
        "item": {
          "id": "4f5be971-8d0d-408b-b839-f33195b07e68",
          "name": "Get Organization DIDs"
        },
        "response": {
          "id": "0ce43da9-4bef-4d39-bb3c-e809db444463",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 950
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "`access_token` collection variable must be set",
              "message": "expected null to be a string",
              "stack": "AssertionError: expected null to be a string\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": false
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be present",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be an array",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs values MUST be unique",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs[1] must be present",
            "skipped": false
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13d6830-d971-4273-8eff-e8afc4b54e94",
        "cursor": {
          "ref": "9c71f77d-b6e0-4f67-8956-ff3ca96f8260",
          "length": 4,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a5459bc8-9698-4ae5-b1fe-c66d82d8b002"
        },
        "item": {
          "id": "d13d6830-d971-4273-8eff-e8afc4b54e94",
          "name": "Issue Credential"
        },
        "response": {
          "id": "e482dce7-0292-491a-bf1b-dae869741c3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Created` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `201 Created` status",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:3:3)"
            }
          },
          {
            "assertion": "`verifiable_credential` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7c91c9-1a84-47dd-a6c0-75ecc72c6706",
        "cursor": {
          "ref": "926fb7c9-681f-45d8-a4ae-2e69380f968b",
          "length": 4,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "722a74a0-85e0-4646-b0af-4986f164d507"
        },
        "item": {
          "id": "ea7c91c9-1a84-47dd-a6c0-75ecc72c6706",
          "name": "Verify Credential"
        },
        "response": {
          "id": "389223cd-5b00-463d-bd34-312ac47765f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `200 Success` status",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:3:4)"
            }
          },
          {
            "assertion": "verification should be successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "verification should be successful",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:4:4)"
            }
          }
        ]
      }
    ]
  }
}