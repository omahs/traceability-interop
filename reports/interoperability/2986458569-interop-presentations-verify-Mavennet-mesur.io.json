{
  "collection": {
    "info": {
      "_postman_id": "ed4b33c9-1d72-44ad-8d60-66332ebdcedd",
      "name": "Presentations Verify Tutorial",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "66f16c36-66a1-4c3d-a618-39587ee6ae2b",
        "name": "Get Access Token (Issuer)",
        "request": {
          "url": {
            "host": [
              "{{ISSUER_TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "audience",
                "value": "{{ISSUER_TOKEN_AUDIENCE}}"
              },
              {
                "key": "client_id",
                "value": "{{ISSUER_CLIENT_ID}}"
              },
              {
                "key": "client_secret",
                "value": "{{ISSUER_CLIENT_SECRET}}"
              },
              {
                "key": "grant_type",
                "value": "client_credentials"
              },
              {
                "key": "scope",
                "value": "resolve:dids issue:credentials prove:presentations"
              }
            ]
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "ed17877c-396c-4a7c-b578-f0faebf4b392",
              "type": "text/javascript",
              "exec": [
                "// Token requests are expected to return a `200 Success` response code. Any",
                "// other response code should trigger a failure.",
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response should include an `access_token` value - this will be presented",
                "// to authenticated API endpoints in the `Authentication` header (see the last",
                "// testing code block for details on how this is persisted).",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The type of `access_token` returned by the token request is expected to be",
                "// `Bearer`.",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "// The returned data includes an `expires_in` field that indicates time until",
                "// token expiration. Validate that this value is a whole number greater than",
                "// zero, as anything less than or equal to zero means that the `access_token`",
                "// is already expired.",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "});",
                "",
                "// The returned `access_token` value is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// `pm.collectionVariables.get(\"issuer_access_token\")`.",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"issuer_access_token\", access_token);",
                "});"
              ],
              "_lastExecutionId": "f3f03413-5b52-424e-a7d8-0f8d50a9aa02"
            }
          }
        ]
      },
      {
        "id": "05f6a27e-c55c-4ae4-aa08-e65a02f95c29",
        "name": "Get Access Token (Verifier)",
        "request": {
          "url": {
            "host": [
              "{{VERIFIER_TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "audience",
                "value": "{{VERIFIER_TOKEN_AUDIENCE}}"
              },
              {
                "key": "client_id",
                "value": "{{VERIFIER_CLIENT_ID}}"
              },
              {
                "key": "client_secret",
                "value": "{{VERIFIER_CLIENT_SECRET}}"
              },
              {
                "key": "grant_type",
                "value": "client_credentials"
              },
              {
                "key": "scope",
                "value": "resolve:dids verify:presentations"
              }
            ]
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "64c27377-000e-4c47-afbf-642e9e5c7b7e",
              "type": "text/javascript",
              "exec": [
                "// Token requests are expected to return a `200 Success` response code. Any",
                "// other response code should trigger a failure.",
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response should include an `access_token` value - this will be presented",
                "// to authenticated API endpoints in the `Authentication` header (see the last",
                "// testing code block for details on how this is persisted).",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The type of `access_token` returned by the token request is expected to be",
                "// `Bearer`.",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "// The returned data includes an `expires_in` field that indicates time until",
                "// token expiration. Validate that this value is a whole number greater than",
                "// zero, as anything less than or equal to zero means that the `access_token`",
                "// is already expired.",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "});",
                "",
                "// The returned `access_token` value is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// `pm.collectionVariables.get(\"verifier_access_token\")`.",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"verifier_access_token\", access_token);",
                "});"
              ],
              "_lastExecutionId": "e8ff858d-61b4-49cc-ae0a-f3c8d2c49a7e"
            }
          }
        ]
      },
      {
        "id": "8a28f1d5-32e7-42a0-b6c2-492d13319277",
        "name": "Get Organization DIDs (Issuer)",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{ISSUER_ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{ISSUER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{issuer_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "4f6dd093-01dd-4229-8619-183be3f7a814",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "});",
                "",
                "// The response JSON must include a didDocument property that contains the",
                "// resolved DID document.",
                "pm.test(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "});",
                "",
                "// The DID document must contain an alsoKnownAs property.",
                "pm.test(\"alsoKnownAs MUST be present\", function () {",
                "    const { didDocument } = pm.response.json();",
                "    pm.expect(didDocument).to.have.property('alsoKnownAs');",
                "});",
                "",
                "// The alsoKnownAs property MUST be an array.",
                "pm.test(\"alsoKnownAs MUST be an array\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs).to.be.an('array');",
                "});",
                "",
                "// The alsoKnownAs property MUST be a set.",
                "pm.test(\"alsoKnownAs values MUST be unique\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "// The second element of the alsoKnownAs property will be used as a",
                "// credentials_issuer_id for subsequent tests.",
                "pm.test(\"alsoKnownAs[1] must be present\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs[1]).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// If a verificationMethod property is present, the controller property must",
                "// match the didDocument.id property.",
                "pm.test(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});",
                "",
                "// The value of didDocument.alsoKnownAs[1] is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// pm.collectionVariables.get(\"credential_issuer_id\").",
                "pm.test(\"`credential_issuer_id` persisted to collectionVariables\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.collectionVariables.set(\"credential_issuer_id\", alsoKnownAs[1]);",
                "});"
              ],
              "_lastExecutionId": "d5aa5d43-020e-43bf-99e7-8e79acdedaba"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "291cb8a5-981c-48de-aeb7-ca074f80ba51",
        "name": "Get Organization DIDs (Verifier)",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{VERIFIER_ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{VERIFIER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{verifier_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f346a8b9-da44-4d42-88ca-2bde2bd65ab7",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"Issuer makes unauthenticated discovery of verifiers exchange endpoint. `verifier_exchange_endpoint` is persisted to collectionVariables\", function() {",
                "    const { service } = pm.response.json().didDocument;",
                "    pm.collectionVariables.set(\"verifier_exchange_endpoint\", service[0].serviceEndpoint);",
                "});",
                "",
                ""
              ],
              "_lastExecutionId": "1749ef11-1cf5-495a-9231-1b8f65dc05c8"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "578d491f-a784-4389-97c8-a08d45703547",
        "name": "Issue Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "issue"
            ],
            "host": [
              "{{ISSUER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"id\": \"urn:uuid:{{$randomUUID}}\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{credential_issuer_id}}\",\n        \"issuanceDate\": \"{{$isoTimestamp}}\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        }\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\",\n        \"created\": \"{{$isoTimestamp}}\"\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{issuer_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "5f9c335f-278a-4d0b-b121-216f18cdae6d",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    const credential_issuer_id = pm.collectionVariables.get(\"credential_issuer_id\");",
                "    pm.expect(credential_issuer_id).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"must return `201 Created` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "// Verifiable credential must be made available to later requests",
                "pm.test(\"`verifiable_credential` persisted to collectionVariables\", function() {",
                "    const verifiable_credential = JSON.stringify(pm.response.json());",
                "    pm.collectionVariables.set(\"verifiable_credential\", verifiable_credential);",
                "})"
              ],
              "_lastExecutionId": "47a75da0-3d9d-45a1-9d71-1a61aa709f13"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "fc40e43c-5b8f-4879-9911-c8c21decc19e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f30c1f0-9b89-49bd-9711-9d5391db8d57"
            }
          }
        ]
      },
      {
        "id": "3c0fcce9-9242-4928-b31e-b685dcaf6a4d",
        "name": "Initiate Exchange",
        "request": {
          "url": {
            "path": [
              "presentations",
              "available"
            ],
            "host": [
              "{{verifier_exchange_endpoint}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"query\": [\n    {\n      \"type\": \"QueryByExample\",\n      \"credentialQuery\": [\n        {\n          \"type\": [\n            \"VerifiableCredential\"\n          ],\n          \"reason\": \"We want to present credentials.\"\n        }\n      ]\n    }\n  ]\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{verifier_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "81dd3169-d9a0-480d-9c3c-203b8942a88b",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `verifier_access_token` collection variable is missing, but",
                "// it will give an indication of why the request failed in that scenario.",
                "pm.test(\"`verifier_access_token` collection variable must be set\", function () {",
                "    const verifier_access_token = pm.collectionVariables.get(\"verifier_access_token\");",
                "    pm.expect(verifier_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Presentations Available\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response body must include a \"domain\" property.",
                "pm.test(\"response must include 'domain' property\", function() {",
                "    const { domain } = pm.response.json()",
                "    pm.expect(domain).to.be.a('string').that.is.not.empty;",
                "    // Domain must be made available to later requests",
                "    pm.collectionVariables.set(\"domain\", domain);",
                "});",
                "",
                "// The response body must include a \"challenge\" property.",
                "pm.test(\"response must include 'challenge' property\", function() {",
                "    const { challenge } = pm.response.json()",
                "    pm.expect(challenge).to.be.a('string').that.is.not.empty;",
                "    // Challenge must be made available to later requests",
                "    pm.collectionVariables.set(\"challenge\", challenge);",
                "});",
                ""
              ],
              "_lastExecutionId": "bc0e2b54-8e6f-44e7-a73d-31c2115121dd"
            }
          }
        ]
      },
      {
        "id": "8c53df27-527a-481e-a22a-d02e2dbeba7a",
        "name": "Sign Presentation",
        "request": {
          "url": {
            "path": [
              "presentations",
              "prove"
            ],
            "host": [
              "{{ISSUER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"presentation\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"type\": [\n            \"VerifiablePresentation\"\n        ],\n        \"holder\": \"{{credential_issuer_id}}\",\n        \"verifiableCredential\": [\n            {{verifiable_credential}}\n        ]\n    },\n    \"options\": {\n        \"domain\": \"{{domain}}\",\n        \"challenge\": \"{{challenge}}\"\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{issuer_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "dc07b2f1-0c42-4af6-9277-bce59d428060",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Credential issuer id is a required element item used in the request body",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    const credential_issuer_id = pm.collectionVariables.get(\"credential_issuer_id\");",
                "    pm.expect(credential_issuer_id).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Verifiable credential is a required element item used in the request body",
                "pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
                "    const verifiable_credential = pm.collectionVariables.get(\"verifiable_credential\");",
                "    pm.expect(verifiable_credential).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Domain is a required element item used in the request body",
                "pm.test(\"`domain` collection variable must be set\", function () {",
                "    const domain = pm.collectionVariables.get(\"domain\");",
                "    pm.expect(domain).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Challenge is a required element item used in the request body",
                "pm.test(\"`challenge` collection variable must be set\", function () {",
                "    const challenge = pm.collectionVariables.get(\"challenge\");",
                "    pm.expect(challenge).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Sign Presentation\" request is",
                "// `201 Success`.",
                "pm.test(\"must return `201 Success` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "// Verifiable presentation must be made available to later requests",
                "pm.test(\"`verifiable_presentation` persisted to collectionVariables\", function() {",
                "    const verifiable_presentation = JSON.stringify(pm.response.json());",
                "    pm.collectionVariables.set(\"verifiable_presentation\", verifiable_presentation);",
                "})"
              ],
              "_lastExecutionId": "32de1654-58f4-4ff8-b8c1-d2a0b50b26bf"
            }
          }
        ]
      },
      {
        "id": "65b35f7a-2d5b-4b2c-bd99-5e7e2fe2e998",
        "name": "Complete Exchange",
        "request": {
          "url": {
            "path": [
              "presentations",
              "submissions"
            ],
            "host": [
              "{{verifier_exchange_endpoint}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{{verifiable_presentation}}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{verifier_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "fc928f93-1c31-4b32-84c6-bcdd977794f2",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `verifier_access_token` collection variable is missing, but",
                "// it will give an indication of why the request failed in that scenario.",
                "pm.test(\"`verifier_access_token` collection variable must be set\", function () {",
                "    const verifier_access_token = pm.collectionVariables.get(\"verifier_access_token\");",
                "    pm.expect(verifier_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Complete Exchange\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// Response should confirm the submission is accepted.",
                "pm.test(\"verification response should be 'true'\", function() {",
                "    const { verified } = pm.response.json()",
                "    pm.expect(verified).to.be.true;",
                "});"
              ],
              "_lastExecutionId": "cafb403e-5368-403b-9154-f8bd2b57680c"
            }
          }
        ]
      },
      {
        "id": "997eba2f-6e35-4538-824e-1cee9ff85bd1",
        "name": "Verify Presentation",
        "request": {
          "url": {
            "path": [
              "presentations",
              "verify"
            ],
            "host": [
              "{{VERIFIER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"verifiablePresentation\": {{verifiable_presentation}},\n    \"options\": {\n        \"domain\": \"{{domain}}\",\n        \"challenge\": \"{{challenge}}\"\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{verifier_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a848e4cd-f5af-4ead-968f-6c5eb9f96558",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `verifier_access_token` collection variable is missing, but",
                "// it will give an indication of why the request failed in that scenario.",
                "pm.test(\"`verifier_access_token` collection variable must be set\", function () {",
                "    const verifier_access_token = pm.collectionVariables.get(\"verifier_access_token\");",
                "    pm.expect(verifier_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Verifiable verifiable_presentation is a required element item used in the",
                "// request body",
                "pm.test(\"`verifiable_presentation` collection variable must be set\", function () {",
                "    const verifiable_presentation = pm.collectionVariables.get(\"verifiable_presentation\");",
                "    pm.expect(verifiable_presentation).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Domain is a required element item used in the request body",
                "pm.test(\"`domain` collection variable must be set\", function () {",
                "    const domain = pm.collectionVariables.get(\"domain\");",
                "    pm.expect(domain).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Challenge is a required element item used in the request body",
                "pm.test(\"`challenge` collection variable must be set\", function () {",
                "    const challenge = pm.collectionVariables.get(\"challenge\");",
                "    pm.expect(challenge).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Verify Presentation\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// Response should confirm the presentation is verified.",
                "pm.test(\"verification response should be 'true'\", function() {",
                "    const { verified } = pm.response.json()",
                "    pm.expect(verified).to.be.true;",
                "});"
              ],
              "_lastExecutionId": "1a777fbc-54a7-40b3-8b01-0b31910e0c03"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 28,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 46,
        "pending": 0,
        "failed": 2
      },
      "testScripts": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 10,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 139.11111111111111,
      "responseMin": 35,
      "responseMax": 349,
      "responseSd": 100.17478552171194,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662255766795,
      "completed": 1662255768458
    },
    "executions": [
      {
        "id": "66f16c36-66a1-4c3d-a618-39587ee6ae2b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "55957b50-2a34-4bd5-91ac-4cf7806166d2",
          "httpRequestId": "b1d1c2f3-4127-4942-8419-066ae6f3497c"
        },
        "item": {
          "id": "66f16c36-66a1-4c3d-a618-39587ee6ae2b",
          "name": "Get Access Token (Issuer)"
        },
        "response": {
          "id": "6f8a1a53-1597-4889-aecc-fcb64ddcd156",
          "status": "OK",
          "code": 200,
          "responseTime": 349,
          "responseSize": 956
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f6a27e-c55c-4ae4-aa08-e65a02f95c29",
        "cursor": {
          "ref": "78a138d0-3808-471d-b354-22850a5f74fd",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e3e244b0-c349-407f-86d4-f09ee363e29b"
        },
        "item": {
          "id": "05f6a27e-c55c-4ae4-aa08-e65a02f95c29",
          "name": "Get Access Token (Verifier)"
        },
        "response": {
          "id": "1b1eeb5c-16a4-4e08-a1f6-50f7a7f2c0c2",
          "status": "OK",
          "code": 200,
          "responseTime": 226,
          "responseSize": 914
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a28f1d5-32e7-42a0-b6c2-492d13319277",
        "cursor": {
          "ref": "2fea45b1-1468-43c0-b92e-894a755f75f6",
          "length": 9,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d00c58b9-7f45-4eb7-8d78-1cba08366991"
        },
        "item": {
          "id": "8a28f1d5-32e7-42a0-b6c2-492d13319277",
          "name": "Get Organization DIDs (Issuer)"
        },
        "response": {
          "id": "3cb3c5b5-1e22-48fd-a892-1bd5ae194179",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 946
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": false
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be present",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be an array",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs values MUST be unique",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs[1] must be present",
            "skipped": false
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "291cb8a5-981c-48de-aeb7-ca074f80ba51",
        "cursor": {
          "ref": "7766153a-71ce-4b6c-ab6c-d62f1f2b79fc",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ff6b3fd7-9819-48d9-a312-8995f9902dd3"
        },
        "item": {
          "id": "291cb8a5-981c-48de-aeb7-ca074f80ba51",
          "name": "Get Organization DIDs (Verifier)"
        },
        "response": {
          "id": "eea72cc6-535d-4a42-b905-ce4ab1cb6e23",
          "status": "OK",
          "code": 200,
          "responseTime": 200,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Issuer makes unauthenticated discovery of verifiers exchange endpoint. `verifier_exchange_endpoint` is persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "578d491f-a784-4389-97c8-a08d45703547",
        "cursor": {
          "ref": "91f40cde-395a-4bcf-a826-021d28ccc4a5",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2f0d65b5-2b3d-452f-8d65-eeda12bdc2c9"
        },
        "item": {
          "id": "578d491f-a784-4389-97c8-a08d45703547",
          "name": "Issue Credential"
        },
        "response": {
          "id": "74179a6a-0abd-439a-98ed-be9eed9797cb",
          "status": "Created",
          "code": 201,
          "responseTime": 157,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Created` status",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0fcce9-9242-4928-b31e-b685dcaf6a4d",
        "cursor": {
          "ref": "86b52bc0-d3ac-42db-b92c-3ebc80d562f4",
          "length": 9,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6acca1ef-128d-461f-81ea-3f77fc371009"
        },
        "item": {
          "id": "3c0fcce9-9242-4928-b31e-b685dcaf6a4d",
          "name": "Initiate Exchange"
        },
        "response": {
          "id": "2962048f-aba3-4ce5-a787-a065d477109c",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 229
        },
        "assertions": [
          {
            "assertion": "`verifier_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response must include 'domain' property",
            "skipped": false
          },
          {
            "assertion": "response must include 'challenge' property",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c53df27-527a-481e-a22a-d02e2dbeba7a",
        "cursor": {
          "ref": "4b65b174-b771-4094-823e-715119ccb566",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "29ab3798-1309-496d-a4a7-75f587e58e2b"
        },
        "item": {
          "id": "8c53df27-527a-481e-a22a-d02e2dbeba7a",
          "name": "Sign Presentation"
        },
        "response": {
          "id": "4d42fb79-9450-4379-b57a-4e6ad66cd779",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 1371
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`domain` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`challenge` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Success` status",
            "skipped": false
          },
          {
            "assertion": "`verifiable_presentation` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b35f7a-2d5b-4b2c-bd99-5e7e2fe2e998",
        "cursor": {
          "ref": "e1a3eee9-e47c-4ae1-9459-bd5635e1af47",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "946c42e9-9e09-4fc6-aec4-4e1d964cf711"
        },
        "item": {
          "id": "65b35f7a-2d5b-4b2c-bd99-5e7e2fe2e998",
          "name": "Complete Exchange"
        },
        "response": {
          "id": "bb386c4b-1758-43bb-b066-d8d2bfd2fb93",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "`verifier_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "must return `200 Success` status",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:2:8)"
            }
          },
          {
            "assertion": "verification response should be 'true'",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "verification response should be 'true'",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:8)"
            }
          }
        ]
      },
      {
        "id": "997eba2f-6e35-4538-824e-1cee9ff85bd1",
        "cursor": {
          "ref": "7e98222e-9237-4112-9d7f-74cd862c867a",
          "length": 9,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5511d62b-3b37-4c28-8eb2-bf80abb2ceba"
        },
        "item": {
          "id": "997eba2f-6e35-4538-824e-1cee9ff85bd1",
          "name": "Verify Presentation"
        },
        "response": {
          "id": "a7523662-a99b-454f-83fe-fc61982d4c30",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 2704
        },
        "assertions": [
          {
            "assertion": "`verifier_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_presentation` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`domain` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`challenge` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "verification response should be 'true'",
            "skipped": false
          }
        ]
      }
    ]
  }
}