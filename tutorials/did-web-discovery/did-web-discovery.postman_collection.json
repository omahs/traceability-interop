{
	"info": {
		"_postman_id": "5b283aa1-ef37-4929-9e42-64c5dd5b4b68",
		"name": "DID Web Discovery",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Organization DIDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Some tests are skipped unless prerequisite tests pass and",
							"// update these variables to `pm.test`.",
							"var whenResponseIsOk         = pm.test.skip;",
							"var whenJsonIsValid          = pm.test.skip;",
							"var whenDidDocumentIsPresent = pm.test.skip;",
							"var whenHasAlsoKnownAs       = pm.test.skip;",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    whenResponseIsOk = pm.test;",
							"});",
							"",
							"whenResponseIsOk(\"must include valid JSON response body\", function() {",
							"    pm.response.json(); // will throw on parse failure",
							"    whenJsonIsValid = pm.test;",
							"});",
							"",
							"whenJsonIsValid(\"didDocument must be present in response body\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('didDocument');",
							"    whenDidDocumentIsPresent = pm.test;",
							"});",
							"",
							"whenJsonIsValid(\"didResolutionMetadata must be present in response body\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('didResolutionMetadata');",
							"});",
							"",
							"whenJsonIsValid(\"didDocumentMetadata must be present in response body\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('didDocumentMetadata');",
							"});",
							"",
							"whenDidDocumentIsPresent(\"alsoKnownAs MUST be present\", function () {",
							"    var jsonData = pm.response.json().didDocument;",
							"    pm.expect(jsonData).to.have.property('alsoKnownAs');",
							"    whenHasAlsoKnownAs = pm.test;",
							"});",
							"",
							"whenHasAlsoKnownAs(\"alsoKnownAs MUST be an array\", function() {",
							"    var jsonData = pm.response.json().didDocument;",
							"    pm.expect(jsonData.alsoKnownAs).to.be.an('array');",
							"});",
							"",
							"whenHasAlsoKnownAs(\"alsoKnownAs values MUST be unique\", function() {",
							"    var jsonData = pm.response.json().didDocument;",
							"    pm.expect(new Set(jsonData.alsoKnownAs)).to.have.lengthOf(jsonData.alsoKnownAs.length);",
							"});",
							"",
							"whenDidDocumentIsPresent(\"verification method controller must match did subject\", function() {",
							"    var didDocument = pm.response.json().didDocument;",
							"    var vm = didDocument.verificationMethod || [];",
							"    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{API_BASE_URL}}/identifiers/{{ORGANIZATION_DID_WEB}}",
					"host": [
						"{{API_BASE_URL}}"
					],
					"path": [
						"identifiers",
						"{{ORGANIZATION_DID_WEB}}"
					]
				}
			},
			"response": []
		}
	]
}