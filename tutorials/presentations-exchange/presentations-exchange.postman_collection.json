{
	"info": {
		"_postman_id": "3fe21025-a4b0-4827-a9c8-fd89e5465a81",
		"name": "Presentations Exchange Tutorial",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Access Token (Issuer)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Token requests are expected to return a `200 Success` response code. Any",
							"// other response code should trigger a failure.",
							"pm.test(\"must return `200 Success` status\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// The response should include an `access_token` value - this will be presented",
							"// to authenticated API endpoints in the `Authentication` header (see the last",
							"// testing code block for details on how this is persisted).",
							"pm.test(\"response body must include non-empty access_token\", function () {",
							"    const { access_token } = pm.response.json()",
							"    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
							"});",
							"",
							"// The type of `access_token` returned by the token request is expected to be",
							"// `Bearer`.",
							"pm.test(\"response body must represent `Bearer` token\", function() {",
							"    const { token_type } = pm.response.json()",
							"    pm.expect(token_type).to.equal(\"Bearer\");",
							"});",
							"",
							"// The returned data includes an `expires_in` field that indicates time until",
							"// token expiration. Validate that this value is a whole number greater than",
							"// zero, as anything less than or equal to zero means that the `access_token`",
							"// is already expired.",
							"pm.test(\"returned token must expire in the future\", function() {",
							"    const { expires_in } = pm.response.json()",
							"    pm.expect(expires_in).to.be.above(0);",
							"});",
							"",
							"// The returned `access_token` value is persisted as a Postman collection",
							"// variable that can be accessed by other requests in the collection by calling",
							"// `pm.collectionVariables.get(\"issuer_access_token\")`.",
							"pm.test(\"`access_token` persisted to collectionVariables\", function() {",
							"    const { access_token } = pm.response.json()",
							"    pm.collectionVariables.set(\"issuer_access_token\", access_token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"audience\": \"{{ISSUER_TOKEN_AUDIENCE}}\",\n    \"client_id\": \"{{ISSUER_CLIENT_ID}}\",\n    \"client_secret\": \"{{ISSUER_CLIENT_SECRET}}\",\n    \"grant_type\": \"client_credentials\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ISSUER_TOKEN_ENDPOINT}}",
					"host": [
						"{{ISSUER_TOKEN_ENDPOINT}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Access Token (Verifier)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Token requests are expected to return a `200 Success` response code. Any",
							"// other response code should trigger a failure.",
							"pm.test(\"must return `200 Success` status\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// The response should include an `access_token` value - this will be presented",
							"// to authenticated API endpoints in the `Authentication` header (see the last",
							"// testing code block for details on how this is persisted).",
							"pm.test(\"response body must include non-empty access_token\", function () {",
							"    const { access_token } = pm.response.json()",
							"    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
							"});",
							"",
							"// The type of `access_token` returned by the token request is expected to be",
							"// `Bearer`.",
							"pm.test(\"response body must represent `Bearer` token\", function() {",
							"    const { token_type } = pm.response.json()",
							"    pm.expect(token_type).to.equal(\"Bearer\");",
							"});",
							"",
							"// The returned data includes an `expires_in` field that indicates time until",
							"// token expiration. Validate that this value is a whole number greater than",
							"// zero, as anything less than or equal to zero means that the `access_token`",
							"// is already expired.",
							"pm.test(\"returned token must expire in the future\", function() {",
							"    const { expires_in } = pm.response.json()",
							"    pm.expect(expires_in).to.be.above(0);",
							"});",
							"",
							"// The returned `access_token` value is persisted as a Postman collection",
							"// variable that can be accessed by other requests in the collection by calling",
							"// `pm.collectionVariables.get(\"verifier_access_token\")`.",
							"pm.test(\"`access_token` persisted to collectionVariables\", function() {",
							"    const { access_token } = pm.response.json()",
							"    pm.collectionVariables.set(\"verifier_access_token\", access_token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"audience\": \"{{VERIFIER_TOKEN_AUDIENCE}}\",\n    \"client_id\": \"{{VERIFIER_CLIENT_ID}}\",\n    \"client_secret\": \"{{VERIFIER_CLIENT_SECRET}}\",\n    \"grant_type\": \"client_credentials\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{VERIFIER_TOKEN_ENDPOINT}}",
					"host": [
						"{{VERIFIER_TOKEN_ENDPOINT}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Issuer Organization DIDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// This endpoint is authenticated. This test will not prevent the request from",
							"// running when the `issuer_access_token` collection variable is missing, but it",
							"// will give an indication of why the request failed in that scenario.",
							"pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
							"    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
							"    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"must include valid JSON response body\", function() {",
							"    pm.response.json(); // will throw on parse failure",
							"});",
							"",
							"// The response JSON must include a didDocument property that contains the",
							"// resolved DID document.",
							"pm.test(\"didDocument must be present in response body\", function() {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('didDocument');",
							"});",
							"",
							"// The DID document must contain an alsoKnownAs property.",
							"pm.test(\"alsoKnownAs MUST be present\", function () {",
							"    const { didDocument } = pm.response.json();",
							"    pm.expect(didDocument).to.have.property('alsoKnownAs');",
							"});",
							"",
							"// The alsoKnownAs property MUST be an array.",
							"pm.test(\"alsoKnownAs MUST be an array\", function() {",
							"    const { alsoKnownAs } = pm.response.json().didDocument;",
							"    pm.expect(alsoKnownAs).to.be.an('array');",
							"});",
							"",
							"// The alsoKnownAs property MUST be a set.",
							"pm.test(\"alsoKnownAs values MUST be unique\", function() {",
							"    const { alsoKnownAs } = pm.response.json().didDocument;",
							"    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
							"});",
							"",
							"// The second element of the alsoKnownAs property will be used as a",
							"// credentials_issuer_id for subsequent tests.",
							"pm.test(\"alsoKnownAs[1] must be present\", function() {",
							"    const { alsoKnownAs } = pm.response.json().didDocument;",
							"    pm.expect(alsoKnownAs[1]).to.be.a('string').that.is.not.empty;",
							"});",
							"",
							"// If a verificationMethod property is present, the controller property must",
							"// match the didDocument.id property.",
							"pm.test(\"verification method controller must match did subject\", function() {",
							"    const { didDocument } = pm.response.json();",
							"    const vm = didDocument.verificationMethod || [];",
							"    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
							"});",
							"",
							"// The value of didDocument.alsoKnownAs[1] is persisted as a Postman collection",
							"// variable that can be accessed by other requests in the collection by calling",
							"// pm.collectionVariables.get(\"credential_issuer_id\").",
							"pm.test(\"`credential_issuer_id` persisted to collectionVariables\", function() {",
							"    const { alsoKnownAs } = pm.response.json().didDocument;",
							"    pm.collectionVariables.set(\"credential_issuer_id\", alsoKnownAs[1]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{issuer_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{ISSUER_API_BASE_URL}}/identifiers/{{ISSUER_ORGANIZATION_DID_WEB}}",
					"host": [
						"{{ISSUER_API_BASE_URL}}"
					],
					"path": [
						"identifiers",
						"{{ISSUER_ORGANIZATION_DID_WEB}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Verifier Organization DIDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Issuer makes unauthenticated discovery of verifiers exchange endpoint. `verifier_exchange_endpoint` is persisted to collectionVariables\", function() {",
							"    const { services } = pm.response.json().didDocument;",
							"    pm.collectionVariables.set(\"verifier_exchange_endpoint\", services[0].serviceEndpoint);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{VERIFIER_API_BASE_URL}}/identifiers/{{VERIFIER_ORGANIZATION_DID_WEB}}",
					"host": [
						"{{VERIFIER_API_BASE_URL}}"
					],
					"path": [
						"identifiers",
						"{{VERIFIER_ORGANIZATION_DID_WEB}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Issue Credential",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// This endpoint is authenticated. This test will not prevent the request from",
							"// running when the `issuer_access_token` collection variable is missing, but it",
							"// will give an indication of why the request failed in that scenario.",
							"pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
							"    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
							"    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
							"});",
							"",
							"pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
							"    const credential_issuer_id = pm.collectionVariables.get(\"credential_issuer_id\");",
							"    pm.expect(credential_issuer_id).to.be.a('string').that.is.not.empty;",
							"});",
							"",
							"pm.test(\"must return `201 Created` status\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Verifiable credential must be made available to later requests",
							"pm.test(\"`verifiable_credential` persisted to collectionVariables\", function() {",
							"    const verifiable_credential = JSON.stringify(pm.response.json());",
							"    pm.collectionVariables.set(\"verifiable_credential\", verifiable_credential);",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{issuer_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"id\": \"urn:uuid:{{$randomUUID}}\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{credential_issuer_id}}\",\n        \"issuanceDate\": \"2010-01-01T19:23:24Z\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        }\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\",\n        \"created\": \"2020-04-02T18:48:36Z\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ISSUER_API_BASE_URL}}/credentials/issue",
					"host": [
						"{{ISSUER_API_BASE_URL}}"
					],
					"path": [
						"credentials",
						"issue"
					]
				}
			},
			"response": []
		},
		{
			"name": "Initiate Exchange",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// This endpoint is authenticated. This test will not prevent the request from",
							"// running when the `verifier_access_token` collection variable is missing, but",
							"// it will give an indication of why the request failed in that scenario.",
							"pm.test(\"`verifier_access_token` collection variable must be set\", function () {",
							"    const verifier_access_token = pm.collectionVariables.get(\"verifier_access_token\");",
							"    pm.expect(verifier_access_token).to.be.a('string').that.is.not.empty;",
							"});",
							"",
							"// The expected response code for a \"Presentations Available\" request is",
							"// `200 Success`.",
							"pm.test(\"must return `200 Success` status\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// The response body must include a \"domain\" property.",
							"pm.test(\"response must include 'domain' property\", function() {",
							"    const { domain } = pm.response.json()",
							"    pm.expect(domain).to.be.a('string').that.is.not.empty;",
							"    // Domain must be made available to later requests",
							"    pm.collectionVariables.set(\"domain\", domain);",
							"});",
							"",
							"// The response body must include a \"challenge\" property.",
							"pm.test(\"response must include 'challenge' property\", function() {",
							"    const { challenge } = pm.response.json()",
							"    pm.expect(challenge).to.be.a('string').that.is.not.empty;",
							"    // Challenge must be made available to later requests",
							"    pm.collectionVariables.set(\"challenge\", challenge);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{verifier_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"query\": [\n    {\n      \"type\": \"QueryByExample\",\n      \"credentialQuery\": [\n        {\n          \"type\": [\n            \"VerifiableCredential\"\n          ],\n          \"reason\": \"We want to present credentials.\"\n        }\n      ]\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{verifier_exchange_endpoint}}/presentations/available",
					"host": [
						"{{verifier_exchange_endpoint}}"
					],
					"path": [
						"presentations",
						"available"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign Presentation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// This endpoint is authenticated. This test will not prevent the request from",
							"// running when the `issuer_access_token` collection variable is missing, but it",
							"// will give an indication of why the request failed in that scenario.",
							"pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
							"    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
							"    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
							"});",
							"",
							"// Credential issuer id is a required element item used in the request body",
							"pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
							"    const credential_issuer_id = pm.collectionVariables.get(\"credential_issuer_id\");",
							"    pm.expect(credential_issuer_id).to.be.a('string').that.is.not.empty;",
							"});",
							"",
							"// Verifiable credential is a required element item used in the request body",
							"pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
							"    const verifiable_credential = pm.collectionVariables.get(\"verifiable_credential\");",
							"    pm.expect(verifiable_credential).to.be.a('string').that.is.not.empty;",
							"});",
							"",
							"// Domain is a required element item used in the request body",
							"pm.test(\"`domain` collection variable must be set\", function () {",
							"    const domain = pm.collectionVariables.get(\"domain\");",
							"    pm.expect(domain).to.be.a('string').that.is.not.empty;",
							"});",
							"",
							"// Challenge is a required element item used in the request body",
							"pm.test(\"`challenge` collection variable must be set\", function () {",
							"    const challenge = pm.collectionVariables.get(\"challenge\");",
							"    pm.expect(challenge).to.be.a('string').that.is.not.empty;",
							"});",
							"",
							"// The expected response code for a \"Sign Presentation\" request is",
							"// `201 Success`.",
							"pm.test(\"must return `201 Success` status\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Verifiable presentation must be made available to later requests",
							"pm.test(\"`verifiable_presentation` persisted to collectionVariables\", function() {",
							"    const verifiable_presentation = JSON.stringify(pm.response.json());",
							"    pm.collectionVariables.set(\"verifiable_presentation\", verifiable_presentation);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{issuer_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"presentation\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"type\": [\n            \"VerifiablePresentation\"\n        ],\n        \"holder\": \"{{credential_issuer_id}}\",\n        \"verifiableCredential\": [\n            {{verifiable_credential}}\n        ]\n    },\n    \"options\": {\n        \"domain\": \"{{domain}}\",\n        \"challenge\": \"{{challenge}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ISSUER_API_BASE_URL}}/presentations/prove",
					"host": [
						"{{ISSUER_API_BASE_URL}}"
					],
					"path": [
						"presentations",
						"prove"
					]
				}
			},
			"response": []
		},
		{
			"name": "Complete Exchange",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// This endpoint is authenticated. This test will not prevent the request from",
							"// running when the `verifier_access_token` collection variable is missing, but",
							"// it will give an indication of why the request failed in that scenario.",
							"pm.test(\"`verifier_access_token` collection variable must be set\", function () {",
							"    const verifier_access_token = pm.collectionVariables.get(\"verifier_access_token\");",
							"    pm.expect(verifier_access_token).to.be.a('string').that.is.not.empty;",
							"});",
							"",
							"// The expected response code for a \"Complete Exchange\" request is",
							"// `200 Success`.",
							"pm.test(\"must return `200 Success` status\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Response should confirm the submission is accepted.",
							"pm.test(\"verification response should be 'true'\", function() {",
							"    const { verified } = pm.response.json()",
							"    pm.expect(verified).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{verifier_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{verifiable_presentation}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{verifier_exchange_endpoint}}/presentations/submissions",
					"host": [
						"{{verifier_exchange_endpoint}}"
					],
					"path": [
						"presentations",
						"submissions"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "credential_issuer_id",
			"value": ""
		},
		{
			"key": "verifiable_credential",
			"value": ""
		},
		{
			"key": "domain",
			"value": ""
		},
		{
			"key": "challenge",
			"value": ""
		},
		{
			"key": "verifiable_presentation",
			"value": ""
		},
		{
			"key": "issuer_access_token",
			"value": ""
		},
		{
			"key": "verifier_access_token",
			"value": ""
		},
		{
			"key": "credential_verifier_id",
			"value": ""
		},
		{
			"key": "verifier_exchange_endpoint",
			"value": ""
		}
	]
}