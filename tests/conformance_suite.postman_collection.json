{
	"info": {
		"_postman_id": "7f2d134c-0652-4763-bcaa-ff75092b3e39",
		"name": "Conformance Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4338127"
	},
	"item": [
		{
			"name": "Discovery - API Configuration",
			"item": [
				{
					"name": "Positive Testing",
					"item": [
						{
							"name": "did_json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{did_web_endpoint}}",
									"host": [
										"{{did_web_endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Discovery requires a multi-tenant aware did web endpoint",
							"const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
							"const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
							"pm.variables.set('did_web_endpoint', did_web_endpoint);",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Identifiers - Resolve",
			"item": [
				{
					"name": "Negative Testing",
					"item": [
						{
							"name": "Bad Request",
							"item": [
								{
									"name": "did:invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_BASE_URL}}/identifiers/invalid_did",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"identifiers",
												"invalid_did"
											]
										}
									},
									"response": []
								},
								{
									"name": "did:not_found:did_web",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 404\", function () {",
													" pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_BASE_URL}}/identifiers/did:web:example.com",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"identifiers",
												"did:web:example.com"
											]
										}
									},
									"response": []
								},
								{
									"name": "did:not_found:urn",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 404\", function () {",
													" pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_BASE_URL}}/identifiers/urn:uuid:{{$randomUUID}}",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"identifiers",
												"urn:uuid:{{$randomUUID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bad Auth",
							"item": [
								{
									"name": "identifiers:missing_auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 401\", function () {",
													" pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{API_BASE_URL}}/identifiers/{{ORGANIZATION_DID_WEB}}",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"identifiers",
												"{{ORGANIZATION_DID_WEB}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "identifiers:missing_scope:resolve:dids",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 403\", function () {",
													" pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Obtain an access token without the required \"resolve:dids\" scope",
													"utils(pm).getAccessToken('')",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{API_BASE_URL}}/identifiers/{{ORGANIZATION_DID_WEB}}",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"identifiers",
												"{{ORGANIZATION_DID_WEB}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Positive Testing",
					"item": [
						{
							"name": "identifiers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
											"     strict: true,",
											"     strictSchema: true,",
											" });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_BASE_URL}}/identifiers/{{ORGANIZATION_DID_WEB}}",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"identifiers",
										"{{ORGANIZATION_DID_WEB}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{currentAccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Obtain an access token with the required \"resolve:dids\" scope",
							"utils(pm).getAccessToken('resolve:dids');",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Credentials - Create",
			"item": [
				{
					"name": "Negative Testing",
					"item": [
						{
							"name": "Bad Request",
							"item": [
								{
									"name": "credentials_issue:credential:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // \"credential\" is a required field",
													"    delete req.credential;",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.@context:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // \"credential.@context\" is a required field",
													"    delete req.credential[\"@context\"];",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.@context:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // \"credential.@context\" must be an array, not a boolean",
													"    req.credential[\"@context\"] = false;",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.@context:integer Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // \"credential.@context\" must be an array, not an integer",
													"    req.credential[\"@context\"] = 42;",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.@context:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // \"credential.@context\" must be an array, not null",
													"    req.credential[\"@context\"] = null;",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.@context:object",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // \"credential.@context\" must be an array, not an object",
													"    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.@context:string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // \"credential.@context\" must be an array, not a string",
													"    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.@context.item.array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // Elements of credential.@context array must be string, not array",
													"    req.credential[\"@context\"] = [",
													"        \"https://www.w3.org/2018/credentials/v1\",",
													"        [\"https://w3id.org/traceability/v1\"],",
													"    ];",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.@context.item.boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // Elements of credential.@context array must be string, not boolean",
													"    req.credential[\"@context\"] = [",
													"        \"https://www.w3.org/2018/credentials/v1\",",
													"        false,",
													"    ];",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.@context.item.integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // Elements of credential.@context array must be string, not integer",
													"    req.credential[\"@context\"] = [",
													"        \"https://www.w3.org/2018/credentials/v1\",",
													"        42,",
													"    ];",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.@context.item.null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // Elements of credential.@context array must be string, not integer",
													"    req.credential[\"@context\"] = [",
													"        \"https://www.w3.org/2018/credentials/v1\",",
													"        null,",
													"    ];",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.@context.item.object",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // Elements of credential.@context array must be string, not object",
													"    req.credential[\"@context\"] = [",
													"        \"https://www.w3.org/2018/credentials/v1\",",
													"        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
													"    ];",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.id:array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // Optional credential.id must be string, not array",
													"    req.credential.id = [pm.variables.get(\"credentialId\")];",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.id:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // Optional credential.id must be string, not boolean",
													"    req.credential.id = false;",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.id:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // Optional credential.id must be string, not integer",
													"    req.credential.id = 42;",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.id:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // Optional credential.id must be string, not null",
													"    req.credential.id = null;",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.id:object",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // Optional credential.id must be string, not object",
													"    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.type:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.type is a required property",
													"    delete req.credential.type;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.type:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.type must be array, not boolean",
													"    req.credential.type = false;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.type:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.type must be array, not integer",
													"    req.credential.type = 42;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.type:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.type must be array, not null",
													"    req.credential.type = null;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.type:object",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.type must be array, not object",
													"    req.credential.type = {};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.type:string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.type must be array, not string",
													"    req.credential.type = \"VerifiableCredential\";",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.type.item:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.type must have at least one element",
													"    req.credential.type = [];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.type.item:array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.type elements must be string, not array",
													"    req.credential.type = [",
													"        \"VerifiableCredential\",",
													"        [\"AnotherType\"],",
													"    ];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.type.item:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.type elements must be string, not boolean",
													"    req.credential.type = [",
													"        \"VerifiableCredential\",",
													"        false,",
													"    ];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.type.item:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.type elements must be string, not integer",
													"    req.credential.type = [",
													"        \"VerifiableCredential\",",
													"        42,",
													"    ];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.type.item:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.type elements must be string, not null",
													"    req.credential.type = [",
													"        \"VerifiableCredential\",",
													"        null,",
													"    ];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.type.item:object",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.type elements must be string, not object",
													"    req.credential.type = [",
													"        \"VerifiableCredential\",",
													"        {},",
													"    ];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuer:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuer is a required property",
													"    delete req.credential.issuer;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuer:array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuer must be string or object with id, not array",
													"    req.credential.issuer = [pm.variables.get(\"issuer\")];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuer:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuer must be string or object with id, not boolean",
													"    req.credential.issuer = false;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuer:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuer must be string or object with id, not integer",
													"    req.credential.issuer = 42;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuer:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuer must be string or object with id, not null",
													"    req.credential.issuer = null;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue.credential.issuer:invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuer must be a valid URI",
													"    req.credential.issuer = \"not.a.uri\"",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue.credential.issuer:unknown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuer must be known to the endpoint.",
													"    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuer.id:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuer.id is required when issuer is in object format",
													"    req.credential.issuer = {};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuer.id:array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuer.id must be string, not array",
													"    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuer.id:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuer.id must be string, not boolean",
													"    req.credential.issuer = {\"id\": false};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuer.id:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuer.id must be string, not integer",
													"    req.credential.issuer = {\"id\": 42};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuer.id:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuer.id must be string, not null",
													"    req.credential.issuer = {\"id\": null};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue.credential.issuer.id:invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuer.id must be a valid URI",
													"    req.credential.issuer = {\"id\": \"not.a.uri\"}",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue.credential.issuer.id:unknown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuer.id must be known to the endpoint.",
													"    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuanceDate.missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuanceDate is a required property",
													"    delete req.credential.issuanceDate;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuanceDate:array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuanceDate must be string, not array",
													"    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuanceDate:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuanceDate must be string, not boolean",
													"    req.credential.issuanceDate = false;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuanceDate:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuanceDate must be string, not integer",
													"    req.credential.issuanceDate = 42;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuanceDate:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuanceDate must be string, not null",
													"    req.credential.issuanceDate = null;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuanceDate:object",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuanceDate must be string, not object",
													"    req.credential.issuanceDate = {};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuanceDate:invalid_value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.issuanceDate must be a valid XML date time string",
													"    req.credential.issuanceDate = \"not an xml date time string\";",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.credentialSubject:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.credentialSubject is a required property",
													"    delete req.credential.credentialSubject;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.credentialSubject:array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.credentialSubject must be object, not array",
													"    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.credentialSubject:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.credentialSubject must be object, not boolean",
													"    req.credential.credentialSubject = false;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.credentialSubject:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.credentialSubject must be object, not integer",
													"    req.credential.credentialSubject = 42;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.credentialSubject:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.credentialSubject must be object, not null",
													"    req.credential.credentialSubject = null;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.credentialSubject:string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.credentialSubject must be object, not string.",
													"    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.credentialSubject.id:array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.credentialSubject.id must be string, not array",
													"    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.credentialSubject.id:array Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.credentialSubject.id must be string, not boolean",
													"    req.credential.credentialSubject = {\"id\": false};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.credentialSubject.id must be string, not integer",
													"    req.credential.credentialSubject = {\"id\": 42};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.credentialSubject.id must be string, not null",
													"    req.credential.credentialSubject = {\"id\": null};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credential.credentialSubject.id must be string, not object",
													"    req.credential.credentialSubject = {\"id\": {}};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options is a required property",
													"    delete req.options;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options:array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options must be object, not array",
													"    req.options = [];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options must be object, not boolean",
													"    req.options = false;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options must be object, not integer",
													"    req.options = 42;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options must be object, not null",
													"    req.options = null;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options:string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options must be object, not string",
													"    req.options = \"\";",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.type:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.type is a required property",
													"    delete req.options.type;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.type:array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.type must be string, not array",
													"    req.options.type = [\"Ed25519Signature2018\"];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.type:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.type must be string, not boolean",
													"    req.options.type = false;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.type:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.type must be string, not integer",
													"    req.options.type = 42;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.type:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.type must be string, not null",
													"    req.options.type = null;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.type:object",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.type must be string, not object",
													"    req.options.type = {};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.type:invalid_value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.type must be one of the valid values",
													"    req.options.type = \"invalid value\";",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.credentialStatus:array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.credentialStatus must be object, not array",
													"    req.options.credentialStatus = [\"RevocationList2020Status\"];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.credentialStatus:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.credentialStatus must be object, not boolean",
													"    req.options.credentialStatus = false;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.credentialStatus:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.credentialStatus must be object, not integer",
													"    req.options.credentialStatus = 42;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.credentialStatus:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.credentialStatus must be object, not null",
													"    req.options.credentialStatus = null;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.credentialStatus:string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.credentialStatus must be object, not string",
													"    req.options.credentialStatus = \"RevocationList2020Status\";",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.credentialStatus.type:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.credentialStatus must contain \"type\" when present    ",
													"    req.options.credentialStatus = {};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.credentialStatus.type:array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.credentialStatus.type must be string, not array",
													"    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.credentialStatus.type:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.credentialStatus.type must be string, not boolean",
													"    req.options.credentialStatus = {\"type\": false};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.credentialStatus.type:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.credentialStatus.type must be string, not integer",
													"    req.options.credentialStatus = {\"type\": 42};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.credentialStatus.type:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.credentialStatus.type must be string, not null",
													"    req.options.credentialStatus = {\"type\": null};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.credentialStatus.type:null Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.credentialStatus.type must be string, not object",
													"    req.options.credentialStatus = {\"type\": {}};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.credentialStatus.type:invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // options.credentialStatus.type must be a valid value",
													"    req.options.credentialStatus = {\"type\": \"invalid value\"};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server."
						},
						{
							"name": "Bad Auth",
							"item": [
								{
									"name": "credentials_issue:missing_auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 401\", function () {",
													" pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:missing_scope:issue_credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 403\", function () {",
													" pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Obtain an access token without the required \"issue:credentials\" scope",
													"utils(pm).getAccessToken('');",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Positive Testing",
					"item": [
						{
							"name": "credentials_issue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											"",
											"pm.test(\"response issuer matches request credential.issuer\", function() {",
											" const { issuer } = pm.response.json();",
											" pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
											"});",
											"",
											"pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
											" const { credentialSubject } = pm.response.json();",
											" pm.expect(credentialSubject).to.be.empty;",
											"});",
											"",
											"pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
											" const { issuanceDate } = pm.response.json();",
											" pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
											"});",
											"",
											"pm.test(\"response proof.created is close to 'now'\", function() {",
											" const { proof } = pm.response.json();",
											" const delta = Math.abs(Date.parse(proof.created) - Date.now());",
											" const tenSecondsInMs = 10000;",
											" pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "credentials_issue:credential:opt.id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// credential.id is optional",
											"rawBody.credential.id = pm.variables.get(\"credential_id\");",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "credentials_issue:credential:alt.issuer.object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											"",
											"pm.test(\"response issuer matches request credential.issuer.id\", function() {",
											" const { issuer } = pm.response.json();",
											" // Implementations may reduce object with just \"id\" property to a bare string",
											" if (typeof issuer === 'string') {",
											"  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
											" } else {",
											"  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
											" }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// credential.issuer can be an object with required 'id' element",
											"rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											"",
											"pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
											" const { credentialSubject } = pm.response.json();",
											" pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// credential.credentialSubject can be an object with optional 'id' element",
											"rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "credentials_issue:options:opt.created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// options.created can be an optional string value",
											"rawBody.options.created = \"an arbitrary string\";",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "credentials_issue:options:opt.credentialStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// options.credentialStatus can be an optional object",
											"rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{currentAccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Populate \"currentAccessToken\" with a bearer token that has the required",
							"// \"issue:credentials\" scope.",
							"",
							"utils(pm).getAccessToken('issue:credentials');",
							"",
							"// Some values are stored in variables so that they can be substituted",
							"// into the request body and so that the response body can be tested to",
							"// ensure it contains the same value.",
							"",
							"pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
							"pm.variables.set(\"credentialSubject\", \"did:example:123\")",
							"pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
							"pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
							"",
							"// Minimal request body should represent the minimum set of data required",
							"// to issue a valid credential. This should exclude all optional items, and",
							"// should contain the first alternate version of any 'oneOf' elements",
							"// defined in the OpenAPI schema.",
							"//",
							"// Tests will use this minimal request body as a starting point and will",
							"// mutate it as needed in pre-request scripts, e.g., to run tests using",
							"// alternate or optional elements.",
							"",
							"pm.variables.set(\"minimalRequestBody\", {",
							"    \"credential\": {",
							"        \"@context\": [",
							"            \"https://www.w3.org/2018/credentials/v1\"",
							"        ],",
							"        \"type\": [",
							"            \"VerifiableCredential\"",
							"        ],",
							"        \"issuer\": pm.variables.get(\"issuer\"),",
							"        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
							"        \"credentialSubject\": {}",
							"    },",
							"    \"options\": {",
							"        \"type\": \"Ed25519Signature2018\"",
							"    }",
							"});",
							"",
							"mutateRequestBody = (mutationFunction) => {",
							"    const req = pm.variables.get(\"minimalRequestBody\");",
							"    mutationFunction(req);",
							"    return JSON.stringify(req);",
							"};",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Credentials - Update Status",
			"item": [
				{
					"name": "Negative Testing",
					"item": [
						{
							"name": "Bad Request",
							"item": [
								{
									"name": "credentials_status:credentialId:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialId is a required property",
													"    delete req.credentialId;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialId:array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialId must be string, not array",
													"    req.credentialId = [pm.variables.get(\"credentialId\")];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialId:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialId must be string, not boolean",
													"    req.credentialId = false;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialId:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialId must be string, not integer",
													"    req.credentialId = 42;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialId:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialId must be string, not null",
													"    req.credentialId = null;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialId:object",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialId must be string, not object",
													"    req.credentialId = {};",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus is a required property",
													"    delete req.credentialStatus;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus must be array, not boolean",
													"    req.credentialstatus = false;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus must be array, not integer",
													"    req.credentialstatus = 42;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus must be array, not null",
													"    req.credentialstatus = null;",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:object",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus must be array, not object",
													"    req.credentialstatus = {",
													"        \"type\": \"RevocationList2020Status\",",
													"        \"status\": \"0\"",
													"    };",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus must be array, not string",
													"    req.credentialstatus = \"RevocationList2020Status\";",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:too_long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus can only have zero or one elements.",
													"    req.credentialstatus = [",
													"        {",
													"            \"type\": \"RevocationList2020Status\",",
													"            \"status\": \"0\",",
													"        },",
													"        {",
													"            \"type\": \"RevocationList2020Status\",",
													"            \"status\": \"1\",",
													"        }",
													"    ];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus elements must be object, not array",
													"    req.credentialstatus = [[]];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus elements must be object, not boolean",
													"    req.credentialstatus = [false];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus elements must be object, not integer",
													"    req.credentialstatus = [42];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus elements must be object, not null",
													"    req.credentialstatus = [null];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus elements must be object, not string",
													"    req.credentialstatus = [\"RevocationList2020Status\"];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:type:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus item type is a required property",
													"    req.credentialstatus = [{",
													"        \"status\": \"0\",",
													"    }];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:type:array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus item type must be string, not array",
													"    req.credentialstatus = [{",
													"        \"type\": [\"RevocationList2020Status\"],",
													"        \"status\": \"0\",",
													"    }];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:type:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus item type must be string, not boolean",
													"    req.credentialstatus = [{",
													"        \"type\": false,",
													"        \"status\": \"0\",",
													"    }];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:type:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus item type must be string, not integer",
													"    req.credentialstatus = [{",
													"        \"type\": 42,",
													"        \"status\": \"0\",",
													"    }];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:type:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus item type must be string, not null",
													"    req.credentialstatus = [{",
													"        \"type\": null,",
													"        \"status\": \"0\",",
													"    }];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:type:object",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus item type must be string, not object",
													"    req.credentialstatus = [{",
													"        \"type\": {},",
													"        \"status\": \"0\",",
													"    }];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:type:invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus item type must be a valid value",
													"    req.credentialstatus = [{",
													"        \"type\": \"invalid value\",",
													"        \"status\": \"0\",",
													"    }];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:status:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus item status is a required property",
													"    req.credentialstatus = [{",
													"        \"type\": \"RevocationList2020Status\",",
													"    }];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:status:array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus item status must be string, not array",
													"    req.credentialstatus = [{",
													"        \"type\": \"RevocationList2020Status\",",
													"        \"status\": [\"0\"],",
													"    }];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:status:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus item status must be string, not boolean",
													"    req.credentialstatus = [{",
													"        \"type\": \"RevocationList2020Status\",",
													"        \"status\": false,",
													"    }];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:status:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus item status must be string, not integer",
													"    req.credentialstatus = [{",
													"        \"type\": \"RevocationList2020Status\",",
													"        \"status\": 1,",
													"    }];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:status:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus item status must be string, not null",
													"    req.credentialstatus = [{",
													"        \"type\": \"RevocationList2020Status\",",
													"        \"status\": null,",
													"    }];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:status:object",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus item status must be string, not object",
													"    req.credentialstatus = [{",
													"        \"type\": \"RevocationList2020Status\",",
													"        \"status\": {},",
													"    }];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:credentialStatus:item:status:invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
													"    // credentialStatus item status must be a valid value",
													"    req.credentialstatus = [{",
													"        \"type\": \"RevocationList2020Status\",",
													"        \"status\": \"invalid value\",",
													"    }];",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bad Auth",
							"item": [
								{
									"name": "credentials_status:missing_auth",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 401\", function () {",
													" pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:missing_scope:update_credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Obtain an access token without the required \"update:credentials\" scope",
													"utils(pm).getAccessToken('');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 403\", function () {",
													" pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{currentAccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Populate \"currentAccessToken\" with a bearer token that has the required",
							"// \"update:credentials\" scope.",
							"",
							"utils(pm).getAccessToken('update:credentials');",
							"",
							"// Some values are stored in variables so that they can be substituted",
							"// into the request body and so that the response body can be tested to",
							"// ensure it contains the same value.",
							"",
							"pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
							"",
							"// Minimal request body should represent the minimum set of data required",
							"// to issue a valid credential. This should exclude all optional items, and",
							"// should contain the first alternate version of any 'oneOf' elements",
							"// defined in the OpenAPI schema.",
							"//",
							"// Tests will use this minimal request body as a starting point and will",
							"// mutate it as needed in pre-request scripts, e.g., to run tests using",
							"// alternate or optional elements.",
							"",
							"pm.variables.set(\"minimalRequestBody\", {",
							"    \"credentialId\": pm.variables.get(\"credentialId\"),",
							"    \"credentialStatus\": [],",
							"});",
							"",
							"mutateRequestBody = (mutationFunction) => {",
							"    const req = pm.variables.get(\"minimalRequestBody\");",
							"    mutationFunction(req);",
							"    return JSON.stringify(req);",
							"};"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Credentials - Verify",
			"item": [
				{
					"name": "Negative Testing",
					"item": [
						{
							"name": "Bad Request",
							"item": [
								{
									"name": "credentials_verify:vc:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": \"string\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": 123\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.@context must be an array of strings",
													"rawBody[\"@context\"] = true;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.@context must be an array of strings",
													"rawBody[\"@context\"] = 123;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.@context must be an array of strings",
													"rawBody[\"@context\"] = null;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:string",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:item:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.@context must be an array of strings",
													"rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:item:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.@context must be an array of strings",
													"rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:item:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.@context must be an array of strings",
													"rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:item:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.@context must be an array of strings",
													"rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:item:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:id:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:id:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:id:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:id:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:id:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody[\"type\"] = true;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody[\"type\"] = 123;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody[\"type\"] = null;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:string",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:item:missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must have at least one element",
													"rawBody.type = [];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:item:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:item:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody.type = [\"VerifiableCredential\", true];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:item:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody.type = [\"VerifiableCredential\", 123];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:item:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody.type = [\"VerifiableCredential\", null];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:item:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:id:missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:id:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:id:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:id:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:id:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:id:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuanceDate:missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuanceDate:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuanceDate:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuanceDate:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuanceDate:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuanceDate:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuanceDate:string",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:string",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:id:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:id:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:id:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:id:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:id:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof is required for embedded proof VCs",
													"delete rawBody.proof",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof is required to be an object for embedded proof VCs",
													"rawBody.proof = [];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof is required to be an object for embedded proof VCs",
													"rawBody.proof = true;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof is required to be an object for embedded proof VCs",
													"rawBody.proof = 10;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof is required to be an object for embedded proof VCs",
													"rawBody.proof = null;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:string",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof is required to be an object for embedded proof VCs",
													"rawBody.proof = \"string\";",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:type:missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.type is required for embedded proof VCs",
													"delete rawBody.proof.type",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:type:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.type is required to be a specific string",
													"rawBody.proof.type = [\"Ed25519Signature2018\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:type:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.type is required to be a specific string",
													"rawBody.proof.type = true;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:type:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.type is required to be a specific string",
													"rawBody.proof.type = 123;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:type:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.type is required to be a specific string",
													"rawBody.proof.type = null;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:type:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.type is required to be a specific string",
													"rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:type:string",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.type is required to be a specific string",
													"rawBody.proof.type = \"not one of the valid values\";",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:created:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.created is required to be a string",
													"rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:created:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.created is required to be a string",
													"rawBody.proof.created = true;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:created:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.created is required to be a string",
													"rawBody.proof.created = 123;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:created:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.created is required to be a string",
													"rawBody.proof.created = null;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:created:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.created is required to be a string",
													"rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:verificationMethod:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.verificationMethod is required to be a string",
													"rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:verificationMethod:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.verificationMethod is required to be a string",
													"rawBody.proof.verificationMethod = true;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:verificationMethod:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.verificationMethod is required to be a string",
													"rawBody.proof.verificationMethod = 123;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:verificationMethod:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.verificationMethod is required to be a string",
													"rawBody.proof.verificationMethod = null;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:verificationMethod:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.verificationMethod is required to be a string",
													"rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:jws:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.jws is required to be a string",
													"rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:jws:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.jws is required to be a string",
													"rawBody.proof.jws = true;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:jws:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.jws is required to be a string",
													"rawBody.proof.jws = 123;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:jws:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.jws is required to be a string",
													"rawBody.proof.jws = null;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:jws:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.jws is required to be a string",
													"rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:proofPurpose:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
													"rawBody.proof.proofPurpose = [\"assertionMethod\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:proofPurpose:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
													"rawBody.proof.proofPurpose = true;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:proofPurpose:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
													"rawBody.proof.proofPurpose = 123;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:proofPurpose:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
													"rawBody.proof.proofPurpose = null;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:proofPurpose:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
													"rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:proofPurpose:string",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
													"rawBody.proof.proofPurpose = \"not a valid value\";",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"status code is 400\", function () {",
											" pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "Bad Auth",
							"item": [
								{
									"name": "credentials_verify:missing_auth",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 401\", function () {",
													" pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:missing_scope:verify_credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Obtain an access token without the required \"verify:credentials\" scope",
													"utils(pm).getAccessToken('');",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 403\", function () {",
													" pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Positive Testing",
					"item": [
						{
							"name": "credentials_verify",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/verify",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "credentials_verify:id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/verify",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "credentials_verify:issuer:object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/verify",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"verify"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{currentAccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Obtain an access token with the required \"verify:credentials\" scope",
							"utils(pm).getAccessToken('verify:credentials');",
							"",
							"// Dummy VC issued for testing",
							"pm.variables.set(\"valid_vc\", {",
							"    \"@context\": [",
							"        \"https://www.w3.org/2018/credentials/v1\"",
							"    ],",
							"    \"credentialSubject\": {",
							"        \"id\": \"did:example:123\"",
							"    },",
							"    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
							"    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
							"    \"proof\": {",
							"        \"created\": \"2020-04-02T18:48:36Z\",",
							"        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
							"        \"proofPurpose\": \"assertionMethod\",",
							"        \"type\": \"Ed25519Signature2018\",",
							"        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
							"    },",
							"    \"type\": \"VerifiableCredential\"",
							"});",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Presentations - Present",
			"item": [
				{
					"name": "Negative Testing",
					"item": [
						{
							"name": "Bad Auth",
							"item": [
								{
									"name": "presentations:missing_auth",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Get multi-tenant aware presentations base URL from cached did:web document",
													"const didDoc = pm.variables.get(\"currentDidWeb\");",
													"const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
													"pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 401\", function () {",
													" pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{presentations_base_url}}/presentations",
											"host": [
												"{{presentations_base_url}}"
											],
											"path": [
												"presentations"
											]
										}
									},
									"response": []
								},
								{
									"name": "presentations:missing_scope:submit_presentations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Obtain an access token without the required \"submit:presentations\" scope",
													"utils(pm).getAccessToken('');",
													"",
													"// Get multi-tenant aware presentations base URL from cached did:web document",
													"const didDoc = pm.variables.get(\"currentDidWeb\");",
													"const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
													"pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 403\", function () {",
													" pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{presentations_base_url}}/presentations",
											"host": [
												"{{presentations_base_url}}"
											],
											"path": [
												"presentations"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{currentAccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Obtain an access token with the required \"submit:presentations\" scope.  This",
							"// fires off an async sendRequest() that Postman will wait for before running",
							"// any requests in the collection.",
							"utils(pm).getAccessToken('submit:presentations');",
							"",
							"// Presentations requires a multi-tenant aware presentation endpoint. This",
							"// fires off an async sendRequest() that Postman will wait for before running",
							"// any requests in the collection.",
							"utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Presentations - Create",
			"item": [
				{
					"name": "Negative Testing",
					"item": [
						{
							"name": "Bad Auth",
							"item": [
								{
									"name": "presentations_prove:missing_auth",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Get multi-tenant aware presentations base URL from cached did:web document",
													"const didDoc = pm.variables.get(\"currentDidWeb\");",
													"const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
													"pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 401\", function () {",
													" pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{presentations_base_url}}/presentations/prove",
											"host": [
												"{{presentations_base_url}}"
											],
											"path": [
												"presentations",
												"prove"
											]
										}
									},
									"response": []
								},
								{
									"name": "presentations_prove:missing_scope:prove_presentations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Obtain an access token without the required \"prove:presentations\" scope",
													"utils(pm).getAccessToken('');",
													"",
													"// Get multi-tenant aware presentations base URL from cached did:web document",
													"const didDoc = pm.variables.get(\"currentDidWeb\");",
													"const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
													"pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 403\", function () {",
													" pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{presentations_base_url}}/presentations/prove",
											"host": [
												"{{presentations_base_url}}"
											],
											"path": [
												"presentations",
												"prove"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "bearer"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Obtain an access token with the required \"prove:presentations\" scope.  This",
							"// fires off an async sendRequest() that Postman will wait for before running",
							"// any requests in the collection.",
							"utils(pm).getAccessToken('prove:presentations');",
							"",
							"// Presentations requires a multi-tenant aware presentation endpoint. This",
							"// fires off an async sendRequest() that Postman will wait for before running",
							"// any requests in the collection.",
							"utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Presentations - Verify",
			"item": [
				{
					"name": "Negative Testing",
					"item": [
						{
							"name": "Bad Auth",
							"item": [
								{
									"name": "presentations_verify:missing_auth",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Get multi-tenant aware presentations base URL from cached did:web document",
													"const didDoc = pm.variables.get(\"currentDidWeb\");",
													"const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
													"pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 401\", function () {",
													" pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{presentations_base_url}}/presentations/verify",
											"host": [
												"{{presentations_base_url}}"
											],
											"path": [
												"presentations",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "presentations_verify:missing_scope:verify_presentations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Obtain an access token without the required \"verify:presentations\" scope",
													"utils(pm).getAccessToken('');",
													"",
													"// Get multi-tenant aware presentations base URL from cached did:web document",
													"const didDoc = pm.variables.get(\"currentDidWeb\");",
													"const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
													"pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 403\", function () {",
													" pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{presentations_base_url}}/presentations/verify",
											"host": [
												"{{presentations_base_url}}"
											],
											"path": [
												"presentations",
												"verify"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "bearer"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Obtain an access token with the required \"verify:presentations\" scope.  This",
							"// fires off an async sendRequest() that Postman will wait for before running",
							"// any requests in the collection.",
							"utils(pm).getAccessToken('verify:presentations');",
							"",
							"// Presentations requires a multi-tenant aware presentation endpoint. This",
							"// fires off an async sendRequest() that Postman will wait for before running",
							"// any requests in the collection.",
							"utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Presentations - Notify",
			"item": [],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Presentations requires a multi-tenant aware presentation endpoint. This",
							"// fires off an async sendRequest() that Postman will wait for before running",
							"// any requests in the collection.",
							"utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Presentations - Submit",
			"item": [],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Presentations requires a multi-tenant aware presentation endpoint. This",
							"// fires off an async sendRequest() that Postman will wait for before running",
							"// any requests in the collection.",
							"utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// hydrateCache retrieves a cache from global scope. Caches are stored",
					"// in global scope so that they will persist across requests.",
					"const hydrateCache = (cacheName) => {",
					"    if (!pm.globals.has(cacheName)) {",
					"        return {};",
					"    }",
					"    try {",
					"        const cache = pm.globals.get(cacheName);",
					"        return JSON.parse(cache)",
					"    } catch(e) {",
					"        console.warn(`ignoring invalid cache \"${cacheName}\"`);",
					"    }",
					"    return {}",
					"}",
					"",
					"const tokenCache = hydrateCache(\"tokenCache\");",
					"const didWebCache = hydrateCache(\"didWebCache\");",
					"",
					"// convertDidWebToEndpoint produces a URL to the DID document for a given",
					"// `did:web` DID.",
					"const convertDidWebToEndpoint = (did) => {",
					"    const re = /did:web:(?<host>[a-zA-Z0-9/.\\-_]+)(?:%3[aA](?<port>[0-9]+))?(?<path>:[a-zA-Z0-9/.:\\-_]+)?/",
					"    const match = did.match(re);",
					"    if (!match) {",
					"        throw new Error('DID is not a valid did:web');",
					"    }",
					"    const { host, port, path } = match.groups;",
					"    const hostport = port ? `${host}:${port}` : `${host}`",
					"    const pathname = path?.split(':').join('/') || '/.well-known';",
					"    return `${port ? 'http' : 'https'}://${hostport}${pathname}/did.json`;",
					"};",
					"",
					"// The pm variable is not available inside global methods.",
					"utils = (pm) => {",
					"",
					"    // NB: The main Postman request will not be sent until the pre-request script",
					"    //     is determined to be finished with all callbacks, including sendRequest.",
					"",
					"    return {",
					"        convertDidWebToEndpoint,",
					"        populateCurrentDidWeb: (did) => {",
					"            if (didWebCache[did]) {",
					"                pm.variables.set(\"currentDidWeb\", didWebCache[did]);",
					"                return;",
					"            }",
					"            const didWebRequest = {",
					"                url: convertDidWebToEndpoint(did),",
					"                method: 'GET',",
					"            };",
					"            pm.sendRequest(didWebRequest, (err, res) => {",
					"                pm.expect(err).to.be.null;",
					"                didWebCache[did] = res.json();",
					"                pm.globals.set(\"didWebCache\", JSON.stringify(didWebCache));",
					"                pm.variables.set(\"currentDidWeb\", didWebCache[did]);",
					"            });",
					"        },",
					"        getAccessToken: (scope) => {",
					"            if (tokenCache[scope]) {",
					"                pm.variables.set('currentAccessToken', tokenCache[scope]);",
					"                return;",
					"            }",
					"            const accessTokenRequest = {",
					"                url: pm.environment.get(\"TOKEN_ENDPOINT\"),",
					"                method: 'POST',",
					"                body: {",
					"                    mode: 'urlencoded',",
					"                    urlencoded: [",
					"                        {key: \"client_id\", value: pm.environment.get(\"CLIENT_ID\")},",
					"                        {key: \"client_secret\", value: pm.environment.get(\"CLIENT_SECRET\")},",
					"                        {key: \"audience\", value: pm.environment.get(\"TOKEN_AUDIENCE\")},",
					"                        {key: \"grant_type\", value: \"client_credentials\" },",
					"                        {key: \"scope\", value: scope},",
					"                    ],",
					"                }",
					"            };",
					"            pm.sendRequest(accessTokenRequest, (err, res) => {",
					"                pm.expect(err).to.be.null;",
					"                tokenCache[scope] = res.json().access_token;",
					"                pm.globals.set(\"tokenCache\", JSON.stringify(tokenCache));",
					"                pm.variables.set(\"currentAccessToken\", tokenCache[scope]);",
					"            });",
					"        },",
					"    };",
					"};"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "responseSchema201CredentialsIssue",
			"value": "{\"title\":\"Serialized Verifiable Credential\",\"oneOf\":[{\"title\":\"Verifiable Credential\",\"type\":\"object\",\"allOf\":[{\"type\":\"object\",\"required\":[\"@context\",\"type\",\"issuer\",\"issuanceDate\",\"credentialSubject\"],\"properties\":{\"@context\":{\"description\":\"This JSON-LD Context defining all terms in the Credential.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"id\":{\"description\":\"The IRI identifying the Credential\",\"type\":\"string\"},\"type\":{\"description\":\"The Type of the Credential\",\"type\":\"array\",\"items\":{\"type\":\"string\"},\"minItems\":1},\"issuer\":{\"description\":\"This value MUST match the assertionMethod used to create the Verifiable Credential.\",\"oneOf\":[{\"type\":\"string\"},{\"type\":\"object\",\"required\":[\"id\"],\"properties\":{\"id\":{\"description\":\"The IRI identifying the Issuer\",\"type\":\"string\"}}}]},\"issuanceDate\":{\"description\":\"This value MUST be an XML Date Time String\",\"type\":\"string\"},\"credentialSubject\":{\"type\":\"object\",\"properties\":{\"id\":{\"description\":\"The IRI identifying the Subject\",\"type\":\"string\"}}}}},{\"type\":\"object\",\"required\":[\"proof\"],\"properties\":{\"proof\":{\"title\":\"Credential Linked Data Proof\",\"allOf\":[{\"title\":\"Linked Data Proof\",\"type\":\"object\",\"description\":\"A JSON-LD Linked Data proof.\",\"required\":[\"type\"],\"properties\":{\"type\":{\"type\":\"string\",\"description\":\"Linked Data Signature Suite used to produce proof.\",\"enum\":[\"Ed25519Signature2018\",\"JsonWebSignature2020\",\"jwt_vc\"]},\"created\":{\"type\":\"string\",\"description\":\"Date the proof was created.\"},\"verificationMethod\":{\"type\":\"string\",\"description\":\"Verification Method used to verify proof.\"},\"jws\":{\"type\":\"string\",\"description\":\"Detached JSON Web Signature\"}}},{\"type\":\"object\",\"properties\":{\"proofPurpose\":{\"type\":\"string\",\"description\":\"Credentials rely on assertionMethod proof purpose.\",\"enum\":[\"assertionMethod\"]}}}]}}}]},{\"title\":\"VC JWT\",\"type\":\"string\"}]}",
			"type": "string"
		},
		{
			"key": "responseSchema400",
			"value": "{\"allOf\":[{\"type\":\"object\",\"required\":[\"message\"],\"properties\":{\"message\":{\"type\":\"string\"},\"details\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}},{\"type\":\"object\",\"additionalProperties\":true}]}}},{\"type\":\"object\",\"properties\":{\"message\":{\"enum\":[\"Bad Request: Your request body does not conform to the required schema\"]}}}]}",
			"type": "string"
		},
		{
			"key": "responseSchema401",
			"value": "{\"allOf\":[{\"type\":\"object\",\"required\":[\"message\"],\"properties\":{\"message\":{\"type\":\"string\"},\"details\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}},{\"type\":\"object\",\"additionalProperties\":true}]}}},{\"type\":\"object\",\"properties\":{\"message\":{\"enum\":[\"Unauthorized: This endpoint requires an OAuth2 bearer token\"]}}}]}",
			"type": "string"
		},
		{
			"key": "responseSchema403",
			"value": "{\"allOf\":[{\"type\":\"object\",\"required\":[\"message\"],\"properties\":{\"message\":{\"type\":\"string\"},\"details\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}},{\"type\":\"object\",\"additionalProperties\":true}]}}},{\"type\":\"object\",\"properties\":{\"message\":{\"enum\":[\"Forbidden: OAuth2 bearer token does not have the required scope\"]}}}]}",
			"type": "string"
		},
		{
			"key": "responseSchema404",
			"value": "{\"allOf\":[{\"type\":\"object\",\"required\":[\"message\"],\"properties\":{\"message\":{\"type\":\"string\"},\"details\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}},{\"type\":\"object\",\"additionalProperties\":true}]}}},{\"type\":\"object\",\"properties\":{\"message\":{\"enum\":[\"Not Found: The requested resource could not be found\"]}}}]}",
			"type": "string"
		},
		{
			"key": "responseSchema500",
			"value": "{\"type\":\"object\",\"required\":[\"message\"],\"properties\":{\"message\":{\"type\":\"string\"},\"details\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}},{\"type\":\"object\",\"additionalProperties\":true}]}}}",
			"type": "string"
		},
		{
			"key": "responseSchema200Identifiers",
			"value": "{\"type\":\"object\",\"required\":[\"didDocument\"],\"properties\":{\"didDocument\":{\"type\":\"object\",\"required\":[\"service\"],\"properties\":{\"service\":{\"type\":\"array\",\"minItems\":1,\"items\":{\"type\":\"object\",\"required\":[\"type\",\"serviceEndpoint\"],\"properties\":{\"type\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}}]},\"serviceEndpoint\":{\"type\":\"string\"}}}}}},\"didResolutionMetadata\":{\"type\":\"object\"},\"didDocumentMetadata\":{\"type\":\"object\"}}}",
			"type": "string"
		},
		{
			"key": "responseSchema400Identifiers",
			"value": "{\"description\":\"ErrInvalidDID is returned when the request path contains an invalid DID\\nparameter.\\n\",\"allOf\":[{\"type\":\"object\",\"required\":[\"message\"],\"properties\":{\"message\":{\"type\":\"string\"},\"details\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}},{\"type\":\"object\",\"additionalProperties\":true}]}}},{\"type\":\"object\",\"properties\":{\"message\":{\"enum\":[\"Bad Request: Invalid DID\"]}}}]}",
			"type": "string"
		},
		{
			"key": "responseSchema200ApiConfiguration",
			"value": "{\"title\":\"Traceability API DID Web Document\",\"type\":\"object\",\"properties\":{\"@context\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"uniqueItems\":true,\"items\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"object\"}]}}]},\"id\":{\"type\":\"string\"},\"service\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"serviceEndpoint\":{\"type\":\"string\"}}}}}}",
			"type": "string"
		},
		{
			"key": "responseSchema200CredentialsVerify",
			"value": "{\"title\":\"Verification Result\",\"type\":\"object\",\"properties\":{\"verified\":{\"type\":\"boolean\"},\"verifications\":{\"type\":\"array\",\"items\":{\"title\":\"Verification\",\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"enum\":[\"Proof\",\"Activation\",\"Expired\",\"Revocation\"]},\"status\":{\"type\":\"string\",\"enum\":[\"good\",\"bad\"]},\"description\":{\"type\":\"string\"}},\"required\":[\"title\",\"status\"]}}},\"required\":[\"verified\"]}",
			"type": "string"
		}
	]
}
